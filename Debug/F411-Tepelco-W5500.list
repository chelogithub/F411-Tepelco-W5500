
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08010354  08010354  00020354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cbc  08010cbc  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08010cbc  08010cbc  00020cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cc4  08010cc4  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cc4  08010cc4  00020cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cc8  08010cc8  00020cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08010ccc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f4  20000198  08010e64  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000458c  08010e64  0003458c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b3f  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c9a  00000000  00000000  00044d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000479e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  00048af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018521  00000000  00000000  000498d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173f6  00000000  00000000  00061df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093686  00000000  00000000  000791e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e8  00000000  00000000  0010c870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00111c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801033c 	.word	0x0801033c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0801033c 	.word	0x0801033c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b098      	sub	sp, #96	; 0x60
 800069a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a8:	4bcb      	ldr	r3, [pc, #812]	; (80009d8 <main+0x344>)
 80006aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ae:	22a8      	movs	r2, #168	; 0xa8
 80006b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b4:	4bc8      	ldr	r3, [pc, #800]	; (80009d8 <main+0x344>)
 80006b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006c0:	4bc5      	ldr	r3, [pc, #788]	; (80009d8 <main+0x344>)
 80006c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c6:	2201      	movs	r2, #1
 80006c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc2      	ldr	r3, [pc, #776]	; (80009d8 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d8:	4bbf      	ldr	r3, [pc, #764]	; (80009d8 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e4:	4bbc      	ldr	r3, [pc, #752]	; (80009d8 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006f0:	4bb9      	ldr	r3, [pc, #740]	; (80009d8 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb6      	ldr	r3, [pc, #728]	; (80009d8 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000708:	4bb3      	ldr	r3, [pc, #716]	; (80009d8 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000714:	4bb0      	ldr	r3, [pc, #704]	; (80009d8 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 8000720:	4bad      	ldr	r3, [pc, #692]	; (80009d8 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072c:	4baa      	ldr	r3, [pc, #680]	; (80009d8 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	22c0      	movs	r2, #192	; 0xc0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000738:	4ba7      	ldr	r3, [pc, #668]	; (80009d8 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2203      	movs	r2, #3
 8000740:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba4      	ldr	r3, [pc, #656]	; (80009d8 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 8000750:	4ba1      	ldr	r3, [pc, #644]	; (80009d8 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075c:	4b9e      	ldr	r3, [pc, #632]	; (80009d8 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000768:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2206      	movs	r2, #6
 8000770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b98      	ldr	r3, [pc, #608]	; (80009d8 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000780:	4b95      	ldr	r3, [pc, #596]	; (80009d8 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078c:	4b92      	ldr	r3, [pc, #584]	; (80009d8 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000798:	4b8f      	ldr	r3, [pc, #572]	; (80009d8 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a4:	4b8c      	ldr	r3, [pc, #560]	; (80009d8 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007b0:	4b89      	ldr	r3, [pc, #548]	; (80009d8 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007bc:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c8:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d4:	4b80      	ldr	r3, [pc, #512]	; (80009d8 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	; (80009d8 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ec:	4b7a      	ldr	r3, [pc, #488]	; (80009d8 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f8:	4b77      	ldr	r3, [pc, #476]	; (80009d8 <main+0x344>)
 80007fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080c:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000814:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <main+0x344>)
 8000816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000822:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000828:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 8000830:	4b69      	ldr	r3, [pc, #420]	; (80009d8 <main+0x344>)
 8000832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000836:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083e:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 8000840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000844:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084c:	4b62      	ldr	r3, [pc, #392]	; (80009d8 <main+0x344>)
 800084e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000852:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 800085a:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000860:	2200      	movs	r2, #0
 8000862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <main+0x344>)
 8000876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000888:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 8000890:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <main+0x344>)
 8000892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000896:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089e:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <main+0x344>)
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x344>)
 80008ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <main+0x348>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008e0:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <main+0x344>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <main+0x350>)
 80008ea:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <main+0x344>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f4:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <main+0x354>)
 80008f6:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <main+0x358>)
 80008fa:	f005 ff2d 	bl	8006758 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fe:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <main+0x360>)
 8000902:	f00e fd35 	bl	800f370 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000906:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <main+0x368>)
 800090a:	f00e fd31 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090e:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 8000910:	483c      	ldr	r0, [pc, #240]	; (8000a04 <main+0x370>)
 8000912:	f00e fd2d 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000916:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000918:	483c      	ldr	r0, [pc, #240]	; (8000a0c <main+0x378>)
 800091a:	f00e fd29 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091e:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <main+0x380>)
 8000922:	f00e fd25 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000926:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000928:	483c      	ldr	r0, [pc, #240]	; (8000a1c <main+0x388>)
 800092a:	f00e fd21 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092e:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <main+0x390>)
 8000932:	f00e fd1d 	bl	800f370 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000936:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <main+0x398>)
 800093a:	f00e fd19 	bl	800f370 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 8000970:	2206      	movs	r2, #6
 8000972:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000978:	2201      	movs	r2, #1
 800097a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 8000980:	2203      	movs	r2, #3
 8000982:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009b0:	2233      	movs	r2, #51	; 0x33
 80009b2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b8:	2234      	movs	r2, #52	; 0x34
 80009ba:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009c0:	2235      	movs	r2, #53	; 0x35
 80009c2:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d6:	e02b      	b.n	8000a30 <main+0x39c>
 80009d8:	200002e4 	.word	0x200002e4
 80009dc:	20003fe8 	.word	0x20003fe8
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001b4 	.word	0x200001b4
 80009ec:	200023b4 	.word	0x200023b4
 80009f0:	20000024 	.word	0x20000024
 80009f4:	200023ba 	.word	0x200023ba
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	200023da 	.word	0x200023da
 8000a00:	20000038 	.word	0x20000038
 8000a04:	200023ea 	.word	0x200023ea
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	200023fa 	.word	0x200023fa
 8000a10:	20000050 	.word	0x20000050
 8000a14:	20002400 	.word	0x20002400
 8000a18:	20000060 	.word	0x20000060
 8000a1c:	20002416 	.word	0x20002416
 8000a20:	20000070 	.word	0x20000070
 8000a24:	20002426 	.word	0x20002426
 8000a28:	20000080 	.word	0x20000080
 8000a2c:	20002410 	.word	0x20002410
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <main+0x574>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4b73      	ldr	r3, [pc, #460]	; (8000c08 <main+0x574>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		wf.RESET_PORT=GPIOA;
 8000a40:	4b71      	ldr	r3, [pc, #452]	; (8000c08 <main+0x574>)
 8000a42:	4a72      	ldr	r2, [pc, #456]	; (8000c0c <main+0x578>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4b70      	ldr	r3, [pc, #448]	; (8000c08 <main+0x574>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	4870      	ldr	r0, [pc, #448]	; (8000c10 <main+0x57c>)
 8000a50:	f00a ff6a 	bl	800b928 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4b6e      	ldr	r3, [pc, #440]	; (8000c10 <main+0x57c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	486e      	ldr	r0, [pc, #440]	; (8000c14 <main+0x580>)
 8000a5c:	f00a ff64 	bl	800b928 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4b6c      	ldr	r3, [pc, #432]	; (8000c14 <main+0x580>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4869      	ldr	r0, [pc, #420]	; (8000c14 <main+0x580>)
 8000a6e:	f00a fffe 	bl	800ba6e <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 ffe1 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 fb2f 	bl	80010d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <main+0x584>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a67      	ldr	r2, [pc, #412]	; (8000c1c <main+0x588>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdba 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fc90 	bl	80013b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a90:	f000 fb8a 	bl	80011a8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a94:	f000 fbbe 	bl	8001214 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fc36 	bl	8001308 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 fc5e 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	485f      	ldr	r0, [pc, #380]	; (8000c20 <main+0x58c>)
 8000aa4:	f000 fd2a 	bl	80014fc <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	495e      	ldr	r1, [pc, #376]	; (8000c24 <main+0x590>)
 8000aac:	485e      	ldr	r0, [pc, #376]	; (8000c28 <main+0x594>)
 8000aae:	f004 fd7b 	bl	80055a8 <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000ab2:	4855      	ldr	r0, [pc, #340]	; (8000c08 <main+0x574>)
 8000ab4:	f005 fd4c 	bl	8006550 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000ab8:	4b53      	ldr	r3, [pc, #332]	; (8000c08 <main+0x574>)
 8000aba:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <main+0x436>
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	4859      	ldr	r0, [pc, #356]	; (8000c2c <main+0x598>)
 8000ac6:	f000 fd19 	bl	80014fc <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4958      	ldr	r1, [pc, #352]	; (8000c30 <main+0x59c>)
 8000ace:	4859      	ldr	r0, [pc, #356]	; (8000c34 <main+0x5a0>)
 8000ad0:	f004 fdaf 	bl	8005632 <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000ad4:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <main+0x5a4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	4857      	ldr	r0, [pc, #348]	; (8000c3c <main+0x5a8>)
 8000ae0:	f000 fd0c 	bl	80014fc <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000ae4:	4856      	ldr	r0, [pc, #344]	; (8000c40 <main+0x5ac>)
 8000ae6:	f00c fa7b 	bl	800cfe0 <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000aea:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000aee:	f002 f815 	bl	8002b1c <HAL_Delay>
     eth_init(&ETH);
 8000af2:	4853      	ldr	r0, [pc, #332]	; (8000c40 <main+0x5ac>)
 8000af4:	f00c fc5e 	bl	800d3b4 <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000af8:	4951      	ldr	r1, [pc, #324]	; (8000c40 <main+0x5ac>)
 8000afa:	4852      	ldr	r0, [pc, #328]	; (8000c44 <main+0x5b0>)
 8000afc:	f00c ffdf 	bl	800dabe <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b04:	f002 f80a 	bl	8002b1c <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	484d      	ldr	r0, [pc, #308]	; (8000c40 <main+0x5ac>)
 8000b0c:	f00c fd24 	bl	800d558 <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b10:	494b      	ldr	r1, [pc, #300]	; (8000c40 <main+0x5ac>)
 8000b12:	484c      	ldr	r0, [pc, #304]	; (8000c44 <main+0x5b0>)
 8000b14:	f00c ffd3 	bl	800dabe <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2124      	movs	r1, #36	; 0x24
 8000b2c:	4844      	ldr	r0, [pc, #272]	; (8000c40 <main+0x5ac>)
 8000b2e:	f00c faae 	bl	800d08e <SPI_ETH_REG>
 8000b32:	4603      	mov	r3, r0
 8000b34:	84fb      	strh	r3, [r7, #38]	; 0x26
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4841      	ldr	r0, [pc, #260]	; (8000c40 <main+0x5ac>)
 8000b3c:	f00c fc18 	bl	800d370 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <main+0x5b4>)
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	483c      	ldr	r0, [pc, #240]	; (8000c40 <main+0x5ac>)
 8000b50:	f00c fa9d 	bl	800d08e <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000b54:	212e      	movs	r1, #46	; 0x2e
 8000b56:	483d      	ldr	r0, [pc, #244]	; (8000c4c <main+0x5b8>)
 8000b58:	f000 fcd0 	bl	80014fc <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <main+0x5bc>)
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4835      	ldr	r0, [pc, #212]	; (8000c40 <main+0x5ac>)
 8000b6c:	f00c fa8f 	bl	800d08e <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000b70:	2120      	movs	r1, #32
 8000b72:	4838      	ldr	r0, [pc, #224]	; (8000c54 <main+0x5c0>)
 8000b74:	f000 fcc2 	bl	80014fc <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b78:	4931      	ldr	r1, [pc, #196]	; (8000c40 <main+0x5ac>)
 8000b7a:	4832      	ldr	r0, [pc, #200]	; (8000c44 <main+0x5b0>)
 8000b7c:	f00c ff9f 	bl	800dabe <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	482e      	ldr	r0, [pc, #184]	; (8000c40 <main+0x5ac>)
 8000b86:	f00c fbd1 	bl	800d32c <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f001 ffc5 	bl	8002b1c <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b92:	492b      	ldr	r1, [pc, #172]	; (8000c40 <main+0x5ac>)
 8000b94:	482b      	ldr	r0, [pc, #172]	; (8000c44 <main+0x5b0>)
 8000b96:	f00c ff92 	bl	800dabe <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000b9a:	4826      	ldr	r0, [pc, #152]	; (8000c34 <main+0x5a0>)
 8000b9c:	f001 fc00 	bl	80023a0 <ESP8266_HW_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d111      	bne.n	8000bca <main+0x536>
     {
		  ESP_HW_Init=1;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <main+0x5c4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <main+0x574>)
 8000bae:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <main+0x52a>
 8000bb6:	2113      	movs	r1, #19
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <main+0x5c8>)
 8000bba:	f000 fc9f 	bl	80014fc <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bbe:	2213      	movs	r2, #19
 8000bc0:	4926      	ldr	r1, [pc, #152]	; (8000c5c <main+0x5c8>)
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <main+0x594>)
 8000bc4:	f004 fcf0 	bl	80055a8 <HAL_UART_Transmit_IT>
 8000bc8:	e05f      	b.n	8000c8a <main+0x5f6>
     }
     else
     {

    	 HW_RESET(&wf);
 8000bca:	480f      	ldr	r0, [pc, #60]	; (8000c08 <main+0x574>)
 8000bcc:	f005 fcc0 	bl	8006550 <HW_RESET>
		 ESP_REinit=0;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <main+0x5cc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <main+0x5a0>)
 8000bd8:	f001 fbe2 	bl	80023a0 <ESP8266_HW_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d142      	bne.n	8000c68 <main+0x5d4>
				  {
					  ESP_HW_Init=1;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <main+0x5c4>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <main+0x574>)
 8000bea:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0x566>
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <main+0x5c8>)
 8000bf6:	f000 fc81 	bl	80014fc <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	4919      	ldr	r1, [pc, #100]	; (8000c64 <main+0x5d0>)
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <main+0x594>)
 8000c00:	f004 fcd2 	bl	80055a8 <HAL_UART_Transmit_IT>
 8000c04:	e041      	b.n	8000c8a <main+0x5f6>
 8000c06:	bf00      	nop
 8000c08:	200023b4 	.word	0x200023b4
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	20003100 	.word	0x20003100
 8000c14:	2000364c 	.word	0x2000364c
 8000c18:	20000084 	.word	0x20000084
 8000c1c:	10624dd3 	.word	0x10624dd3
 8000c20:	08010354 	.word	0x08010354
 8000c24:	08010364 	.word	0x08010364
 8000c28:	20000298 	.word	0x20000298
 8000c2c:	08010374 	.word	0x08010374
 8000c30:	20004400 	.word	0x20004400
 8000c34:	20000254 	.word	0x20000254
 8000c38:	20003f98 	.word	0x20003f98
 8000c3c:	08010388 	.word	0x08010388
 8000c40:	200002e4 	.word	0x200002e4
 8000c44:	20001358 	.word	0x20001358
 8000c48:	20001328 	.word	0x20001328
 8000c4c:	0801039c 	.word	0x0801039c
 8000c50:	2000132c 	.word	0x2000132c
 8000c54:	080103cc 	.word	0x080103cc
 8000c58:	20003feb 	.word	0x20003feb
 8000c5c:	080103f0 	.word	0x080103f0
 8000c60:	20003fe9 	.word	0x20003fe9
 8000c64:	08010404 	.word	0x08010404
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c68:	4bab      	ldr	r3, [pc, #684]	; (8000f18 <main+0x884>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c6e:	4bab      	ldr	r3, [pc, #684]	; (8000f1c <main+0x888>)
 8000c70:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <main+0x5ec>
 8000c78:	2115      	movs	r1, #21
 8000c7a:	48a9      	ldr	r0, [pc, #676]	; (8000f20 <main+0x88c>)
 8000c7c:	f000 fc3e 	bl	80014fc <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c80:	2210      	movs	r2, #16
 8000c82:	49a8      	ldr	r1, [pc, #672]	; (8000f24 <main+0x890>)
 8000c84:	48a8      	ldr	r0, [pc, #672]	; (8000f28 <main+0x894>)
 8000c86:	f004 fc8f 	bl	80055a8 <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8e:	f001 ff45 	bl	8002b1c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c92:	4ba6      	ldr	r3, [pc, #664]	; (8000f2c <main+0x898>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c98:	4b9f      	ldr	r3, [pc, #636]	; (8000f18 <main+0x884>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	f040 80ab 	bne.w	8000df8 <main+0x764>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000ca2:	4ba3      	ldr	r3, [pc, #652]	; (8000f30 <main+0x89c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	f040 80a6 	bne.w	8000df8 <main+0x764>
 8000cac:	4b9b      	ldr	r3, [pc, #620]	; (8000f1c <main+0x888>)
 8000cae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 80a0 	bne.w	8000df8 <main+0x764>
 8000cb8:	4b98      	ldr	r3, [pc, #608]	; (8000f1c <main+0x888>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cbe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cc2:	f340 8099 	ble.w	8000df8 <main+0x764>
 8000cc6:	4b9b      	ldr	r3, [pc, #620]	; (8000f34 <main+0x8a0>)
 8000cc8:	7e9b      	ldrb	r3, [r3, #26]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8094 	beq.w	8000df8 <main+0x764>
		  			{	ETH.S_data_available=0;
 8000cd0:	4b98      	ldr	r3, [pc, #608]	; (8000f34 <main+0x8a0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000cd6:	4b98      	ldr	r3, [pc, #608]	; (8000f38 <main+0x8a4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000cdc:	4b94      	ldr	r3, [pc, #592]	; (8000f30 <main+0x89c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000ce2:	2218      	movs	r2, #24
 8000ce4:	4995      	ldr	r1, [pc, #596]	; (8000f3c <main+0x8a8>)
 8000ce6:	4890      	ldr	r0, [pc, #576]	; (8000f28 <main+0x894>)
 8000ce8:	f004 fc5e 	bl	80055a8 <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4893      	ldr	r0, [pc, #588]	; (8000f40 <main+0x8ac>)
 8000cf2:	f002 fb8e 	bl	8003412 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000cf6:	2122      	movs	r1, #34	; 0x22
 8000cf8:	4892      	ldr	r0, [pc, #584]	; (8000f44 <main+0x8b0>)
 8000cfa:	f000 fbff 	bl	80014fc <ITM0_Write>

		  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4891      	ldr	r0, [pc, #580]	; (8000f48 <main+0x8b4>)
 8000d02:	f00a fee2 	bl	800baca <ModBUS_F03_Read>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4698      	mov	r8, r3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	488e      	ldr	r0, [pc, #568]	; (8000f48 <main+0x8b4>)
 8000d0e:	f00a fedc 	bl	800baca <ModBUS_F03_Read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461c      	mov	r4, r3
 8000d16:	2102      	movs	r1, #2
 8000d18:	488b      	ldr	r0, [pc, #556]	; (8000f48 <main+0x8b4>)
 8000d1a:	f00a fed6 	bl	800baca <ModBUS_F03_Read>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461d      	mov	r5, r3
 8000d22:	2103      	movs	r1, #3
 8000d24:	4888      	ldr	r0, [pc, #544]	; (8000f48 <main+0x8b4>)
 8000d26:	f00a fed0 	bl	800baca <ModBUS_F03_Read>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461e      	mov	r6, r3
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4885      	ldr	r0, [pc, #532]	; (8000f48 <main+0x8b4>)
 8000d32:	f00a feca 	bl	800baca <ModBUS_F03_Read>
 8000d36:	4603      	mov	r3, r0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	2105      	movs	r1, #5
 8000d3c:	4882      	ldr	r0, [pc, #520]	; (8000f48 <main+0x8b4>)
 8000d3e:	f00a fec4 	bl	800baca <ModBUS_F03_Read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	2106      	movs	r1, #6
 8000d48:	487f      	ldr	r0, [pc, #508]	; (8000f48 <main+0x8b4>)
 8000d4a:	f00a febe 	bl	800baca <ModBUS_F03_Read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	2107      	movs	r1, #7
 8000d54:	487c      	ldr	r0, [pc, #496]	; (8000f48 <main+0x8b4>)
 8000d56:	f00a feb8 	bl	800baca <ModBUS_F03_Read>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	2108      	movs	r1, #8
 8000d60:	4879      	ldr	r0, [pc, #484]	; (8000f48 <main+0x8b4>)
 8000d62:	f00a feb2 	bl	800baca <ModBUS_F03_Read>
 8000d66:	4603      	mov	r3, r0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	2109      	movs	r1, #9
 8000d6c:	4876      	ldr	r0, [pc, #472]	; (8000f48 <main+0x8b4>)
 8000d6e:	f00a feac 	bl	800baca <ModBUS_F03_Read>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8000d7c:	4b73      	ldr	r3, [pc, #460]	; (8000f4c <main+0x8b8>)
 8000d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d80:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <main+0x8bc>)
 8000d82:	930a      	str	r3, [sp, #40]	; 0x28
 8000d84:	2302      	movs	r3, #2
 8000d86:	9309      	str	r3, [sp, #36]	; 0x24
 8000d88:	9208      	str	r2, [sp, #32]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	9207      	str	r2, [sp, #28]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	9206      	str	r2, [sp, #24]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	9205      	str	r2, [sp, #20]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	9204      	str	r2, [sp, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	9602      	str	r6, [sp, #8]
 8000da0:	9501      	str	r5, [sp, #4]
 8000da2:	9400      	str	r4, [sp, #0]
 8000da4:	4643      	mov	r3, r8
 8000da6:	4a6b      	ldr	r2, [pc, #428]	; (8000f54 <main+0x8c0>)
 8000da8:	496b      	ldr	r1, [pc, #428]	; (8000f58 <main+0x8c4>)
 8000daa:	486c      	ldr	r0, [pc, #432]	; (8000f5c <main+0x8c8>)
 8000dac:	f00a fb0c 	bl	800b3c8 <httpPOST>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d020      	beq.n	8000df8 <main+0x764>
		  								ModBUS_F03_Read(&mb_eth,8),
										ModBUS_F03_Read(&mb_eth,9),TEST_2,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
		  								post, body, 512))

		  				{
		  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000db6:	4866      	ldr	r0, [pc, #408]	; (8000f50 <main+0x8bc>)
 8000db8:	f7ff fa1c 	bl	80001f4 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2341      	movs	r3, #65	; 0x41
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4962      	ldr	r1, [pc, #392]	; (8000f50 <main+0x8bc>)
 8000dc8:	4865      	ldr	r0, [pc, #404]	; (8000f60 <main+0x8cc>)
 8000dca:	f00d fff9 	bl	800edc0 <CopiaVector>
		  							wf._n_D2SND=strlen(post);
 8000dce:	4860      	ldr	r0, [pc, #384]	; (8000f50 <main+0x8bc>)
 8000dd0:	f7ff fa10 	bl	80001f4 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <main+0x888>)
 8000dda:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000dde:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <main+0x888>)
 8000de0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d807      	bhi.n	8000df8 <main+0x764>
		  							{
		  								EnviarDatos(&wf);
 8000de8:	484c      	ldr	r0, [pc, #304]	; (8000f1c <main+0x888>)
 8000dea:	f005 fc9f 	bl	800672c <EnviarDatos>
		  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000dee:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <main+0x888>)
 8000df0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000df8:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <main+0x8d0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d003      	beq.n	8000e08 <main+0x774>
 8000e00:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <main+0x8d4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d175      	bne.n	8000ef4 <main+0x860>
		  		{
		  			if(FLAG_UART1==1)
 8000e08:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <main+0x8d0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d11c      	bne.n	8000e4a <main+0x7b6>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <main+0x8d8>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <main+0x8dc>)
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4956      	ldr	r1, [pc, #344]	; (8000f74 <main+0x8e0>)
 8000e1c:	4856      	ldr	r0, [pc, #344]	; (8000f78 <main+0x8e4>)
 8000e1e:	f00d ffcf 	bl	800edc0 <CopiaVector>
		  					FLAG_UART1=0;
 8000e22:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <main+0x8d0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <main+0x8e8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d102      	bne.n	8000e36 <main+0x7a2>
		  						{
		  							error_rxdata=0;
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <main+0x8e8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <main+0x8e8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d105      	bne.n	8000e4a <main+0x7b6>
		  						{
		  							error_rxdata=5;
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <main+0x8e8>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <main+0x8e8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <main+0x8d4>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <main+0x7c4>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <main+0x8d4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x884>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d149      	bne.n	8000ef4 <main+0x860>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <main+0x8d8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <main+0x888>)
 8000e66:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e6a:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <main+0x8d8>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <main+0x8dc>)
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	493f      	ldr	r1, [pc, #252]	; (8000f74 <main+0x8e0>)
 8000e76:	4840      	ldr	r0, [pc, #256]	; (8000f78 <main+0x8e4>)
 8000e78:	f00d ffa2 	bl	800edc0 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e7c:	4827      	ldr	r0, [pc, #156]	; (8000f1c <main+0x888>)
 8000e7e:	f005 fd35 	bl	80068ec <AT_ESP8266_ND>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <main+0x8ec>)
 8000e88:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <main+0x888>)
 8000e8c:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d12f      	bne.n	8000ef4 <main+0x860>
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <main+0x888>)
 8000e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d12a      	bne.n	8000ef4 <main+0x860>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <main+0x888>)
 8000ea0:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000ea4:	2341      	movs	r3, #65	; 0x41
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	4936      	ldr	r1, [pc, #216]	; (8000f84 <main+0x8f0>)
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <main+0x8f4>)
 8000eae:	f00d ff87 	bl	800edc0 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0x888>)
 8000eb4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000eb8:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <main+0x8f8>)
 8000eba:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  						ModBUS(&mb_wf);
 8000ebe:	4833      	ldr	r0, [pc, #204]	; (8000f8c <main+0x8f8>)
 8000ec0:	f00a fe88 	bl	800bbd4 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <main+0x8f8>)
 8000ec6:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000eca:	2341      	movs	r3, #65	; 0x41
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	492f      	ldr	r1, [pc, #188]	; (8000f90 <main+0x8fc>)
 8000ed2:	4823      	ldr	r0, [pc, #140]	; (8000f60 <main+0x8cc>)
 8000ed4:	f00d ff74 	bl	800edc0 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <main+0x8f8>)
 8000eda:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <main+0x888>)
 8000ee0:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <main+0x888>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <main+0x888>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <main+0x884>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d108      	bne.n	8000f0e <main+0x87a>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000efc:	2201      	movs	r2, #1
 8000efe:	4925      	ldr	r1, [pc, #148]	; (8000f94 <main+0x900>)
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <main+0x888>)
 8000f02:	f008 fdf3 	bl	8009aec <WiFi_Conn_ND>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <main+0x904>)
 8000f0c:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <main+0x908>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d153      	bne.n	8000fbe <main+0x92a>
 8000f16:	e043      	b.n	8000fa0 <main+0x90c>
 8000f18:	20003feb 	.word	0x20003feb
 8000f1c:	200023b4 	.word	0x200023b4
 8000f20:	0801041c 	.word	0x0801041c
 8000f24:	08010434 	.word	0x08010434
 8000f28:	20000298 	.word	0x20000298
 8000f2c:	20003ff8 	.word	0x20003ff8
 8000f30:	20003f99 	.word	0x20003f99
 8000f34:	200002e4 	.word	0x200002e4
 8000f38:	20003f9c 	.word	0x20003f9c
 8000f3c:	08010448 	.word	0x08010448
 8000f40:	40020800 	.word	0x40020800
 8000f44:	08010464 	.word	0x08010464
 8000f48:	20003100 	.word	0x20003100
 8000f4c:	20003d98 	.word	0x20003d98
 8000f50:	20003b98 	.word	0x20003b98
 8000f54:	2000001c 	.word	0x2000001c
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20002648 	.word	0x20002648
 8000f64:	20003fef 	.word	0x20003fef
 8000f68:	20003fee 	.word	0x20003fee
 8000f6c:	20004404 	.word	0x20004404
 8000f70:	200043fc 	.word	0x200043fc
 8000f74:	200041fc 	.word	0x200041fc
 8000f78:	20002a48 	.word	0x20002a48
 8000f7c:	20003ff2 	.word	0x20003ff2
 8000f80:	20003ff1 	.word	0x20003ff1
 8000f84:	20002448 	.word	0x20002448
 8000f88:	20003659 	.word	0x20003659
 8000f8c:	2000364c 	.word	0x2000364c
 8000f90:	200037e0 	.word	0x200037e0
 8000f94:	20000254 	.word	0x20000254
 8000f98:	20003ff4 	.word	0x20003ff4
 8000f9c:	20003ff3 	.word	0x20003ff3
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000fa0:	2216      	movs	r2, #22
 8000fa2:	493e      	ldr	r1, [pc, #248]	; (800109c <main+0xa08>)
 8000fa4:	483e      	ldr	r0, [pc, #248]	; (80010a0 <main+0xa0c>)
 8000fa6:	f004 faff 	bl	80055a8 <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000faa:	483e      	ldr	r0, [pc, #248]	; (80010a4 <main+0xa10>)
 8000fac:	f005 fad0 	bl	8006550 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000fb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fb4:	f001 fdb2 	bl	8002b1c <HAL_Delay>
		  				esp_restart=0;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <main+0xa14>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <main+0xa18>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f47f ae65 	bne.w	8000c92 <main+0x5fe>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000fc8:	4839      	ldr	r0, [pc, #228]	; (80010b0 <main+0xa1c>)
 8000fca:	f00c f809 	bl	800cfe0 <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000fce:	220f      	movs	r2, #15
 8000fd0:	4938      	ldr	r1, [pc, #224]	; (80010b4 <main+0xa20>)
 8000fd2:	4833      	ldr	r0, [pc, #204]	; (80010a0 <main+0xa0c>)
 8000fd4:	f004 fae8 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000fd8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fdc:	f001 fd9e 	bl	8002b1c <HAL_Delay>
		  	      eth_init(&ETH);
 8000fe0:	4833      	ldr	r0, [pc, #204]	; (80010b0 <main+0xa1c>)
 8000fe2:	f00c f9e7 	bl	800d3b4 <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000fe6:	220e      	movs	r2, #14
 8000fe8:	4933      	ldr	r1, [pc, #204]	; (80010b8 <main+0xa24>)
 8000fea:	482d      	ldr	r0, [pc, #180]	; (80010a0 <main+0xa0c>)
 8000fec:	f004 fadc 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000ff0:	492f      	ldr	r1, [pc, #188]	; (80010b0 <main+0xa1c>)
 8000ff2:	4832      	ldr	r0, [pc, #200]	; (80010bc <main+0xa28>)
 8000ff4:	f00c fd63 	bl	800dabe <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000ff8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ffc:	f001 fd8e 	bl	8002b1c <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8001000:	2101      	movs	r1, #1
 8001002:	482b      	ldr	r0, [pc, #172]	; (80010b0 <main+0xa1c>)
 8001004:	f00c faa8 	bl	800d558 <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8001008:	2215      	movs	r2, #21
 800100a:	492d      	ldr	r1, [pc, #180]	; (80010c0 <main+0xa2c>)
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <main+0xa0c>)
 800100e:	f004 facb 	bl	80055a8 <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8001012:	2300      	movs	r3, #0
 8001014:	84bb      	strh	r3, [r7, #36]	; 0x24
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8001016:	2302      	movs	r3, #2
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2300      	movs	r3, #0
 8001022:	2201      	movs	r2, #1
 8001024:	2124      	movs	r1, #36	; 0x24
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <main+0xa1c>)
 8001028:	f00c f831 	bl	800d08e <SPI_ETH_REG>
 800102c:	4603      	mov	r3, r0
 800102e:	84bb      	strh	r3, [r7, #36]	; 0x24

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8001030:	2201      	movs	r2, #1
 8001032:	2101      	movs	r1, #1
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <main+0xa1c>)
 8001036:	f00c f99b 	bl	800d370 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 800103a:	2304      	movs	r3, #4
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <main+0xa30>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2201      	movs	r2, #1
 8001046:	210c      	movs	r1, #12
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <main+0xa1c>)
 800104a:	f00c f820 	bl	800d08e <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800104e:	212e      	movs	r1, #46	; 0x2e
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <main+0xa34>)
 8001052:	f000 fa53 	bl	80014fc <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8001056:	2302      	movs	r3, #2
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <main+0xa38>)
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <main+0xa1c>)
 8001066:	f00c f812 	bl	800d08e <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 800106a:	2120      	movs	r1, #32
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <main+0xa3c>)
 800106e:	f000 fa45 	bl	80014fc <ITM0_Write>

		  	   	 HAL_Delay(800);
 8001072:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001076:	f001 fd51 	bl	8002b1c <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 800107a:	2201      	movs	r2, #1
 800107c:	2101      	movs	r1, #1
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <main+0xa1c>)
 8001080:	f00c f954 	bl	800d32c <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8001084:	220e      	movs	r2, #14
 8001086:	4913      	ldr	r1, [pc, #76]	; (80010d4 <main+0xa40>)
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <main+0xa0c>)
 800108a:	f004 fa8d 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <main+0xa1c>)
 8001090:	2200      	movs	r2, #0
 8001092:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <main+0xa18>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 800109a:	e5fa      	b.n	8000c92 <main+0x5fe>
 800109c:	08010488 	.word	0x08010488
 80010a0:	20000298 	.word	0x20000298
 80010a4:	200023b4 	.word	0x200023b4
 80010a8:	20003ff3 	.word	0x20003ff3
 80010ac:	20003ff0 	.word	0x20003ff0
 80010b0:	200002e4 	.word	0x200002e4
 80010b4:	080104a0 	.word	0x080104a0
 80010b8:	080104b0 	.word	0x080104b0
 80010bc:	20001358 	.word	0x20001358
 80010c0:	080104c0 	.word	0x080104c0
 80010c4:	20001328 	.word	0x20001328
 80010c8:	0801039c 	.word	0x0801039c
 80010cc:	2000132c 	.word	0x2000132c
 80010d0:	080103cc 	.word	0x080103cc
 80010d4:	080104d8 	.word	0x080104d8

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00e f859 	bl	800f19e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <SystemClock_Config+0xc8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <SystemClock_Config+0xc8>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <SystemClock_Config+0xc8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <SystemClock_Config+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <SystemClock_Config+0xcc>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <SystemClock_Config+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113e:	2302      	movs	r3, #2
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001148:	230c      	movs	r3, #12
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800114c:	2360      	movs	r3, #96	; 0x60
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f973 	bl	8003448 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f001 f9c4 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2103      	movs	r1, #3
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fbd5 	bl	8003938 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001194:	f001 f9ae 	bl	80024f4 <Error_Handler>
  }
}
 8001198:	bf00      	nop
 800119a:	3750      	adds	r7, #80	; 0x50
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_SPI1_Init+0x64>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MX_SPI1_Init+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SPI1_Init+0x64>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI1_Init+0x64>)
 80011dc:	2208      	movs	r2, #8
 80011de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI1_Init+0x64>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SPI1_Init+0x64>)
 80011fa:	f002 fd7d 	bl	8003cf8 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001204:	f001 f976 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001b4 	.word	0x200001b4
 8001210:	40013000 	.word	0x40013000

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_TIM2_Init+0xf0>)
 800124e:	2264      	movs	r2, #100	; 0x64
 8001250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_TIM2_Init+0xf0>)
 800125a:	2264      	movs	r2, #100	; 0x64
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4826      	ldr	r0, [pc, #152]	; (8001304 <MX_TIM2_Init+0xf0>)
 800126c:	f003 f83a 	bl	80042e4 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001276:	f001 f93d 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001284:	4619      	mov	r1, r3
 8001286:	481f      	ldr	r0, [pc, #124]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001288:	f003 fc42 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001292:	f001 f92f 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001296:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_TIM2_Init+0xf0>)
 8001298:	f003 f873 	bl	8004382 <HAL_TIM_OC_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012a2:	f001 f927 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012a6:	2108      	movs	r1, #8
 80012a8:	4816      	ldr	r0, [pc, #88]	; (8001304 <MX_TIM2_Init+0xf0>)
 80012aa:	f003 fa73 	bl	8004794 <HAL_TIM_OnePulse_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012b4:	f001 f91e 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <MX_TIM2_Init+0xf0>)
 80012c8:	f003 ffde 	bl	8005288 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012d2:	f001 f90f 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012d6:	2320      	movs	r3, #32
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_TIM2_Init+0xf0>)
 80012ee:	f003 fbb3 	bl	8004a58 <HAL_TIM_OC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80012f8:	f001 f8fc 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3738      	adds	r7, #56	; 0x38
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000020c 	.word	0x2000020c

08001308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART1_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART1_UART_Init+0x4c>)
 8001340:	f004 f824 	bl	800538c <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f001 f8d3 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000254 	.word	0x20000254
 8001358:	40011000 	.word	0x40011000

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f003 fffa 	bl	800538c <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f001 f8a9 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000298 	.word	0x20000298
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a47      	ldr	r2, [pc, #284]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b45      	ldr	r3, [pc, #276]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b41      	ldr	r3, [pc, #260]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a40      	ldr	r2, [pc, #256]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <MX_GPIO_Init+0x13c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <MX_GPIO_Init+0x13c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a39      	ldr	r2, [pc, #228]	; (80014ec <MX_GPIO_Init+0x13c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <MX_GPIO_Init+0x13c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <MX_GPIO_Init+0x13c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <MX_GPIO_Init+0x13c>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <MX_GPIO_Init+0x13c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <MX_GPIO_Init+0x140>)
 800143e:	f001 ffcf 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001448:	482a      	ldr	r0, [pc, #168]	; (80014f4 <MX_GPIO_Init+0x144>)
 800144a:	f001 ffc9 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2101      	movs	r1, #1
 8001452:	4829      	ldr	r0, [pc, #164]	; (80014f8 <MX_GPIO_Init+0x148>)
 8001454:	f001 ffc4 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <MX_GPIO_Init+0x140>)
 8001472:	f001 fd4d 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	481a      	ldr	r0, [pc, #104]	; (80014f4 <MX_GPIO_Init+0x144>)
 800148a:	f001 fd41 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800148e:	2310      	movs	r3, #16
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_GPIO_Init+0x144>)
 80014a6:	f001 fd33 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80014aa:	2301      	movs	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_GPIO_Init+0x148>)
 80014c2:	f001 fd25 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 80014c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_GPIO_Init+0x144>)
 80014e0:	f001 fd16 	bl	8002f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400

080014fc <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e009      	b.n	8001520 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f895 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <ITM0_Write+0x10>
  }
  return len;
 8001528:	683b      	ldr	r3, [r7, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800153a:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 8001542:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <SysTick_Handler+0x1b0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <SysTick_Handler+0x1b0>)
 800154a:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <SysTick_Handler+0x1b4>)
 800154e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001552:	4b66      	ldr	r3, [pc, #408]	; (80016ec <SysTick_Handler+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d015      	beq.n	8001586 <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <SysTick_Handler+0x1b4>)
 800155c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001560:	4a62      	ldr	r2, [pc, #392]	; (80016ec <SysTick_Handler+0x1b8>)
 8001562:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <SysTick_Handler+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	463a      	mov	r2, r7
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f00d fbf3 	bl	800ed58 <INTOA>
 8001572:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 8001576:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800157a:	b29a      	uxth	r2, r3
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	485b      	ldr	r0, [pc, #364]	; (80016f0 <SysTick_Handler+0x1bc>)
 8001582:	f004 f811 	bl	80055a8 <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <SysTick_Handler+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <SysTick_Handler+0x1c0>)
 800158e:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <SysTick_Handler+0x1c4>)
 8001592:	791b      	ldrb	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <SysTick_Handler+0x6e>
 8001598:	4b58      	ldr	r3, [pc, #352]	; (80016fc <SysTick_Handler+0x1c8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a57      	ldr	r2, [pc, #348]	; (80016fc <SysTick_Handler+0x1c8>)
 80015a0:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <SysTick_Handler+0x1c4>)
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <SysTick_Handler+0x90>
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <SysTick_Handler+0x1c4>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <SysTick_Handler+0x1c8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	da05      	bge.n	80015c4 <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <SysTick_Handler+0x1c4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80015be:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <SysTick_Handler+0x1c8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <SysTick_Handler+0x1b4>)
 80015c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015ca:	f240 2261 	movw	r2, #609	; 0x261
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d005      	beq.n	80015de <SysTick_Handler+0xaa>
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <SysTick_Handler+0x1b4>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015dc:	d109      	bne.n	80015f2 <SysTick_Handler+0xbe>
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <SysTick_Handler+0x1b4>)
 80015e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <SysTick_Handler+0xbe>
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <SysTick_Handler+0x1cc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a44      	ldr	r2, [pc, #272]	; (8001700 <SysTick_Handler+0x1cc>)
 80015f0:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 80015f2:	4b43      	ldr	r3, [pc, #268]	; (8001700 <SysTick_Handler+0x1cc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dd0c      	ble.n	8001618 <SysTick_Handler+0xe4>
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <SysTick_Handler+0x1b4>)
 8001600:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d007      	beq.n	8001618 <SysTick_Handler+0xe4>
 8001608:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <SysTick_Handler+0x1b4>)
 800160a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <SysTick_Handler+0xe4>
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <SysTick_Handler+0x1d0>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <SysTick_Handler+0x1d4>)
 800161a:	7d9b      	ldrb	r3, [r3, #22]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <SysTick_Handler+0x1d4>)
 8001622:	8a9b      	ldrh	r3, [r3, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <SysTick_Handler+0x1d4>)
 800162a:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <SysTick_Handler+0x1d4>)
 800162e:	8a9b      	ldrh	r3, [r3, #20]
 8001630:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001634:	d306      	bcc.n	8001644 <SysTick_Handler+0x110>
		{
			eth_reset=1;
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <SysTick_Handler+0x1d8>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <SysTick_Handler+0x1d4>)
 800163e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001642:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <SysTick_Handler+0x1b0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	f040 84f0 	bne.w	800202e <SysTick_Handler+0xafa>
  {
	  dbgn++;
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <SysTick_Handler+0x1dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <SysTick_Handler+0x1dc>)
 8001656:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <SysTick_Handler+0x1b0>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <SysTick_Handler+0x1e0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a2b      	ldr	r2, [pc, #172]	; (8001714 <SysTick_Handler+0x1e0>)
 8001666:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <SysTick_Handler+0x1e4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001670:	d102      	bne.n	8001678 <SysTick_Handler+0x144>
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <SysTick_Handler+0x1e4>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <SysTick_Handler+0x1e8>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d104      	bne.n	800168a <SysTick_Handler+0x156>
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <SysTick_Handler+0x1e4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	4a24      	ldr	r2, [pc, #144]	; (8001718 <SysTick_Handler+0x1e4>)
 8001688:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <SysTick_Handler+0x1e4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d102      	bne.n	8001698 <SysTick_Handler+0x164>
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <SysTick_Handler+0x1e8>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <SysTick_Handler+0x1e8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <SysTick_Handler+0x176>
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <SysTick_Handler+0x1e4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <SysTick_Handler+0x1e4>)
 80016a8:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <SysTick_Handler+0x1e4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <SysTick_Handler+0x184>
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <SysTick_Handler+0x1e8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <SysTick_Handler+0x1ec>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 84a6 	beq.w	800200e <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <SysTick_Handler+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 84a5 	beq.w	8002016 <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 80016cc:	2101      	movs	r1, #1
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <SysTick_Handler+0x1d4>)
 80016d0:	f00c f88a 	bl	800d7e8 <eth_rd_SOCKET_STAT>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <SysTick_Handler+0x1d4>)
 80016da:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <SysTick_Handler+0x1d4>)
 80016de:	7d9b      	ldrb	r3, [r3, #22]
 80016e0:	e022      	b.n	8001728 <SysTick_Handler+0x1f4>
 80016e2:	bf00      	nop
 80016e4:	200002dc 	.word	0x200002dc
 80016e8:	200023b4 	.word	0x200023b4
 80016ec:	2000442c 	.word	0x2000442c
 80016f0:	20000298 	.word	0x20000298
 80016f4:	20004408 	.word	0x20004408
 80016f8:	20003100 	.word	0x20003100
 80016fc:	20004410 	.word	0x20004410
 8001700:	20003f9c 	.word	0x20003f9c
 8001704:	20003f99 	.word	0x20003f99
 8001708:	200002e4 	.word	0x200002e4
 800170c:	20003ff0 	.word	0x20003ff0
 8001710:	20004434 	.word	0x20004434
 8001714:	200002e0 	.word	0x200002e0
 8001718:	2000440c 	.word	0x2000440c
 800171c:	20003ff5 	.word	0x20003ff5
 8001720:	20003fe8 	.word	0x20003fe8
 8001724:	20003ff8 	.word	0x20003ff8
 8001728:	2b5f      	cmp	r3, #95	; 0x5f
 800172a:	f200 8479 	bhi.w	8002020 <SysTick_Handler+0xaec>
 800172e:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <SysTick_Handler+0x200>)
 8001730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001734:	080018b5 	.word	0x080018b5
 8001738:	08002021 	.word	0x08002021
 800173c:	08002021 	.word	0x08002021
 8001740:	08002021 	.word	0x08002021
 8001744:	08002021 	.word	0x08002021
 8001748:	08002021 	.word	0x08002021
 800174c:	08002021 	.word	0x08002021
 8001750:	08002021 	.word	0x08002021
 8001754:	08002021 	.word	0x08002021
 8001758:	08002021 	.word	0x08002021
 800175c:	08002021 	.word	0x08002021
 8001760:	08002021 	.word	0x08002021
 8001764:	08002021 	.word	0x08002021
 8001768:	08002021 	.word	0x08002021
 800176c:	08002021 	.word	0x08002021
 8001770:	08002021 	.word	0x08002021
 8001774:	08002021 	.word	0x08002021
 8001778:	08002021 	.word	0x08002021
 800177c:	08002021 	.word	0x08002021
 8001780:	080018db 	.word	0x080018db
 8001784:	08001961 	.word	0x08001961
 8001788:	0800198b 	.word	0x0800198b
 800178c:	080019b5 	.word	0x080019b5
 8001790:	080019df 	.word	0x080019df
 8001794:	08001ddd 	.word	0x08001ddd
 8001798:	08002021 	.word	0x08002021
 800179c:	08001e07 	.word	0x08001e07
 80017a0:	08001e9d 	.word	0x08001e9d
 80017a4:	08001eed 	.word	0x08001eed
 80017a8:	08001f3d 	.word	0x08001f3d
 80017ac:	08002021 	.word	0x08002021
 80017b0:	08002021 	.word	0x08002021
 80017b4:	08002021 	.word	0x08002021
 80017b8:	08002021 	.word	0x08002021
 80017bc:	08001f67 	.word	0x08001f67
 80017c0:	08002021 	.word	0x08002021
 80017c4:	08002021 	.word	0x08002021
 80017c8:	08002021 	.word	0x08002021
 80017cc:	08002021 	.word	0x08002021
 80017d0:	08002021 	.word	0x08002021
 80017d4:	08002021 	.word	0x08002021
 80017d8:	08002021 	.word	0x08002021
 80017dc:	08002021 	.word	0x08002021
 80017e0:	08002021 	.word	0x08002021
 80017e4:	08002021 	.word	0x08002021
 80017e8:	08002021 	.word	0x08002021
 80017ec:	08002021 	.word	0x08002021
 80017f0:	08002021 	.word	0x08002021
 80017f4:	08002021 	.word	0x08002021
 80017f8:	08002021 	.word	0x08002021
 80017fc:	08001f91 	.word	0x08001f91
 8001800:	08002021 	.word	0x08002021
 8001804:	08002021 	.word	0x08002021
 8001808:	08002021 	.word	0x08002021
 800180c:	08002021 	.word	0x08002021
 8001810:	08002021 	.word	0x08002021
 8001814:	08002021 	.word	0x08002021
 8001818:	08002021 	.word	0x08002021
 800181c:	08002021 	.word	0x08002021
 8001820:	08002021 	.word	0x08002021
 8001824:	08002021 	.word	0x08002021
 8001828:	08002021 	.word	0x08002021
 800182c:	08002021 	.word	0x08002021
 8001830:	08002021 	.word	0x08002021
 8001834:	08002021 	.word	0x08002021
 8001838:	08002021 	.word	0x08002021
 800183c:	08001fbb 	.word	0x08001fbb
 8001840:	08002021 	.word	0x08002021
 8001844:	08002021 	.word	0x08002021
 8001848:	08002021 	.word	0x08002021
 800184c:	08002021 	.word	0x08002021
 8001850:	08002021 	.word	0x08002021
 8001854:	08002021 	.word	0x08002021
 8001858:	08002021 	.word	0x08002021
 800185c:	08002021 	.word	0x08002021
 8001860:	08002021 	.word	0x08002021
 8001864:	08002021 	.word	0x08002021
 8001868:	08002021 	.word	0x08002021
 800186c:	08002021 	.word	0x08002021
 8001870:	08002021 	.word	0x08002021
 8001874:	08002021 	.word	0x08002021
 8001878:	08002021 	.word	0x08002021
 800187c:	08002021 	.word	0x08002021
 8001880:	08002021 	.word	0x08002021
 8001884:	08002021 	.word	0x08002021
 8001888:	08002021 	.word	0x08002021
 800188c:	08002021 	.word	0x08002021
 8001890:	08002021 	.word	0x08002021
 8001894:	08002021 	.word	0x08002021
 8001898:	08002021 	.word	0x08002021
 800189c:	08002021 	.word	0x08002021
 80018a0:	08002021 	.word	0x08002021
 80018a4:	08002021 	.word	0x08002021
 80018a8:	08002021 	.word	0x08002021
 80018ac:	08002021 	.word	0x08002021
 80018b0:	08001fe5 	.word	0x08001fe5
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018b4:	4b9b      	ldr	r3, [pc, #620]	; (8001b24 <SysTick_Handler+0x5f0>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <SysTick_Handler+0x390>
 80018bc:	2113      	movs	r1, #19
 80018be:	489a      	ldr	r0, [pc, #616]	; (8001b28 <SysTick_Handler+0x5f4>)
 80018c0:	f7ff fe1c 	bl	80014fc <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 80018c4:	4b99      	ldr	r3, [pc, #612]	; (8001b2c <SysTick_Handler+0x5f8>)
 80018c6:	8a9b      	ldrh	r3, [r3, #20]
 80018c8:	f643 2297 	movw	r2, #14999	; 0x3a97
 80018cc:	4293      	cmp	r3, r2
 80018ce:	f240 83a4 	bls.w	800201a <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 80018d2:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <SysTick_Handler+0x5fc>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 80018d8:	e39f      	b.n	800201a <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018da:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <SysTick_Handler+0x5f0>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <SysTick_Handler+0x3b6>
 80018e2:	2111      	movs	r1, #17
 80018e4:	4893      	ldr	r0, [pc, #588]	; (8001b34 <SysTick_Handler+0x600>)
 80018e6:	f7ff fe09 	bl	80014fc <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 80018ea:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <SysTick_Handler+0x5f8>)
 80018ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d119      	bne.n	800192c <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018f8:	4b8a      	ldr	r3, [pc, #552]	; (8001b24 <SysTick_Handler+0x5f0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <SysTick_Handler+0x3d4>
 8001900:	2111      	movs	r1, #17
 8001902:	488c      	ldr	r0, [pc, #560]	; (8001b34 <SysTick_Handler+0x600>)
 8001904:	f7ff fdfa 	bl	80014fc <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 8001908:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <SysTick_Handler+0x604>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <SysTick_Handler+0x3e6>
 8001910:	2212      	movs	r2, #18
 8001912:	498a      	ldr	r1, [pc, #552]	; (8001b3c <SysTick_Handler+0x608>)
 8001914:	488a      	ldr	r0, [pc, #552]	; (8001b40 <SysTick_Handler+0x60c>)
 8001916:	f003 fe47 	bl	80055a8 <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 800191a:	2202      	movs	r2, #2
 800191c:	2101      	movs	r1, #1
 800191e:	4883      	ldr	r0, [pc, #524]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001920:	f00b fd04 	bl	800d32c <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001924:	4b81      	ldr	r3, [pc, #516]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001926:	2200      	movs	r2, #0
 8001928:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800192a:	e379      	b.n	8002020 <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 800192c:	2204      	movs	r2, #4
 800192e:	2101      	movs	r1, #1
 8001930:	487e      	ldr	r0, [pc, #504]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001932:	f00b fcfb 	bl	800d32c <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 8001936:	4b7b      	ldr	r3, [pc, #492]	; (8001b24 <SysTick_Handler+0x5f0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <SysTick_Handler+0x412>
 800193e:	2115      	movs	r1, #21
 8001940:	4880      	ldr	r0, [pc, #512]	; (8001b44 <SysTick_Handler+0x610>)
 8001942:	f7ff fddb 	bl	80014fc <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <SysTick_Handler+0x604>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <SysTick_Handler+0x424>
 800194e:	2217      	movs	r2, #23
 8001950:	497d      	ldr	r1, [pc, #500]	; (8001b48 <SysTick_Handler+0x614>)
 8001952:	487b      	ldr	r0, [pc, #492]	; (8001b40 <SysTick_Handler+0x60c>)
 8001954:	f003 fe28 	bl	80055a8 <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 8001958:	4b74      	ldr	r3, [pc, #464]	; (8001b2c <SysTick_Handler+0x5f8>)
 800195a:	2200      	movs	r2, #0
 800195c:	829a      	strh	r2, [r3, #20]
			 break;
 800195e:	e35f      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001960:	4b70      	ldr	r3, [pc, #448]	; (8001b24 <SysTick_Handler+0x5f0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <SysTick_Handler+0x43c>
 8001968:	2113      	movs	r1, #19
 800196a:	4878      	ldr	r0, [pc, #480]	; (8001b4c <SysTick_Handler+0x618>)
 800196c:	f7ff fdc6 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 8001970:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <SysTick_Handler+0x604>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <SysTick_Handler+0x44e>
 8001978:	2214      	movs	r2, #20
 800197a:	4975      	ldr	r1, [pc, #468]	; (8001b50 <SysTick_Handler+0x61c>)
 800197c:	4870      	ldr	r0, [pc, #448]	; (8001b40 <SysTick_Handler+0x60c>)
 800197e:	f003 fe13 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001982:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001984:	2200      	movs	r2, #0
 8001986:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001988:	e34a      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 800198a:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <SysTick_Handler+0x5f0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <SysTick_Handler+0x466>
 8001992:	2114      	movs	r1, #20
 8001994:	486f      	ldr	r0, [pc, #444]	; (8001b54 <SysTick_Handler+0x620>)
 8001996:	f7ff fdb1 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <SysTick_Handler+0x604>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <SysTick_Handler+0x478>
 80019a2:	2215      	movs	r2, #21
 80019a4:	496c      	ldr	r1, [pc, #432]	; (8001b58 <SysTick_Handler+0x624>)
 80019a6:	4866      	ldr	r0, [pc, #408]	; (8001b40 <SysTick_Handler+0x60c>)
 80019a8:	f003 fdfe 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019ac:	4b5f      	ldr	r3, [pc, #380]	; (8001b2c <SysTick_Handler+0x5f8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019b2:	e335      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019b4:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <SysTick_Handler+0x5f0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <SysTick_Handler+0x490>
 80019bc:	2114      	movs	r1, #20
 80019be:	4867      	ldr	r0, [pc, #412]	; (8001b5c <SysTick_Handler+0x628>)
 80019c0:	f7ff fd9c 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 80019c4:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <SysTick_Handler+0x604>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <SysTick_Handler+0x4a2>
 80019cc:	2215      	movs	r2, #21
 80019ce:	4964      	ldr	r1, [pc, #400]	; (8001b60 <SysTick_Handler+0x62c>)
 80019d0:	485b      	ldr	r0, [pc, #364]	; (8001b40 <SysTick_Handler+0x60c>)
 80019d2:	f003 fde9 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019d6:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <SysTick_Handler+0x5f8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019dc:	e320      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <SysTick_Handler+0x5f0>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <SysTick_Handler+0x4ba>
 80019e6:	2118      	movs	r1, #24
 80019e8:	485e      	ldr	r0, [pc, #376]	; (8001b64 <SysTick_Handler+0x630>)
 80019ea:	f7ff fd87 	bl	80014fc <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <SysTick_Handler+0x5f8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019f4:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <SysTick_Handler+0x5f8>)
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80c6 	bne.w	8001b90 <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a04:	2302      	movs	r3, #2
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <SysTick_Handler+0x634>)
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2126      	movs	r1, #38	; 0x26
 8001a12:	4846      	ldr	r0, [pc, #280]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a14:	f00b fb3b 	bl	800d08e <SPI_ETH_REG>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <SysTick_Handler+0x638>)
 8001a1e:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <SysTick_Handler+0x638>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 82fa 	beq.w	800201e <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <SysTick_Handler+0x638>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <SysTick_Handler+0x63c>)
 8001a30:	2103      	movs	r1, #3
 8001a32:	483e      	ldr	r0, [pc, #248]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a34:	f00b ff0e 	bl	800d854 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <SysTick_Handler+0x63c>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	2128      	movs	r1, #40	; 0x28
 8001a40:	483a      	ldr	r0, [pc, #232]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a42:	f00b fbaa 	bl	800d19a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4838      	ldr	r0, [pc, #224]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a4c:	f00b fc6e 	bl	800d32c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a50:	bf00      	nop
 8001a52:	2101      	movs	r1, #1
 8001a54:	4835      	ldr	r0, [pc, #212]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a56:	f00b fee2 	bl	800d81e <eth_rd_SOCKET_CMD>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f8      	bne.n	8001a52 <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a60:	4b42      	ldr	r3, [pc, #264]	; (8001b6c <SysTick_Handler+0x638>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2300      	movs	r3, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4941      	ldr	r1, [pc, #260]	; (8001b74 <SysTick_Handler+0x640>)
 8001a6e:	4842      	ldr	r0, [pc, #264]	; (8001b78 <SysTick_Handler+0x644>)
 8001a70:	f00d f9a6 	bl	800edc0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a74:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <SysTick_Handler+0x638>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <SysTick_Handler+0x648>)
 8001a7c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001a80:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <SysTick_Handler+0x638>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <SysTick_Handler+0x55a>
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <SysTick_Handler+0x648>)
 8001a90:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a94:	4619      	mov	r1, r3
 8001a96:	4838      	ldr	r0, [pc, #224]	; (8001b78 <SysTick_Handler+0x644>)
 8001a98:	f009 ff9a 	bl	800b9d0 <ModBUS_Check>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001aa2:	4836      	ldr	r0, [pc, #216]	; (8001b7c <SysTick_Handler+0x648>)
 8001aa4:	f00a f896 	bl	800bbd4 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001aa8:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <SysTick_Handler+0x648>)
 8001aaa:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	4932      	ldr	r1, [pc, #200]	; (8001b80 <SysTick_Handler+0x64c>)
 8001ab6:	482f      	ldr	r0, [pc, #188]	; (8001b74 <SysTick_Handler+0x640>)
 8001ab8:	f00d f982 	bl	800edc0 <CopiaVector>
 8001abc:	e010      	b.n	8001ae0 <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <SysTick_Handler+0x5f0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <SysTick_Handler+0x59a>
 8001ac6:	2111      	movs	r1, #17
 8001ac8:	482e      	ldr	r0, [pc, #184]	; (8001b84 <SysTick_Handler+0x650>)
 8001aca:	f7ff fd17 	bl	80014fc <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <SysTick_Handler+0x604>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <SysTick_Handler+0x5ac>
 8001ad6:	220d      	movs	r2, #13
 8001ad8:	492a      	ldr	r1, [pc, #168]	; (8001b84 <SysTick_Handler+0x650>)
 8001ada:	4819      	ldr	r0, [pc, #100]	; (8001b40 <SysTick_Handler+0x60c>)
 8001adc:	f003 fd64 	bl	80055a8 <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <SysTick_Handler+0x648>)
 8001ae2:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <SysTick_Handler+0x654>)
 8001aea:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <SysTick_Handler+0x654>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <SysTick_Handler+0x658>)
 8001af2:	2103      	movs	r1, #3
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001af6:	f00b ff3e 	bl	800d976 <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <SysTick_Handler+0x658>)
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2124      	movs	r1, #36	; 0x24
 8001b02:	480a      	ldr	r0, [pc, #40]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001b04:	f00b fb49 	bl	800d19a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001b08:	2220      	movs	r2, #32
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001b0e:	f00b fc0d 	bl	800d32c <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001b12:	bf00      	nop
 8001b14:	2101      	movs	r1, #1
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <SysTick_Handler+0x5f8>)
 8001b18:	f00b fe81 	bl	800d81e <eth_rd_SOCKET_CMD>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f8      	bne.n	8001b14 <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001b22:	e27c      	b.n	800201e <SysTick_Handler+0xaea>
 8001b24:	20003f98 	.word	0x20003f98
 8001b28:	080104e8 	.word	0x080104e8
 8001b2c:	200002e4 	.word	0x200002e4
 8001b30:	20003ff0 	.word	0x20003ff0
 8001b34:	080104fc 	.word	0x080104fc
 8001b38:	20000021 	.word	0x20000021
 8001b3c:	08010510 	.word	0x08010510
 8001b40:	20000298 	.word	0x20000298
 8001b44:	08010524 	.word	0x08010524
 8001b48:	0801053c 	.word	0x0801053c
 8001b4c:	08010554 	.word	0x08010554
 8001b50:	08010568 	.word	0x08010568
 8001b54:	08010580 	.word	0x08010580
 8001b58:	08010598 	.word	0x08010598
 8001b5c:	080105b0 	.word	0x080105b0
 8001b60:	080105c8 	.word	0x080105c8
 8001b64:	080105e0 	.word	0x080105e0
 8001b68:	20003fa8 	.word	0x20003fa8
 8001b6c:	20003fa0 	.word	0x20003fa0
 8001b70:	20003fa4 	.word	0x20003fa4
 8001b74:	20000308 	.word	0x20000308
 8001b78:	2000310d 	.word	0x2000310d
 8001b7c:	20003100 	.word	0x20003100
 8001b80:	20003294 	.word	0x20003294
 8001b84:	080105fc 	.word	0x080105fc
 8001b88:	20003fa6 	.word	0x20003fa6
 8001b8c:	20003fa2 	.word	0x20003fa2
						if (mb_eth._w_answer==0)
 8001b90:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 8088 	bne.w	8001caa <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001b9a:	4ba6      	ldr	r3, [pc, #664]	; (8001e34 <SysTick_Handler+0x900>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001ba2:	4ba4      	ldr	r3, [pc, #656]	; (8001e34 <SysTick_Handler+0x900>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <SysTick_Handler+0x900>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001bb2:	4ba0      	ldr	r3, [pc, #640]	; (8001e34 <SysTick_Handler+0x900>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001bba:	4b9e      	ldr	r3, [pc, #632]	; (8001e34 <SysTick_Handler+0x900>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001bc2:	4b9c      	ldr	r3, [pc, #624]	; (8001e34 <SysTick_Handler+0x900>)
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001bca:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <SysTick_Handler+0x900>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001bd2:	4b98      	ldr	r3, [pc, #608]	; (8001e34 <SysTick_Handler+0x900>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001bda:	4b96      	ldr	r3, [pc, #600]	; (8001e34 <SysTick_Handler+0x900>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001be2:	4b94      	ldr	r3, [pc, #592]	; (8001e34 <SysTick_Handler+0x900>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001bea:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <SysTick_Handler+0x900>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001bf2:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <SysTick_Handler+0x900>)
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001bfa:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <SysTick_Handler+0x904>)
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001c00:	220f      	movs	r2, #15
 8001c02:	2100      	movs	r1, #0
 8001c04:	488a      	ldr	r0, [pc, #552]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001c06:	f009 ff8e 	bl	800bb26 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	220c      	movs	r2, #12
 8001c12:	498a      	ldr	r1, [pc, #552]	; (8001e3c <SysTick_Handler+0x908>)
 8001c14:	488a      	ldr	r0, [pc, #552]	; (8001e40 <SysTick_Handler+0x90c>)
 8001c16:	f00d f8d3 	bl	800edc0 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001c1a:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <SysTick_Handler+0x904>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4a89      	ldr	r2, [pc, #548]	; (8001e44 <SysTick_Handler+0x910>)
 8001c20:	2102      	movs	r1, #2
 8001c22:	4884      	ldr	r0, [pc, #528]	; (8001e34 <SysTick_Handler+0x900>)
 8001c24:	f00b fea7 	bl	800d976 <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c28:	4982      	ldr	r1, [pc, #520]	; (8001e34 <SysTick_Handler+0x900>)
 8001c2a:	4887      	ldr	r0, [pc, #540]	; (8001e48 <SysTick_Handler+0x914>)
 8001c2c:	f00b ff47 	bl	800dabe <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001c30:	4b84      	ldr	r3, [pc, #528]	; (8001e44 <SysTick_Handler+0x910>)
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	2124      	movs	r1, #36	; 0x24
 8001c38:	487e      	ldr	r0, [pc, #504]	; (8001e34 <SysTick_Handler+0x900>)
 8001c3a:	f00b faae 	bl	800d19a <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c3e:	497d      	ldr	r1, [pc, #500]	; (8001e34 <SysTick_Handler+0x900>)
 8001c40:	4881      	ldr	r0, [pc, #516]	; (8001e48 <SysTick_Handler+0x914>)
 8001c42:	f00b ff3c 	bl	800dabe <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001c46:	2220      	movs	r2, #32
 8001c48:	2101      	movs	r1, #1
 8001c4a:	487a      	ldr	r0, [pc, #488]	; (8001e34 <SysTick_Handler+0x900>)
 8001c4c:	f00b fb6e 	bl	800d32c <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c50:	4978      	ldr	r1, [pc, #480]	; (8001e34 <SysTick_Handler+0x900>)
 8001c52:	487d      	ldr	r0, [pc, #500]	; (8001e48 <SysTick_Handler+0x914>)
 8001c54:	f00b ff33 	bl	800dabe <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001c5e:	2301      	movs	r3, #1
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <SysTick_Handler+0x918>)
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4871      	ldr	r0, [pc, #452]	; (8001e34 <SysTick_Handler+0x900>)
 8001c6e:	f00b fa0e 	bl	800d08e <SPI_ETH_REG>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001c78:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001c7e:	4b74      	ldr	r3, [pc, #464]	; (8001e50 <SysTick_Handler+0x91c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c84:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <SysTick_Handler+0x920>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <SysTick_Handler+0x760>
 8001c8c:	2117      	movs	r1, #23
 8001c8e:	4872      	ldr	r0, [pc, #456]	; (8001e58 <SysTick_Handler+0x924>)
 8001c90:	f7ff fc34 	bl	80014fc <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <SysTick_Handler+0x928>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 81c0 	beq.w	800201e <SysTick_Handler+0xaea>
 8001c9e:	2213      	movs	r2, #19
 8001ca0:	496d      	ldr	r1, [pc, #436]	; (8001e58 <SysTick_Handler+0x924>)
 8001ca2:	486f      	ldr	r0, [pc, #444]	; (8001e60 <SysTick_Handler+0x92c>)
 8001ca4:	f003 fc80 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001ca8:	e1b9      	b.n	800201e <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001caa:	2302      	movs	r3, #2
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <SysTick_Handler+0x930>)
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2126      	movs	r1, #38	; 0x26
 8001cb8:	485e      	ldr	r0, [pc, #376]	; (8001e34 <SysTick_Handler+0x900>)
 8001cba:	f00b f9e8 	bl	800d08e <SPI_ETH_REG>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <SysTick_Handler+0x934>)
 8001cc4:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001cc6:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <SysTick_Handler+0x934>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 81a7 	beq.w	800201e <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001cd0:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <SysTick_Handler+0x934>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	4a65      	ldr	r2, [pc, #404]	; (8001e6c <SysTick_Handler+0x938>)
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4856      	ldr	r0, [pc, #344]	; (8001e34 <SysTick_Handler+0x900>)
 8001cda:	f00b fdbb 	bl	800d854 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <SysTick_Handler+0x938>)
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	2128      	movs	r1, #40	; 0x28
 8001ce6:	4853      	ldr	r0, [pc, #332]	; (8001e34 <SysTick_Handler+0x900>)
 8001ce8:	f00b fa57 	bl	800d19a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001cec:	2240      	movs	r2, #64	; 0x40
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4850      	ldr	r0, [pc, #320]	; (8001e34 <SysTick_Handler+0x900>)
 8001cf2:	f00b fb1b 	bl	800d32c <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <SysTick_Handler+0x920>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <SysTick_Handler+0x7d2>
 8001cfe:	210f      	movs	r1, #15
 8001d00:	485b      	ldr	r0, [pc, #364]	; (8001e70 <SysTick_Handler+0x93c>)
 8001d02:	f7ff fbfb 	bl	80014fc <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <SysTick_Handler+0x928>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <SysTick_Handler+0x7e4>
 8001d0e:	220f      	movs	r2, #15
 8001d10:	4957      	ldr	r1, [pc, #348]	; (8001e70 <SysTick_Handler+0x93c>)
 8001d12:	4853      	ldr	r0, [pc, #332]	; (8001e60 <SysTick_Handler+0x92c>)
 8001d14:	f003 fc48 	bl	80055a8 <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <SysTick_Handler+0x934>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	4946      	ldr	r1, [pc, #280]	; (8001e40 <SysTick_Handler+0x90c>)
 8001d26:	4853      	ldr	r0, [pc, #332]	; (8001e74 <SysTick_Handler+0x940>)
 8001d28:	f00d f84a 	bl	800edc0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d2c:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <SysTick_Handler+0x934>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001d34:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <SysTick_Handler+0x934>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <SysTick_Handler+0x812>
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <SysTick_Handler+0x900>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001d48:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4849      	ldr	r0, [pc, #292]	; (8001e74 <SysTick_Handler+0x940>)
 8001d50:	f009 fe3e 	bl	800b9d0 <ModBUS_Check>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02d      	beq.n	8001db6 <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <SysTick_Handler+0x91c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d66:	4832      	ldr	r0, [pc, #200]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001d68:	f009 ff34 	bl	800bbd4 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <SysTick_Handler+0x8fc>)
 8001d6e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001d72:	2300      	movs	r3, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	493e      	ldr	r1, [pc, #248]	; (8001e74 <SysTick_Handler+0x940>)
 8001d7a:	483f      	ldr	r0, [pc, #252]	; (8001e78 <SysTick_Handler+0x944>)
 8001d7c:	f00d f820 	bl	800edc0 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	493c      	ldr	r1, [pc, #240]	; (8001e7c <SysTick_Handler+0x948>)
 8001d8a:	483d      	ldr	r0, [pc, #244]	; (8001e80 <SysTick_Handler+0x94c>)
 8001d8c:	f00d f818 	bl	800edc0 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <SysTick_Handler+0x920>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <SysTick_Handler+0x86c>
 8001d98:	2113      	movs	r1, #19
 8001d9a:	483a      	ldr	r0, [pc, #232]	; (8001e84 <SysTick_Handler+0x950>)
 8001d9c:	f7ff fbae 	bl	80014fc <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <SysTick_Handler+0x928>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 813a 	beq.w	800201e <SysTick_Handler+0xaea>
 8001daa:	2213      	movs	r2, #19
 8001dac:	4935      	ldr	r1, [pc, #212]	; (8001e84 <SysTick_Handler+0x950>)
 8001dae:	482c      	ldr	r0, [pc, #176]	; (8001e60 <SysTick_Handler+0x92c>)
 8001db0:	f003 fbfa 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001db4:	e133      	b.n	800201e <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <SysTick_Handler+0x920>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <SysTick_Handler+0x892>
 8001dbe:	210d      	movs	r1, #13
 8001dc0:	4831      	ldr	r0, [pc, #196]	; (8001e88 <SysTick_Handler+0x954>)
 8001dc2:	f7ff fb9b 	bl	80014fc <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <SysTick_Handler+0x928>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8127 	beq.w	800201e <SysTick_Handler+0xaea>
 8001dd0:	220d      	movs	r2, #13
 8001dd2:	492d      	ldr	r1, [pc, #180]	; (8001e88 <SysTick_Handler+0x954>)
 8001dd4:	4822      	ldr	r0, [pc, #136]	; (8001e60 <SysTick_Handler+0x92c>)
 8001dd6:	f003 fbe7 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001dda:	e120      	b.n	800201e <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <SysTick_Handler+0x920>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <SysTick_Handler+0x8b8>
 8001de4:	2115      	movs	r1, #21
 8001de6:	4829      	ldr	r0, [pc, #164]	; (8001e8c <SysTick_Handler+0x958>)
 8001de8:	f7ff fb88 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <SysTick_Handler+0x928>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <SysTick_Handler+0x8ca>
 8001df4:	2216      	movs	r2, #22
 8001df6:	4926      	ldr	r1, [pc, #152]	; (8001e90 <SysTick_Handler+0x95c>)
 8001df8:	4819      	ldr	r0, [pc, #100]	; (8001e60 <SysTick_Handler+0x92c>)
 8001dfa:	f003 fbd5 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <SysTick_Handler+0x900>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e04:	e10c      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <SysTick_Handler+0x920>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <SysTick_Handler+0x8e2>
 8001e0e:	2114      	movs	r1, #20
 8001e10:	4820      	ldr	r0, [pc, #128]	; (8001e94 <SysTick_Handler+0x960>)
 8001e12:	f7ff fb73 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <SysTick_Handler+0x928>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <SysTick_Handler+0x8f4>
 8001e1e:	2215      	movs	r2, #21
 8001e20:	491d      	ldr	r1, [pc, #116]	; (8001e98 <SysTick_Handler+0x964>)
 8001e22:	480f      	ldr	r0, [pc, #60]	; (8001e60 <SysTick_Handler+0x92c>)
 8001e24:	f003 fbc0 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <SysTick_Handler+0x900>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e2e:	e0f7      	b.n	8002020 <SysTick_Handler+0xaec>
 8001e30:	20003100 	.word	0x20003100
 8001e34:	200002e4 	.word	0x200002e4
 8001e38:	20003fa6 	.word	0x20003fa6
 8001e3c:	20003294 	.word	0x20003294
 8001e40:	20000308 	.word	0x20000308
 8001e44:	20003fa2 	.word	0x20003fa2
 8001e48:	20001358 	.word	0x20001358
 8001e4c:	20001308 	.word	0x20001308
 8001e50:	20004410 	.word	0x20004410
 8001e54:	20003f98 	.word	0x20003f98
 8001e58:	0801060c 	.word	0x0801060c
 8001e5c:	20000021 	.word	0x20000021
 8001e60:	20000298 	.word	0x20000298
 8001e64:	20003fa8 	.word	0x20003fa8
 8001e68:	20003fa0 	.word	0x20003fa0
 8001e6c:	20003fa4 	.word	0x20003fa4
 8001e70:	08010620 	.word	0x08010620
 8001e74:	2000310d 	.word	0x2000310d
 8001e78:	20000b08 	.word	0x20000b08
 8001e7c:	20003420 	.word	0x20003420
 8001e80:	2000396c 	.word	0x2000396c
 8001e84:	08010630 	.word	0x08010630
 8001e88:	080105fc 	.word	0x080105fc
 8001e8c:	08010644 	.word	0x08010644
 8001e90:	0801065c 	.word	0x0801065c
 8001e94:	08010674 	.word	0x08010674
 8001e98:	0801068c 	.word	0x0801068c
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e9c:	4b79      	ldr	r3, [pc, #484]	; (8002084 <SysTick_Handler+0xb50>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <SysTick_Handler+0x978>
 8001ea4:	2116      	movs	r1, #22
 8001ea6:	4878      	ldr	r0, [pc, #480]	; (8002088 <SysTick_Handler+0xb54>)
 8001ea8:	f7ff fb28 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001eac:	4b77      	ldr	r3, [pc, #476]	; (800208c <SysTick_Handler+0xb58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <SysTick_Handler+0x98a>
 8001eb4:	2218      	movs	r2, #24
 8001eb6:	4976      	ldr	r1, [pc, #472]	; (8002090 <SysTick_Handler+0xb5c>)
 8001eb8:	4876      	ldr	r0, [pc, #472]	; (8002094 <SysTick_Handler+0xb60>)
 8001eba:	f003 fb75 	bl	80055a8 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4875      	ldr	r0, [pc, #468]	; (8002098 <SysTick_Handler+0xb64>)
 8001ec4:	f00b fa32 	bl	800d32c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ec8:	bf00      	nop
 8001eca:	2301      	movs	r3, #1
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <SysTick_Handler+0xb68>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	486f      	ldr	r0, [pc, #444]	; (8002098 <SysTick_Handler+0xb64>)
 8001eda:	f00b f8d8 	bl	800d08e <SPI_ETH_REG>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f2      	bne.n	8001eca <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <SysTick_Handler+0xb64>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001eea:	e099      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001eec:	4b65      	ldr	r3, [pc, #404]	; (8002084 <SysTick_Handler+0xb50>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <SysTick_Handler+0x9c8>
 8001ef4:	2117      	movs	r1, #23
 8001ef6:	486a      	ldr	r0, [pc, #424]	; (80020a0 <SysTick_Handler+0xb6c>)
 8001ef8:	f7ff fb00 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <SysTick_Handler+0xb58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <SysTick_Handler+0x9da>
 8001f04:	2218      	movs	r2, #24
 8001f06:	4967      	ldr	r1, [pc, #412]	; (80020a4 <SysTick_Handler+0xb70>)
 8001f08:	4862      	ldr	r0, [pc, #392]	; (8002094 <SysTick_Handler+0xb60>)
 8001f0a:	f003 fb4d 	bl	80055a8 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001f0e:	2208      	movs	r2, #8
 8001f10:	2101      	movs	r1, #1
 8001f12:	4861      	ldr	r0, [pc, #388]	; (8002098 <SysTick_Handler+0xb64>)
 8001f14:	f00b fa0a 	bl	800d32c <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001f18:	bf00      	nop
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <SysTick_Handler+0xb68>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2201      	movs	r2, #1
 8001f26:	2101      	movs	r1, #1
 8001f28:	485b      	ldr	r0, [pc, #364]	; (8002098 <SysTick_Handler+0xb64>)
 8001f2a:	f00b f8b0 	bl	800d08e <SPI_ETH_REG>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f2      	bne.n	8001f1a <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <SysTick_Handler+0xb64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f3a:	e071      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <SysTick_Handler+0xb50>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <SysTick_Handler+0xa18>
 8001f44:	2116      	movs	r1, #22
 8001f46:	4858      	ldr	r0, [pc, #352]	; (80020a8 <SysTick_Handler+0xb74>)
 8001f48:	f7ff fad8 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	; (800208c <SysTick_Handler+0xb58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <SysTick_Handler+0xa2a>
 8001f54:	2216      	movs	r2, #22
 8001f56:	4954      	ldr	r1, [pc, #336]	; (80020a8 <SysTick_Handler+0xb74>)
 8001f58:	484e      	ldr	r0, [pc, #312]	; (8002094 <SysTick_Handler+0xb60>)
 8001f5a:	f003 fb25 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <SysTick_Handler+0xb64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f64:	e05c      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <SysTick_Handler+0xb50>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <SysTick_Handler+0xa42>
 8001f6e:	2111      	movs	r1, #17
 8001f70:	484e      	ldr	r0, [pc, #312]	; (80020ac <SysTick_Handler+0xb78>)
 8001f72:	f7ff fac3 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f76:	4b45      	ldr	r3, [pc, #276]	; (800208c <SysTick_Handler+0xb58>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <SysTick_Handler+0xa54>
 8001f7e:	2211      	movs	r2, #17
 8001f80:	494a      	ldr	r1, [pc, #296]	; (80020ac <SysTick_Handler+0xb78>)
 8001f82:	4844      	ldr	r0, [pc, #272]	; (8002094 <SysTick_Handler+0xb60>)
 8001f84:	f003 fb10 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <SysTick_Handler+0xb64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f8e:	e047      	b.n	8002020 <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f90:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <SysTick_Handler+0xb50>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <SysTick_Handler+0xa6c>
 8001f98:	2113      	movs	r1, #19
 8001f9a:	4845      	ldr	r0, [pc, #276]	; (80020b0 <SysTick_Handler+0xb7c>)
 8001f9c:	f7ff faae 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <SysTick_Handler+0xb58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <SysTick_Handler+0xa7e>
 8001fa8:	2213      	movs	r2, #19
 8001faa:	4941      	ldr	r1, [pc, #260]	; (80020b0 <SysTick_Handler+0xb7c>)
 8001fac:	4839      	ldr	r0, [pc, #228]	; (8002094 <SysTick_Handler+0xb60>)
 8001fae:	f003 fafb 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <SysTick_Handler+0xb64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fb8:	e032      	b.n	8002020 <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <SysTick_Handler+0xb50>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <SysTick_Handler+0xa96>
 8001fc2:	2114      	movs	r1, #20
 8001fc4:	483b      	ldr	r0, [pc, #236]	; (80020b4 <SysTick_Handler+0xb80>)
 8001fc6:	f7ff fa99 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <SysTick_Handler+0xb58>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <SysTick_Handler+0xaa8>
 8001fd2:	2214      	movs	r2, #20
 8001fd4:	4937      	ldr	r1, [pc, #220]	; (80020b4 <SysTick_Handler+0xb80>)
 8001fd6:	482f      	ldr	r0, [pc, #188]	; (8002094 <SysTick_Handler+0xb60>)
 8001fd8:	f003 fae6 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <SysTick_Handler+0xb64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fe2:	e01d      	b.n	8002020 <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <SysTick_Handler+0xb50>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <SysTick_Handler+0xac0>
 8001fec:	2112      	movs	r1, #18
 8001fee:	4832      	ldr	r0, [pc, #200]	; (80020b8 <SysTick_Handler+0xb84>)
 8001ff0:	f7ff fa84 	bl	80014fc <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <SysTick_Handler+0xb58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <SysTick_Handler+0xad2>
 8001ffc:	2211      	movs	r2, #17
 8001ffe:	492e      	ldr	r1, [pc, #184]	; (80020b8 <SysTick_Handler+0xb84>)
 8002000:	4824      	ldr	r0, [pc, #144]	; (8002094 <SysTick_Handler+0xb60>)
 8002002:	f003 fad1 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <SysTick_Handler+0xb64>)
 8002008:	2200      	movs	r2, #0
 800200a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800200c:	e008      	b.n	8002020 <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 800200e:	4822      	ldr	r0, [pc, #136]	; (8002098 <SysTick_Handler+0xb64>)
 8002010:	f00b f815 	bl	800d03e <SPI_ETH>
 8002014:	e004      	b.n	8002020 <SysTick_Handler+0xaec>
			 default:
 8002016:	bf00      	nop
 8002018:	e002      	b.n	8002020 <SysTick_Handler+0xaec>
			 break;
 800201a:	bf00      	nop
 800201c:	e000      	b.n	8002020 <SysTick_Handler+0xaec>
			 break;
 800201e:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <SysTick_Handler+0xb88>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d102      	bne.n	800202e <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <SysTick_Handler+0xb88>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <SysTick_Handler+0xb8c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d104      	bne.n	8002040 <SysTick_Handler+0xb0c>
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <SysTick_Handler+0xb90>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <SysTick_Handler+0xb90>)
 800203e:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <SysTick_Handler+0xb90>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	dd0f      	ble.n	8002068 <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <SysTick_Handler+0xb90>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <SysTick_Handler+0xb94>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <SysTick_Handler+0xb8c>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <SysTick_Handler+0xb98>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <SysTick_Handler+0xb9c>)
 8002060:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <SysTick_Handler+0xb98>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 fd38 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <SysTick_Handler+0xba0>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002072:	2b04      	cmp	r3, #4
 8002074:	d132      	bne.n	80020dc <SysTick_Handler+0xba8>
	{
		ticks++;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <SysTick_Handler+0xba4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <SysTick_Handler+0xba4>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	e02f      	b.n	80020e2 <SysTick_Handler+0xbae>
 8002082:	bf00      	nop
 8002084:	20003f98 	.word	0x20003f98
 8002088:	080106a4 	.word	0x080106a4
 800208c:	20000021 	.word	0x20000021
 8002090:	080106bc 	.word	0x080106bc
 8002094:	20000298 	.word	0x20000298
 8002098:	200002e4 	.word	0x200002e4
 800209c:	20003fa8 	.word	0x20003fa8
 80020a0:	080106d8 	.word	0x080106d8
 80020a4:	080106f0 	.word	0x080106f0
 80020a8:	0801070c 	.word	0x0801070c
 80020ac:	08010724 	.word	0x08010724
 80020b0:	08010738 	.word	0x08010738
 80020b4:	0801074c 	.word	0x0801074c
 80020b8:	08010764 	.word	0x08010764
 80020bc:	200002e0 	.word	0x200002e0
 80020c0:	20003fed 	.word	0x20003fed
 80020c4:	20004420 	.word	0x20004420
 80020c8:	20004424 	.word	0x20004424
 80020cc:	2000441c 	.word	0x2000441c
 80020d0:	20004428 	.word	0x20004428
 80020d4:	200023b4 	.word	0x200023b4
 80020d8:	20004414 	.word	0x20004414
	}
	else
	{
		ticks=0;
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <SysTick_Handler+0xc7c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <SysTick_Handler+0xc80>)
 80020e4:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d158      	bne.n	800219e <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <SysTick_Handler+0xc84>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d017      	beq.n	8002124 <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <SysTick_Handler+0xc80>)
 80020f6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d006      	beq.n	800210c <SysTick_Handler+0xbd8>
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <SysTick_Handler+0xc80>)
 8002100:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002104:	3301      	adds	r3, #1
 8002106:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <SysTick_Handler+0xc80>)
 8002108:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <SysTick_Handler+0xc80>)
 800210e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002112:	2b02      	cmp	r3, #2
 8002114:	d106      	bne.n	8002124 <SysTick_Handler+0xbf0>
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <SysTick_Handler+0xc80>)
 8002118:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800211c:	3301      	adds	r3, #1
 800211e:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <SysTick_Handler+0xc80>)
 8002120:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <SysTick_Handler+0xc80>)
 8002126:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800212a:	2b02      	cmp	r3, #2
 800212c:	d018      	beq.n	8002160 <SysTick_Handler+0xc2c>
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <SysTick_Handler+0xc80>)
 8002130:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002134:	f241 527c 	movw	r2, #5500	; 0x157c
 8002138:	4293      	cmp	r3, r2
 800213a:	dd11      	ble.n	8002160 <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <SysTick_Handler+0xc84>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <SysTick_Handler+0xc88>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f242 020c 	movw	r2, #8204	; 0x200c
 800214c:	4293      	cmp	r3, r2
 800214e:	d107      	bne.n	8002160 <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002150:	2201      	movs	r2, #1
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <SysTick_Handler+0xc8c>)
 8002154:	4819      	ldr	r0, [pc, #100]	; (80021bc <SysTick_Handler+0xc88>)
 8002156:	f003 fa6c 	bl	8005632 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <SysTick_Handler+0xc90>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <SysTick_Handler+0xc80>)
 8002162:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002166:	2b02      	cmp	r3, #2
 8002168:	d11d      	bne.n	80021a6 <SysTick_Handler+0xc72>
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <SysTick_Handler+0xc80>)
 800216c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002170:	f245 0214 	movw	r2, #20500	; 0x5014
 8002174:	4293      	cmp	r3, r2
 8002176:	dd16      	ble.n	80021a6 <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <SysTick_Handler+0xc84>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <SysTick_Handler+0xc88>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f242 020c 	movw	r2, #8204	; 0x200c
 8002188:	4293      	cmp	r3, r2
 800218a:	d10c      	bne.n	80021a6 <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800218c:	2201      	movs	r2, #1
 800218e:	490c      	ldr	r1, [pc, #48]	; (80021c0 <SysTick_Handler+0xc8c>)
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <SysTick_Handler+0xc88>)
 8002192:	f003 fa4e 	bl	8005632 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <SysTick_Handler+0xc90>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 800219c:	e003      	b.n	80021a6 <SysTick_Handler+0xc72>
			wf._ticks=0;
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Handler+0xc80>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 80021a6:	bf00      	nop
 80021a8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20004414 	.word	0x20004414
 80021b4:	200023b4 	.word	0x200023b4
 80021b8:	20003fee 	.word	0x20003fee
 80021bc:	20000254 	.word	0x20000254
 80021c0:	20004400 	.word	0x20004400
 80021c4:	20003fec 	.word	0x20003fec

080021c8 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a25      	ldr	r2, [pc, #148]	; (800226c <HAL_UART_ErrorCallback+0xa4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d121      	bne.n	800221e <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_UART_ErrorCallback+0xa8>)
 80021e4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_UART_ErrorCallback+0xa8>)
 80021ec:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 8002200:	2215      	movs	r2, #21
 8002202:	491c      	ldr	r1, [pc, #112]	; (8002274 <HAL_UART_ErrorCallback+0xac>)
 8002204:	481c      	ldr	r0, [pc, #112]	; (8002278 <HAL_UART_ErrorCallback+0xb0>)
 8002206:	f003 f9cf 	bl	80055a8 <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f003 f90b 	bl	8005426 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002210:	f7ff f87a 	bl	8001308 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002214:	2201      	movs	r2, #1
 8002216:	4919      	ldr	r1, [pc, #100]	; (800227c <HAL_UART_ErrorCallback+0xb4>)
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f003 fa0a 	bl	8005632 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_UART_ErrorCallback+0xb8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d11c      	bne.n	8002262 <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_UART_ErrorCallback+0xa8>)
 8002232:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002236:	3301      	adds	r3, #1
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_UART_ErrorCallback+0xa8>)
 800223a:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f003 f8e9 	bl	8005426 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002254:	f7ff f882 	bl	800135c <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002258:	2201      	movs	r2, #1
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <HAL_UART_ErrorCallback+0xb4>)
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f003 f9e8 	bl	8005632 <HAL_UART_Receive_IT>
	}
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40011000 	.word	0x40011000
 8002270:	200023b4 	.word	0x200023b4
 8002274:	08010778 	.word	0x08010778
 8002278:	20000298 	.word	0x20000298
 800227c:	20004400 	.word	0x20004400
 8002280:	40004400 	.word	0x40004400

08002284 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_UART_RxCpltCallback+0x64>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d123      	bne.n	80022de <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_UART_RxCpltCallback+0x68>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_UART_RxCpltCallback+0x6c>)
 800229c:	7811      	ldrb	r1, [r2, #0]
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_UART_RxCpltCallback+0x70>)
 80022a0:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_UART_RxCpltCallback+0x68>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_UART_RxCpltCallback+0x68>)
 80022aa:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_UART_RxCpltCallback+0x68>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	db03      	blt.n	80022be <HAL_UART_RxCpltCallback+0x3a>
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_UART_RxCpltCallback+0x68>)
 80022b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022bc:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022be:	2100      	movs	r1, #0
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <HAL_UART_RxCpltCallback+0x74>)
 80022c2:	f002 f8b7 	bl	8004434 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022ca:	2201      	movs	r2, #1
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_UART_RxCpltCallback+0x78>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80022d4:	2201      	movs	r2, #1
 80022d6:	4906      	ldr	r1, [pc, #24]	; (80022f0 <HAL_UART_RxCpltCallback+0x6c>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f003 f9aa 	bl	8005632 <HAL_UART_Receive_IT>
		 }
 }
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40011000 	.word	0x40011000
 80022ec:	20004430 	.word	0x20004430
 80022f0:	20004400 	.word	0x20004400
 80022f4:	20003ffc 	.word	0x20003ffc
 80022f8:	2000020c 	.word	0x2000020c
 80022fc:	20003fec 	.word	0x20003fec

08002300 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af02      	add	r7, sp, #8
 8002306:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d12d      	bne.n	800236e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002312:	2100      	movs	r1, #0
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f002 f98b 	bl	8004630 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800232c:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002348:	4811      	ldr	r0, [pc, #68]	; (8002390 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800234a:	f00c fd39 	bl	800edc0 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800234e:	2201      	movs	r2, #1
 8002350:	4910      	ldr	r1, [pc, #64]	; (8002394 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002352:	4811      	ldr	r0, [pc, #68]	; (8002398 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002354:	f003 f96d 	bl	8005632 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800235a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4809      	ldr	r0, [pc, #36]	; (8002390 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800236a:	f7ff f8c7 	bl	80014fc <ITM0_Write>
				 }
		}
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20003fef 	.word	0x20003fef
 800237c:	20003fec 	.word	0x20003fec
 8002380:	20004430 	.word	0x20004430
 8002384:	20004404 	.word	0x20004404
 8002388:	20003ffc 	.word	0x20003ffc
 800238c:	200043fc 	.word	0x200043fc
 8002390:	200041fc 	.word	0x200041fc
 8002394:	20004400 	.word	0x20004400
 8002398:	20000254 	.word	0x20000254
 800239c:	200023b4 	.word	0x200023b4

080023a0 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af06      	add	r7, sp, #24
 80023a6:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	220c      	movs	r2, #12
 80023ac:	4943      	ldr	r1, [pc, #268]	; (80024bc <ESP8266_HW_Init+0x11c>)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f003 f868 	bl	8005484 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b8:	f000 fbb0 	bl	8002b1c <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023bc:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <ESP8266_HW_Init+0x120>)
 80023be:	2205      	movs	r2, #5
 80023c0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <ESP8266_HW_Init+0x124>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3d      	ldr	r2, [pc, #244]	; (80024c0 <ESP8266_HW_Init+0x120>)
 80023ca:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023ce:	e00e      	b.n	80023ee <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023d0:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <ESP8266_HW_Init+0x124>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <ESP8266_HW_Init+0x120>)
 80023d6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <ESP8266_HW_Init+0x128>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f241 3287 	movw	r2, #4999	; 0x1387
 80023e2:	4293      	cmp	r3, r2
 80023e4:	dd03      	ble.n	80023ee <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <ESP8266_HW_Init+0x12c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023ec:	e012      	b.n	8002414 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023ee:	2300      	movs	r3, #0
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ESP8266_HW_Init+0x130>)
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <ESP8266_HW_Init+0x134>)
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <ESP8266_HW_Init+0x138>)
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <ESP8266_HW_Init+0x13c>)
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <ESP8266_HW_Init+0x140>)
 8002404:	4a37      	ldr	r2, [pc, #220]	; (80024e4 <ESP8266_HW_Init+0x144>)
 8002406:	4938      	ldr	r1, [pc, #224]	; (80024e8 <ESP8266_HW_Init+0x148>)
 8002408:	4838      	ldr	r0, [pc, #224]	; (80024ec <ESP8266_HW_Init+0x14c>)
 800240a:	f00c f973 	bl	800e6f4 <FT_String_ND>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d1dd      	bne.n	80023d0 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <ESP8266_HW_Init+0x12c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d129      	bne.n	8002470 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <ESP8266_HW_Init+0x120>)
 800241e:	2205      	movs	r2, #5
 8002420:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <ESP8266_HW_Init+0x124>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <ESP8266_HW_Init+0x120>)
 800242a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800242e:	e00a      	b.n	8002446 <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <ESP8266_HW_Init+0x124>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <ESP8266_HW_Init+0x120>)
 8002436:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <ESP8266_HW_Init+0x128>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002442:	4293      	cmp	r3, r2
 8002444:	dc13      	bgt.n	800246e <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002446:	2300      	movs	r3, #0
 8002448:	9304      	str	r3, [sp, #16]
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <ESP8266_HW_Init+0x130>)
 800244c:	9303      	str	r3, [sp, #12]
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <ESP8266_HW_Init+0x134>)
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <ESP8266_HW_Init+0x138>)
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <ESP8266_HW_Init+0x13c>)
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <ESP8266_HW_Init+0x140>)
 800245c:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <ESP8266_HW_Init+0x144>)
 800245e:	4922      	ldr	r1, [pc, #136]	; (80024e8 <ESP8266_HW_Init+0x148>)
 8002460:	4822      	ldr	r0, [pc, #136]	; (80024ec <ESP8266_HW_Init+0x14c>)
 8002462:	f00c f947 	bl	800e6f4 <FT_String_ND>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d1e1      	bne.n	8002430 <ESP8266_HW_Init+0x90>
 800246c:	e000      	b.n	8002470 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 800246e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <ESP8266_HW_Init+0x128>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f241 3287 	movw	r2, #4999	; 0x1387
 8002478:	4293      	cmp	r3, r2
 800247a:	dc06      	bgt.n	800248a <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <ESP8266_HW_Init+0x150>)
 800247e:	220a      	movs	r2, #10
 8002480:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <ESP8266_HW_Init+0x128>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e008      	b.n	800249c <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <ESP8266_HW_Init+0x150>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <ESP8266_HW_Init+0x150>)
 8002494:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ESP8266_HW_Init+0x128>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <ESP8266_HW_Init+0x150>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d981      	bls.n	80023a8 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <ESP8266_HW_Init+0x150>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b0a      	cmp	r3, #10
 80024aa:	d101      	bne.n	80024b0 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 80024b0:	2300      	movs	r3, #0
	  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08010790 	.word	0x08010790
 80024c0:	200023b4 	.word	0x200023b4
 80024c4:	20004404 	.word	0x20004404
 80024c8:	20004408 	.word	0x20004408
 80024cc:	20003fea 	.word	0x20003fea
 80024d0:	20002e48 	.word	0x20002e48
 80024d4:	20004418 	.word	0x20004418
 80024d8:	20003094 	.word	0x20003094
 80024dc:	20002c48 	.word	0x20002c48
 80024e0:	200030a0 	.word	0x200030a0
 80024e4:	080107a0 	.word	0x080107a0
 80024e8:	2000308c 	.word	0x2000308c
 80024ec:	200041fc 	.word	0x200041fc
 80024f0:	20003fe9 	.word	0x20003fe9

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	e7fe      	b.n	80024fc <Error_Handler+0x8>
	...

08002500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_MspInit+0x4c>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_MspInit+0x4c>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_SPI_MspInit+0x84>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d12b      	bne.n	80025ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025aa:	23e0      	movs	r3, #224	; 0xe0
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ba:	2305      	movs	r3, #5
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_SPI_MspInit+0x8c>)
 80025c6:	f000 fca3 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40013000 	.word	0x40013000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000

080025e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d115      	bne.n	800261e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201c      	movs	r0, #28
 8002614:	f000 fba5 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002618:	201c      	movs	r0, #28
 800261a:	f000 fbbe 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_UART_MspInit+0x108>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d135      	bne.n	80026ba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_UART_MspInit+0x10c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 8002686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2307      	movs	r3, #7
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4826      	ldr	r0, [pc, #152]	; (800273c <HAL_UART_MspInit+0x110>)
 80026a4:	f000 fc34 	bl	8002f10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2025      	movs	r0, #37	; 0x25
 80026ae:	f000 fb58 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b2:	2025      	movs	r0, #37	; 0x25
 80026b4:	f000 fb71 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026b8:	e038      	b.n	800272c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d133      	bne.n	800272c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 80026fc:	230c      	movs	r3, #12
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270c:	2307      	movs	r3, #7
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_UART_MspInit+0x110>)
 8002718:	f000 fbfa 	bl	8002f10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2026      	movs	r0, #38	; 0x26
 8002722:	f000 fb1e 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 fb37 	bl	8002d9a <HAL_NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40011000 	.word	0x40011000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40004400 	.word	0x40004400

08002744 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <HAL_UART_MspDeInit+0x5c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 800275c:	f023 0310 	bic.w	r3, r3, #16
 8002760:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 8002762:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002766:	4810      	ldr	r0, [pc, #64]	; (80027a8 <HAL_UART_MspDeInit+0x64>)
 8002768:	f000 fd56 	bl	8003218 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800276c:	2025      	movs	r0, #37	; 0x25
 800276e:	f000 fb22 	bl	8002db6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002772:	e011      	b.n	8002798 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_UART_MspDeInit+0x68>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 800278a:	210c      	movs	r1, #12
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <HAL_UART_MspDeInit+0x64>)
 800278e:	f000 fd43 	bl	8003218 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002792:	2026      	movs	r0, #38	; 0x26
 8002794:	f000 fb0f 	bl	8002db6 <HAL_NVIC_DisableIRQ>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40004400 	.word	0x40004400

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM2_IRQHandler+0x10>)
 80027fe:	f002 f823 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000020c 	.word	0x2000020c

0800280c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART1_IRQHandler+0x10>)
 8002812:	f002 ff3f 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000254 	.word	0x20000254

08002820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <USART2_IRQHandler+0x10>)
 8002826:	f002 ff35 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000298 	.word	0x20000298

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_kill>:

int _kill(int pid, int sig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800284e:	f00c fd63 	bl	800f318 <__errno>
 8002852:	4603      	mov	r3, r0
 8002854:	2216      	movs	r2, #22
 8002856:	601a      	str	r2, [r3, #0]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_exit>:

void _exit (int status)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe7 	bl	8002844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0x12>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
	}

return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e009      	b.n	80028d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dbf1      	blt.n	80028c4 <_write+0x12>
	}
	return len;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_close>:

int _close(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002912:	605a      	str	r2, [r3, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_isatty>:

int _isatty(int file)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	return 1;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f00c fcc8 	bl	800f318 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20020000 	.word	0x20020000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	20004438 	.word	0x20004438
 80029bc:	20004590 	.word	0x20004590

080029c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ea:	490e      	ldr	r1, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff ffd7 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f00c fc87 	bl	800f324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fd fe3d 	bl	8000694 <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002a28:	08010ccc 	.word	0x08010ccc
  ldr r2, =_sbss
 8002a2c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002a30:	2000458c 	.word	0x2000458c

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f973 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	200f      	movs	r0, #15
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff fd48 	bl	8002500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f999 	bl	8002dd2 <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f953 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000084 	.word	0x20000084
 8002ad4:	2000008c 	.word	0x2000008c
 8002ad8:	20000088 	.word	0x20000088

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	2000008c 	.word	0x2000008c
 8002b00:	2000443c 	.word	0x2000443c

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000443c 	.word	0x2000443c

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000008c 	.word	0x2000008c

08002b64 <__NVIC_SetPriorityGrouping>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_DisableIRQ>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db12      	blt.n	8002c3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	490a      	ldr	r1, [pc, #40]	; (8002c48 <__NVIC_DisableIRQ+0x44>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	3320      	adds	r3, #32
 8002c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c30:	f3bf 8f4f 	dsb	sy
}
 8002c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c36:	f3bf 8f6f 	isb	sy
}
 8002c3a:	bf00      	nop
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	; (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	; (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff05 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d74:	f7ff ff1a 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff8e 	bl	8002ca0 <NVIC_EncodePriority>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff5d 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff0d 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff1d 	bl	8002c04 <__NVIC_DisableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff94 	bl	8002d08 <SysTick_Config>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff fe84 	bl	8002b04 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d008      	beq.n	8002e1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e052      	b.n	8002ec2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0216 	bic.w	r2, r2, #22
 8002e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <HAL_DMA_Abort+0x62>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0208 	bic.w	r2, r2, #8
 8002e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e013      	b.n	8002e96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fe49 	bl	8002b04 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d90c      	bls.n	8002e96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e015      	b.n	8002ec2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e4      	bne.n	8002e6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	223f      	movs	r2, #63	; 0x3f
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d004      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e00c      	b.n	8002f02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e159      	b.n	80031e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 8148 	bne.w	80031da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d005      	beq.n	8002f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d130      	bne.n	8002fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d017      	beq.n	8003000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a2 	beq.w	80031da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	4b54      	ldr	r3, [pc, #336]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b2:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_GPIO_Init+0x2ec>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a49      	ldr	r2, [pc, #292]	; (8003200 <HAL_GPIO_Init+0x2f0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x202>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a48      	ldr	r2, [pc, #288]	; (8003204 <HAL_GPIO_Init+0x2f4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x1fe>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_GPIO_Init+0x2f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x1fa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_GPIO_Init+0x2fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x1f6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a45      	ldr	r2, [pc, #276]	; (8003210 <HAL_GPIO_Init+0x300>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x1f2>
 80030fe:	2304      	movs	r3, #4
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003102:	2307      	movs	r3, #7
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x204>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x204>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003112:	2300      	movs	r3, #0
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003124:	4935      	ldr	r1, [pc, #212]	; (80031fc <HAL_GPIO_Init+0x2ec>)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_GPIO_Init+0x304>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3301      	adds	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	f67f aea2 	bls.w	8002f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3724      	adds	r7, #36	; 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40013800 	.word	0x40013800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400
 8003208:	40020800 	.word	0x40020800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	40021000 	.word	0x40021000
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e0bb      	b.n	80033ac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	429a      	cmp	r2, r3
 800324c:	f040 80ab 	bne.w	80033a6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003250:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_GPIO_DeInit+0x1b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_DeInit+0x96>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a53      	ldr	r2, [pc, #332]	; (80033cc <HAL_GPIO_DeInit+0x1b4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_DeInit+0x92>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_DeInit+0x1b8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_DeInit+0x8e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_GPIO_DeInit+0x1bc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_DeInit+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <HAL_GPIO_DeInit+0x1c0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_DeInit+0x86>
 800329a:	2304      	movs	r3, #4
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 800329e:	2307      	movs	r3, #7
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d132      	bne.n	8003326 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4944      	ldr	r1, [pc, #272]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4941      	ldr	r1, [pc, #260]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032d8:	4013      	ands	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	493d      	ldr	r1, [pc, #244]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032ea:	4b3c      	ldr	r3, [pc, #240]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	493a      	ldr	r1, [pc, #232]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	43da      	mvns	r2, r3
 8003318:	482a      	ldr	r0, [pc, #168]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	400a      	ands	r2, r1
 8003320:	3302      	adds	r3, #2
 8003322:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2103      	movs	r1, #3
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	08d2      	lsrs	r2, r2, #3
 800335c:	4019      	ands	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2103      	movs	r1, #3
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	2101      	movs	r1, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2103      	movs	r1, #3
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f af40 	bls.w	8003234 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003424:	887a      	ldrh	r2, [r7, #2]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	041a      	lsls	r2, r3, #16
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43d9      	mvns	r1, r3
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	400b      	ands	r3, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e267      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d075      	beq.n	8003552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00c      	beq.n	800348c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003472:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d112      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05b      	beq.n	8003550 <HAL_RCC_OscConfig+0x108>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d157      	bne.n	8003550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e242      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x74>
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x98>
 80034c6:	4b70      	ldr	r3, [pc, #448]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6c      	ldr	r2, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034e0:	4b69      	ldr	r3, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7ff fb00 	bl	8002b04 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff fafc 	bl	8002b04 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e207      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xc0>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff faec 	bl	8002b04 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003530:	f7ff fae8 	bl	8002b04 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1f3      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0xe8>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1c7      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4937      	ldr	r1, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7ff faa1 	bl	8002b04 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff fa9d 	bl	8002b04 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1a8      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7ff fa80 	bl	8002b04 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003608:	f7ff fa7c 	bl	8002b04 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e187      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d036      	beq.n	80036a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7ff fa60 	bl	8002b04 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003648:	f7ff fa5c 	bl	8002b04 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e167      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x200>
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7ff fa49 	bl	8002b04 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	e00e      	b.n	8003694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003676:	f7ff fa45 	bl	8002b04 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d907      	bls.n	8003694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e150      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 8003688:	40023800 	.word	0x40023800
 800368c:	42470000 	.word	0x42470000
 8003690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ea      	bne.n	8003676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b7a      	ldr	r3, [pc, #488]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b77      	ldr	r3, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d118      	bne.n	800371c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b74      	ldr	r3, [pc, #464]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7ff fa05 	bl	8002b04 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7ff fa01 	bl	8002b04 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e10c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x2ea>
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a63      	ldr	r2, [pc, #396]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x30c>
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a5e      	ldr	r2, [pc, #376]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003754:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7ff f9c6 	bl	8002b04 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7ff f9c2 	bl	8002b04 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0cb      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ee      	beq.n	800377c <HAL_RCC_OscConfig+0x334>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7ff f9b0 	bl	8002b04 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7ff f9ac 	bl	8002b04 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0b5      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037be:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a1 	beq.w	8003928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d05c      	beq.n	80038ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d141      	bne.n	800387e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f980 	bl	8002b04 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7ff f97c 	bl	8002b04 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e087      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	491b      	ldr	r1, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7ff f955 	bl	8002b04 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385e:	f7ff f951 	bl	8002b04 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e05c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x416>
 800387c:	e054      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7ff f93e 	bl	8002b04 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388c:	f7ff f93a 	bl	8002b04 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e045      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x444>
 80038aa:	e03d      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e038      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4ec>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d028      	beq.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d121      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11a      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0cc      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d90c      	bls.n	8003974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800398c:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	494d      	ldr	r1, [pc, #308]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d044      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d119      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e067      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4934      	ldr	r1, [pc, #208]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a28:	f7ff f86c 	bl	8002b04 <HAL_GetTick>
 8003a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a30:	f7ff f868 	bl	8002b04 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e04f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 020c 	and.w	r2, r3, #12
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d1eb      	bne.n	8003a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d20c      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4916      	ldr	r1, [pc, #88]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	490e      	ldr	r1, [pc, #56]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003abe:	f000 f821 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe ffcc 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023c00 	.word	0x40023c00
 8003af4:	40023800 	.word	0x40023800
 8003af8:	08010ac0 	.word	0x08010ac0
 8003afc:	20000084 	.word	0x20000084
 8003b00:	20000088 	.word	0x20000088

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b090      	sub	sp, #64	; 0x40
 8003b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b14:	2300      	movs	r3, #0
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d00d      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	f200 80a1 	bhi.w	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b36:	e09b      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b3c:	e09b      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b42:	e098      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4e:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d028      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	2200      	movs	r2, #0
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	627a      	str	r2, [r7, #36]	; 0x24
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b70:	fb03 f201 	mul.w	r2, r3, r1
 8003b74:	2300      	movs	r3, #0
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b84:	460a      	mov	r2, r1
 8003b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	2200      	movs	r2, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9e:	f7fc fb87 	bl	80002b0 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	e053      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	617a      	str	r2, [r7, #20]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bbe:	f04f 0b00 	mov.w	fp, #0
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd4:	0150      	lsls	r0, r2, #5
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	ebb2 080a 	subs.w	r8, r2, sl
 8003bde:	eb63 090b 	sbc.w	r9, r3, fp
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	00eb      	lsls	r3, r5, #3
 8003c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0c:	00e2      	lsls	r2, r4, #3
 8003c0e:	4614      	mov	r4, r2
 8003c10:	461d      	mov	r5, r3
 8003c12:	eb14 030a 	adds.w	r3, r4, sl
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	eb45 030b 	adc.w	r3, r5, fp
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	028b      	lsls	r3, r1, #10
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c34:	4621      	mov	r1, r4
 8003c36:	028a      	lsls	r2, r1, #10
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	60fa      	str	r2, [r7, #12]
 8003c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c48:	f7fc fb32 	bl	80002b0 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3740      	adds	r7, #64	; 0x40
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	017d7840 	.word	0x017d7840

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000084 	.word	0x20000084

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08010ad0 	.word	0x08010ad0

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffdc 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0b5b      	lsrs	r3, r3, #13
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08010ad0 	.word	0x08010ad0

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07b      	b.n	8003e02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	e005      	b.n	8003d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fc00 	bl	8002550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0104 	and.w	r1, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0210 	and.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08c      	sub	sp, #48	; 0x30
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x26>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e18a      	b.n	8004146 <HAL_SPI_TransmitReceive+0x33c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e38:	f7fe fe64 	bl	8002b04 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d00f      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x70>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e60:	d107      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x68>
 8003e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d003      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e78:	e15b      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x82>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x82>
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e92:	e14e      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d003      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	887a      	ldrh	r2, [r7, #2]
 8003ebe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d178      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x10a>
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d166      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	e053      	b.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11b      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d113      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d119      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x1b8>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d014      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fc2:	f7fe fd9f 	bl	8002b04 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d807      	bhi.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d003      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fe0:	e0a7      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1a6      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x130>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1a1      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x130>
 8003ff6:	e07c      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1fc>
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d16b      	bne.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800402c:	e057      	b.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11c      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d114      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d119      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2ae>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040b4:	2301      	movs	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040b8:	f7fe fd24 	bl	8002b04 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d803      	bhi.n	80040d0 <HAL_SPI_TransmitReceive+0x2c6>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d102      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x2cc>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040dc:	e029      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1a2      	bne.n	800402e <HAL_SPI_TransmitReceive+0x224>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19d      	bne.n	800402e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8b2 	bl	8004260 <SPI_EndRxTxTransaction>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800410e:	e010      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	e000      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004130:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004146:	4618      	mov	r0, r3
 8004148:	3730      	adds	r7, #48	; 0x30
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004160:	f7fe fcd0 	bl	8002b04 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004170:	f7fe fcc8 	bl	8002b04 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e054      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d050      	beq.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004190:	f7fe fcb8 	bl	8002b04 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e017      	b.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3b01      	subs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d19b      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000084 	.word	0x20000084

08004260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0x7c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <SPI_EndRxTxTransaction+0x80>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0d5b      	lsrs	r3, r3, #21
 8004278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428a:	d112      	bne.n	80042b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff5a 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d0f2      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x52>
 80042cc:	e000      	b.n	80042d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80042ce:	bf00      	nop
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000084 	.word	0x20000084
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe f968 	bl	80025e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fce4 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e041      	b.n	8004418 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f839 	bl	8004420 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fc95 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_TIM_OC_Start_IT+0x28>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e022      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d109      	bne.n	8004476 <HAL_TIM_OC_Start_IT+0x42>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e015      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d109      	bne.n	8004490 <HAL_TIM_OC_Start_IT+0x5c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e008      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0b3      	b.n	8004612 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_OC_Start_IT+0x86>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d104      	bne.n	80044ca <HAL_TIM_OC_Start_IT+0x96>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d104      	bne.n	80044da <HAL_TIM_OC_Start_IT+0xa6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d841      	bhi.n	800456c <HAL_TIM_OC_Start_IT+0x138>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_TIM_OC_Start_IT+0xbc>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004525 	.word	0x08004525
 80044f4:	0800456d 	.word	0x0800456d
 80044f8:	0800456d 	.word	0x0800456d
 80044fc:	0800456d 	.word	0x0800456d
 8004500:	08004537 	.word	0x08004537
 8004504:	0800456d 	.word	0x0800456d
 8004508:	0800456d 	.word	0x0800456d
 800450c:	0800456d 	.word	0x0800456d
 8004510:	08004549 	.word	0x08004549
 8004514:	0800456d 	.word	0x0800456d
 8004518:	0800456d 	.word	0x0800456d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800455b 	.word	0x0800455b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0202 	orr.w	r2, r2, #2
 8004532:	60da      	str	r2, [r3, #12]
      break;
 8004534:	e01d      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0204 	orr.w	r2, r2, #4
 8004544:	60da      	str	r2, [r3, #12]
      break;
 8004546:	e014      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	60da      	str	r2, [r3, #12]
      break;
 8004558:	e00b      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0210 	orr.w	r2, r2, #16
 8004568:	60da      	str	r2, [r3, #12]
      break;
 800456a:	e002      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	bf00      	nop
  }

  if (status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d14b      	bne.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fe5b 	bl	800523c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_TIM_OC_Start_IT+0x1e8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_TIM_OC_Start_IT+0x1e8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d013      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIM_OC_Start_IT+0x1f0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_TIM_OC_Start_IT+0x1f4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIM_OC_Start_IT+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d111      	bne.n	8004600 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d010      	beq.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	e007      	b.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d841      	bhi.n	80046c8 <HAL_TIM_OC_Stop_IT+0x98>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046c9 	.word	0x080046c9
 8004658:	080046c9 	.word	0x080046c9
 800465c:	08004693 	.word	0x08004693
 8004660:	080046c9 	.word	0x080046c9
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c9 	.word	0x080046c9
 800466c:	080046a5 	.word	0x080046a5
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046c9 	.word	0x080046c9
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046b7 	.word	0x080046b7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0202 	bic.w	r2, r2, #2
 800468e:	60da      	str	r2, [r3, #12]
      break;
 8004690:	e01d      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0204 	bic.w	r2, r2, #4
 80046a0:	60da      	str	r2, [r3, #12]
      break;
 80046a2:	e014      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0208 	bic.w	r2, r2, #8
 80046b2:	60da      	str	r2, [r3, #12]
      break;
 80046b4:	e00b      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0210 	bic.w	r2, r2, #16
 80046c4:	60da      	str	r2, [r3, #12]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d157      	bne.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fdad 	bl	800523c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <HAL_TIM_OC_Stop_IT+0x160>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d117      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	f240 4344 	movw	r3, #1092	; 0x444
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	f241 1311 	movw	r3, #4369	; 0x1111
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <HAL_TIM_OC_Stop_IT+0x11c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	f240 4344 	movw	r3, #1092	; 0x444
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_TIM_OC_Stop_IT+0x11c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_TIM_OC_Stop_IT+0x12c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475a:	e013      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d104      	bne.n	800476c <HAL_TIM_OC_Stop_IT+0x13c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476a:	e00b      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d104      	bne.n	800477c <HAL_TIM_OC_Stop_IT+0x14c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477a:	e003      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000

08004794 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e041      	b.n	800482c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f839 	bl	8004834 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f000 fa8b 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa11 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fd fd34 	bl	8002300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa14 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9e7 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fd0a 	bl	8002300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9ea 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9bd 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fce0 	bl	8002300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9c0 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f993 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fcb6 	bl	8002300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f996 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f969 	bl	8004c9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fcc0 	bl	8005378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f95b 	bl	8004cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0220 	mvn.w	r2, #32
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc8a 	bl	8005364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e048      	b.n	8004b08 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d839      	bhi.n	8004af8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004acf 	.word	0x08004acf
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f992 	bl	8004df0 <TIM_OC1_SetConfig>
      break;
 8004acc:	e017      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9f1 	bl	8004ebc <TIM_OC2_SetConfig>
      break;
 8004ada:	e010      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa56 	bl	8004f94 <TIM_OC3_SetConfig>
      break;
 8004ae8:	e009      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fab9 	bl	8005068 <TIM_OC4_SetConfig>
      break;
 8004af6:	e002      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
      break;
 8004afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 fb19 	bl	80051fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 fb02 	bl	80051fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa76 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	; 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 facf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 fa95 	bl	8005166 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	; 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fabf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fa56 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 faaf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 faa6 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <TIM_Base_SetConfig+0xf4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <TIM_Base_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <TIM_Base_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40010000 	.word	0x40010000

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <TIM_OC2_SetConfig+0xd4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <TIM_OC2_SetConfig+0xd4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000

08004f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <TIM_OC3_SetConfig+0xd0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10d      	bne.n	800500e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC3_SetConfig+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <TIM_OC4_SetConfig+0x9c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d109      	bne.n	80050dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000

08005108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 030a 	bic.w	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0210 	bic.w	r2, r3, #16
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f043 0307 	orr.w	r3, r3, #7
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	021a      	lsls	r2, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	431a      	orrs	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2201      	movs	r2, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e050      	b.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d013      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a16      	ldr	r2, [pc, #88]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10c      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000

08005364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e03f      	b.n	800541e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd f93a 	bl	800262c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fe49 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e021      	b.n	800547c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fd f977 	bl	8002744 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d17c      	bne.n	800559e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_UART_Transmit+0x2c>
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e075      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x3e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e06e      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2221      	movs	r2, #33	; 0x21
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d8:	f7fd fb14 	bl	8002b04 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d108      	bne.n	8005506 <HAL_UART_Transmit+0x82>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e003      	b.n	800550e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005516:	e02a      	b.n	800556e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fb5a 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e036      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e007      	b.n	8005560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1cf      	bne.n	8005518 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fb2a 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e006      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d130      	bne.n	8005624 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit_IT+0x26>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e029      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Transmit_IT+0x38>
 80055dc:	2302      	movs	r3, #2
 80055de:	e022      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2221      	movs	r2, #33	; 0x21
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800561e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b20      	cmp	r3, #32
 800564a:	d11d      	bne.n	8005688 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_UART_Receive_IT+0x26>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e016      	b.n	800568a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_UART_Receive_IT+0x38>
 8005666:	2302      	movs	r3, #2
 8005668:	e00f      	b.n	800568a <HAL_UART_Receive_IT+0x58>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	461a      	mov	r2, r3
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb1a 	bl	8005cb8 <UART_Start_Receive_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	e000      	b.n	800568a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b0ba      	sub	sp, #232	; 0xe8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fbfd 	bl	8005ef2 <UART_Receive_IT>
      return;
 80056f8:	e256      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80de 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80d1 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0201 	orr.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
 800574e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 81ed 	beq.w	8005b9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb88 	bl	8005ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_UART_IRQHandler+0x17a>
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04f      	beq.n	80058ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa90 	bl	8005d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d141      	bne.n	80058a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800584e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800585a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d9      	bne.n	8005822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4a7d      	ldr	r2, [pc, #500]	; (8005a70 <HAL_UART_IRQHandler+0x3dc>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fb21 	bl	8002eca <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e00e      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fc fc92 	bl	80021c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00a      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fc8e 	bl	80021c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e006      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fc8a 	bl	80021c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058ba:	e170      	b.n	8005b9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	bf00      	nop
    return;
 80058be:	e16e      	b.n	8005b9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 814a 	bne.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8143 	beq.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 813c 	beq.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	f040 80b4 	bne.w	8005a74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8140 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800592a:	429a      	cmp	r2, r3
 800592c:	f080 8139 	bcs.w	8005ba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	f000 8088 	beq.w	8005a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800595c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800597e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800598a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d9      	bne.n	8005946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e1      	bne.n	8005992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fd f9ca 	bl	8002dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8ac 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a6c:	e099      	b.n	8005ba2 <HAL_UART_IRQHandler+0x50e>
 8005a6e:	bf00      	nop
 8005a70:	08005dfb 	.word	0x08005dfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808b 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8086 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005abe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e3      	bne.n	8005a9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005af6:	633a      	str	r2, [r7, #48]	; 0x30
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b3c:	61fa      	str	r2, [r7, #28]
 8005b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f834 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b5c:	e023      	b.n	8005ba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <HAL_UART_IRQHandler+0x4ea>
 8005b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f953 	bl	8005e22 <UART_Transmit_IT>
    return;
 8005b7c:	e014      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x514>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f993 	bl	8005ec2 <UART_EndTransmit_IT>
    return;
 8005b9c:	e004      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
    return;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ba6:	bf00      	nop
  }
}
 8005ba8:	37e8      	adds	r7, #232	; 0xe8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop

08005bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b090      	sub	sp, #64	; 0x40
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bec:	e050      	b.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d04c      	beq.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfc:	f7fc ff82 	bl	8002b04 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d241      	bcs.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c60:	623a      	str	r2, [r7, #32]
 8005c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69f9      	ldr	r1, [r7, #28]
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e00f      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d09f      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3740      	adds	r7, #64	; 0x40
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2222      	movs	r2, #34	; 0x22
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0220 	orr.w	r2, r2, #32
 8005d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b095      	sub	sp, #84	; 0x54
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d119      	bne.n	8005de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 0310 	bic.w	r3, r3, #16
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dcc:	61ba      	str	r2, [r7, #24]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dee:	bf00      	nop
 8005df0:	3754      	adds	r7, #84	; 0x54
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fc f9d7 	bl	80021c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b21      	cmp	r3, #33	; 0x21
 8005e34:	d13e      	bne.n	8005eb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d114      	bne.n	8005e6a <UART_Transmit_IT+0x48>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d110      	bne.n	8005e6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	621a      	str	r2, [r3, #32]
 8005e68:	e008      	b.n	8005e7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6211      	str	r1, [r2, #32]
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10f      	bne.n	8005eb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fe64 	bl	8005bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b08c      	sub	sp, #48	; 0x30
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b22      	cmp	r3, #34	; 0x22
 8005f04:	f040 80ab 	bne.w	800605e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d117      	bne.n	8005f42 <UART_Receive_IT+0x50>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d113      	bne.n	8005f42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f40:	e026      	b.n	8005f90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	d007      	beq.n	8005f66 <UART_Receive_IT+0x74>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <UART_Receive_IT+0x82>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e008      	b.n	8005f86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d15a      	bne.n	800605a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0220 	bic.w	r2, r2, #32
 8005fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d135      	bne.n	8006050 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	623a      	str	r2, [r7, #32]
 800600c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	61bb      	str	r3, [r7, #24]
   return(result);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d10a      	bne.n	8006042 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fdbb 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 800604e:	e002      	b.n	8006056 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fc f917 	bl	8002284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e002      	b.n	8006060 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3730      	adds	r7, #48	; 0x30
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c0      	sub	sp, #256	; 0x100
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	ea40 0301 	orr.w	r3, r0, r1
 8006090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	ea40 0301 	orr.w	r3, r0, r1
 80060ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	; (8006334 <UART_SetConfig+0x2cc>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <UART_SetConfig+0xa0>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8d      	ldr	r3, [pc, #564]	; (8006338 <UART_SetConfig+0x2d0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fd fde2 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 800610c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006110:	e003      	b.n	800611a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006112:	f7fd fdc9 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 8006116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006124:	f040 810c 	bne.w	8006340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	1891      	adds	r1, r2, r2
 8006140:	65b9      	str	r1, [r7, #88]	; 0x58
 8006142:	415b      	adcs	r3, r3
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800614a:	4621      	mov	r1, r4
 800614c:	eb12 0801 	adds.w	r8, r2, r1
 8006150:	4629      	mov	r1, r5
 8006152:	eb43 0901 	adc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006178:	462b      	mov	r3, r5
 800617a:	eb49 0303 	adc.w	r3, r9, r3
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006196:	460b      	mov	r3, r1
 8006198:	18db      	adds	r3, r3, r3
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
 800619c:	4613      	mov	r3, r2
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	657b      	str	r3, [r7, #84]	; 0x54
 80061a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061ac:	f7fa f880 	bl	80002b0 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b61      	ldr	r3, [pc, #388]	; (800633c <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d8:	415b      	adcs	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e0:	4641      	mov	r1, r8
 80061e2:	eb12 0a01 	adds.w	sl, r2, r1
 80061e6:	4649      	mov	r1, r9
 80061e8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	4692      	mov	sl, r2
 8006202:	469b      	mov	fp, r3
 8006204:	4643      	mov	r3, r8
 8006206:	eb1a 0303 	adds.w	r3, sl, r3
 800620a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800620e:	464b      	mov	r3, r9
 8006210:	eb4b 0303 	adc.w	r3, fp, r3
 8006214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	643b      	str	r3, [r7, #64]	; 0x40
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
 800623a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800623e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006242:	f7fa f835 	bl	80002b0 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <UART_SetConfig+0x2d4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	; 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <UART_SetConfig+0x2d4>)
 8006264:	fba3 2302 	umull	r2, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006270:	441c      	add	r4, r3
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800627c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	; 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6339      	str	r1, [r7, #48]	; 0x30
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062fe:	f7f9 ffd7 	bl	80002b0 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <UART_SetConfig+0x2d4>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <UART_SetConfig+0x2d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4422      	add	r2, r4
 800632e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006330:	e106      	b.n	8006540 <UART_SetConfig+0x4d8>
 8006332:	bf00      	nop
 8006334:	40011000 	.word	0x40011000
 8006338:	40011400 	.word	0x40011400
 800633c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800634e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	1891      	adds	r1, r2, r2
 8006358:	6239      	str	r1, [r7, #32]
 800635a:	415b      	adcs	r3, r3
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006362:	4641      	mov	r1, r8
 8006364:	1854      	adds	r4, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0501 	adc.w	r5, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006388:	464b      	mov	r3, r9
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ae:	4629      	mov	r1, r5
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b8:	4621      	mov	r1, r4
 80063ba:	008a      	lsls	r2, r1, #2
 80063bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c0:	f7f9 ff76 	bl	80002b0 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b60      	ldr	r3, [pc, #384]	; (800654c <UART_SetConfig+0x4e4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006428:	464b      	mov	r3, r9
 800642a:	460a      	mov	r2, r1
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	67bb      	str	r3, [r7, #120]	; 0x78
 800643e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800645e:	f7f9 ff27 	bl	80002b0 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <UART_SetConfig+0x4e4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	; 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	3332      	adds	r3, #50	; 0x32
 800647c:	4a33      	ldr	r2, [pc, #204]	; (800654c <UART_SetConfig+0x4e4>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006488:	441c      	add	r4, r3
 800648a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648e:	2200      	movs	r2, #0
 8006490:	673b      	str	r3, [r7, #112]	; 0x70
 8006492:	677a      	str	r2, [r7, #116]	; 0x74
 8006494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064da:	464b      	mov	r3, r9
 80064dc:	460a      	mov	r2, r1
 80064de:	eb42 0303 	adc.w	r3, r2, r3
 80064e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	663b      	str	r3, [r7, #96]	; 0x60
 80064ee:	667a      	str	r2, [r7, #100]	; 0x64
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800650e:	f7f9 fecf 	bl	80002b0 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x4e4>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	; 0x32
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <UART_SetConfig+0x4e4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4422      	add	r2, r4
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	889b      	ldrh	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	4619      	mov	r1, r3
 8006564:	f7fc ff3c 	bl	80033e0 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006568:	2115      	movs	r1, #21
 800656a:	480b      	ldr	r0, [pc, #44]	; (8006598 <HW_RESET+0x48>)
 800656c:	f7fa ffc6 	bl	80014fc <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006574:	f7fc fad2 	bl	8002b1c <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006578:	210e      	movs	r1, #14
 800657a:	4808      	ldr	r0, [pc, #32]	; (800659c <HW_RESET+0x4c>)
 800657c:	f7fa ffbe 	bl	80014fc <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	889b      	ldrh	r3, [r3, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	4619      	mov	r1, r3
 800658c:	f7fc ff28 	bl	80033e0 <HAL_GPIO_WritePin>
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	080107a8 	.word	0x080107a8
 800659c:	080107c0 	.word	0x080107c0

080065a0 <NOP>:
void NOP(struct WIFI *a)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <MUX>:
void MUX(struct WIFI *a)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2204      	movs	r2, #4
 8006630:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2205      	movs	r2, #5
 800665c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2206      	movs	r2, #6
 80066b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2208      	movs	r2, #8
 80066e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2209      	movs	r2, #9
 800670c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2207      	movs	r2, #7
 8006738:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80068f2:	af06      	add	r7, sp, #24
 80068f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fc:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800690a:	2300      	movs	r3, #0
 800690c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 800691c:	2320      	movs	r3, #32
 800691e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006922:	2322      	movs	r3, #34	; 0x22
 8006924:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006928:	4b71      	ldr	r3, [pc, #452]	; (8006af0 <AT_ESP8266_ND+0x204>)
 800692a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800692e:	4a71      	ldr	r2, [pc, #452]	; (8006af4 <AT_ESP8266_ND+0x208>)
 8006930:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	4611      	mov	r1, r2
 8006938:	8019      	strh	r1, [r3, #0]
 800693a:	3302      	adds	r3, #2
 800693c:	0c12      	lsrs	r2, r2, #16
 800693e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006940:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006944:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006948:	f640 230d 	movw	r3, #2573	; 0xa0d
 800694c:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 800695c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 800696c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800697a:	4618      	mov	r0, r3
 800697c:	f7f9 fc3a 	bl	80001f4 <strlen>
 8006980:	4603      	mov	r3, r0
 8006982:	461a      	mov	r2, r3
 8006984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006992:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006996:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7f9 fc1f 	bl	80001f4 <strlen>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80069c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2206      	movs	r2, #6
 80069d4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80069d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80069e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80069f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a10:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a14:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a1e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a22:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a26:	6809      	ldr	r1, [r1, #0]
 8006a28:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a2c:	2600      	movs	r6, #0
 8006a2e:	9604      	str	r6, [sp, #16]
 8006a30:	9103      	str	r1, [sp, #12]
 8006a32:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a36:	9102      	str	r1, [sp, #8]
 8006a38:	9201      	str	r2, [sp, #4]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	4a2e      	ldr	r2, [pc, #184]	; (8006af8 <AT_ESP8266_ND+0x20c>)
 8006a40:	4621      	mov	r1, r4
 8006a42:	f007 fe57 	bl	800e6f4 <FT_String_ND>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	f040 812a 	bne.w	8006ca2 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2206      	movs	r2, #6
 8006a5a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006a5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d145      	bne.n	8006afc <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006aa8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006aac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ab6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006aba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006abe:	6809      	ldr	r1, [r1, #0]
 8006ac0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ac4:	2604      	movs	r6, #4
 8006ac6:	9604      	str	r6, [sp, #16]
 8006ac8:	9103      	str	r1, [sp, #12]
 8006aca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ace:	9102      	str	r1, [sp, #8]
 8006ad0:	9201      	str	r2, [sp, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <AT_ESP8266_ND+0x20c>)
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f007 fe0b 	bl	800e6f4 <FT_String_ND>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006aee:	e044      	b.n	8006b7a <AT_ESP8266_ND+0x28e>
 8006af0:	00222c22 	.word	0x00222c22
 8006af4:	080109a8 	.word	0x080109a8
 8006af8:	080107d0 	.word	0x080107d0
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b34:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b38:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b42:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b46:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b4a:	6809      	ldr	r1, [r1, #0]
 8006b4c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b50:	2605      	movs	r6, #5
 8006b52:	9604      	str	r6, [sp, #16]
 8006b54:	9103      	str	r1, [sp, #12]
 8006b56:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b5a:	9102      	str	r1, [sp, #8]
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	462b      	mov	r3, r5
 8006b62:	4ac1      	ldr	r2, [pc, #772]	; (8006e68 <AT_ESP8266_ND+0x57c>)
 8006b64:	4621      	mov	r1, r4
 8006b66:	f007 fdc5 	bl	800e6f4 <FT_String_ND>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d15a      	bne.n	8006c42 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2263      	movs	r2, #99	; 0x63
 8006b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006be2:	2341      	movs	r3, #65	; 0x41
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	f008 f8ea 	bl	800edc0 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006bfa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c08:	2341      	movs	r3, #65	; 0x41
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2205      	movs	r2, #5
 8006c10:	f008 f8d6 	bl	800edc0 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d126      	bne.n	8006ca2 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2237      	movs	r2, #55	; 0x37
 8006c60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2204      	movs	r2, #4
 8006cae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006cdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006cea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cf8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006cfc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d00:	6809      	ldr	r1, [r1, #0]
 8006d02:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d06:	2600      	movs	r6, #0
 8006d08:	9604      	str	r6, [sp, #16]
 8006d0a:	9103      	str	r1, [sp, #12]
 8006d0c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d10:	9102      	str	r1, [sp, #8]
 8006d12:	9201      	str	r2, [sp, #4]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	462b      	mov	r3, r5
 8006d18:	4a54      	ldr	r2, [pc, #336]	; (8006e6c <AT_ESP8266_ND+0x580>)
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	f007 fcea 	bl	800e6f4 <FT_String_ND>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	f040 8334 	bne.w	8007390 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d76:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d7a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d84:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d88:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d8c:	6809      	ldr	r1, [r1, #0]
 8006d8e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d92:	2600      	movs	r6, #0
 8006d94:	9604      	str	r6, [sp, #16]
 8006d96:	9103      	str	r1, [sp, #12]
 8006d98:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d9c:	9102      	str	r1, [sp, #8]
 8006d9e:	9201      	str	r2, [sp, #4]
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462b      	mov	r3, r5
 8006da4:	4a32      	ldr	r2, [pc, #200]	; (8006e70 <AT_ESP8266_ND+0x584>)
 8006da6:	4621      	mov	r1, r4
 8006da8:	f007 fca4 	bl	800e6f4 <FT_String_ND>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d113      	bne.n	8006dda <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006db2:	2313      	movs	r3, #19
 8006db4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006db8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006dd6:	f001 b981 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2208      	movs	r2, #8
 8006de6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e22:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e26:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e30:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e34:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e38:	6809      	ldr	r1, [r1, #0]
 8006e3a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e3e:	2600      	movs	r6, #0
 8006e40:	9604      	str	r6, [sp, #16]
 8006e42:	9103      	str	r1, [sp, #12]
 8006e44:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e48:	9102      	str	r1, [sp, #8]
 8006e4a:	9201      	str	r2, [sp, #4]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	462b      	mov	r3, r5
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <AT_ESP8266_ND+0x588>)
 8006e52:	4621      	mov	r1, r4
 8006e54:	f007 fc4e 	bl	800e6f4 <FT_String_ND>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d10c      	bne.n	8006e78 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006e5e:	230d      	movs	r3, #13
 8006e60:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e64:	f001 b93a 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
 8006e68:	080107d0 	.word	0x080107d0
 8006e6c:	080107d8 	.word	0x080107d8
 8006e70:	080107e0 	.word	0x080107e0
 8006e74:	080107e8 	.word	0x080107e8
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	220a      	movs	r2, #10
 8006e84:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ec0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ec4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ece:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ed2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ed6:	6809      	ldr	r1, [r1, #0]
 8006ed8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006edc:	2600      	movs	r6, #0
 8006ede:	9604      	str	r6, [sp, #16]
 8006ee0:	9103      	str	r1, [sp, #12]
 8006ee2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ee6:	9102      	str	r1, [sp, #8]
 8006ee8:	9201      	str	r2, [sp, #4]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	462b      	mov	r3, r5
 8006eee:	4ab7      	ldr	r2, [pc, #732]	; (80071cc <AT_ESP8266_ND+0x8e0>)
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f007 fbff 	bl	800e6f4 <FT_String_ND>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d104      	bne.n	8006f06 <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006efc:	231c      	movs	r3, #28
 8006efe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f02:	f001 b8eb 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	220f      	movs	r2, #15
 8006f12:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f4e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f52:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f5c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f60:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f64:	6809      	ldr	r1, [r1, #0]
 8006f66:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	9604      	str	r6, [sp, #16]
 8006f6e:	9103      	str	r1, [sp, #12]
 8006f70:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f74:	9102      	str	r1, [sp, #8]
 8006f76:	9201      	str	r2, [sp, #4]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	4a94      	ldr	r2, [pc, #592]	; (80071d0 <AT_ESP8266_ND+0x8e4>)
 8006f7e:	4621      	mov	r1, r4
 8006f80:	f007 fbb8 	bl	800e6f4 <FT_String_ND>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d104      	bne.n	8006f94 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006f8a:	2317      	movs	r3, #23
 8006f8c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f90:	f001 b8a4 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fdc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fe0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ff2:	6809      	ldr	r1, [r1, #0]
 8006ff4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	9604      	str	r6, [sp, #16]
 8006ffc:	9103      	str	r1, [sp, #12]
 8006ffe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007002:	9102      	str	r1, [sp, #8]
 8007004:	9201      	str	r2, [sp, #4]
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	462b      	mov	r3, r5
 800700a:	4a72      	ldr	r2, [pc, #456]	; (80071d4 <AT_ESP8266_ND+0x8e8>)
 800700c:	4621      	mov	r1, r4
 800700e:	f007 fb71 	bl	800e6f4 <FT_String_ND>
 8007012:	4603      	mov	r3, r0
 8007014:	2b01      	cmp	r3, #1
 8007016:	d104      	bne.n	8007022 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8007018:	2314      	movs	r3, #20
 800701a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800701e:	f001 b85d 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007026:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	220c      	movs	r2, #12
 800702e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007032:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007036:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800704e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007052:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800705c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800706a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800706e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007078:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800707c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007080:	6809      	ldr	r1, [r1, #0]
 8007082:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007086:	2600      	movs	r6, #0
 8007088:	9604      	str	r6, [sp, #16]
 800708a:	9103      	str	r1, [sp, #12]
 800708c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007090:	9102      	str	r1, [sp, #8]
 8007092:	9201      	str	r2, [sp, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	462b      	mov	r3, r5
 8007098:	4a4f      	ldr	r2, [pc, #316]	; (80071d8 <AT_ESP8266_ND+0x8ec>)
 800709a:	4621      	mov	r1, r4
 800709c:	f007 fb2a 	bl	800e6f4 <FT_String_ND>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d104      	bne.n	80070b0 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 80070a6:	2315      	movs	r3, #21
 80070a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070ac:	f001 b816 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 80070b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	220b      	movs	r2, #11
 80070bc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80070c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070f8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070fc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007106:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800710a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800710e:	6809      	ldr	r1, [r1, #0]
 8007110:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007114:	2600      	movs	r6, #0
 8007116:	9604      	str	r6, [sp, #16]
 8007118:	9103      	str	r1, [sp, #12]
 800711a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800711e:	9102      	str	r1, [sp, #8]
 8007120:	9201      	str	r2, [sp, #4]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	462b      	mov	r3, r5
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <AT_ESP8266_ND+0x8f0>)
 8007128:	4621      	mov	r1, r4
 800712a:	f007 fae3 	bl	800e6f4 <FT_String_ND>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d104      	bne.n	800713e <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 8007134:	2309      	movs	r3, #9
 8007136:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800713a:	f000 bfcf 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 800713e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007142:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	220b      	movs	r2, #11
 800714a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800714e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800715c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800716a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800717c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007186:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800718a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007194:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007198:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800719c:	6809      	ldr	r1, [r1, #0]
 800719e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071a2:	2600      	movs	r6, #0
 80071a4:	9604      	str	r6, [sp, #16]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ac:	9102      	str	r1, [sp, #8]
 80071ae:	9201      	str	r2, [sp, #4]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	462b      	mov	r3, r5
 80071b4:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <AT_ESP8266_ND+0x8f4>)
 80071b6:	4621      	mov	r1, r4
 80071b8:	f007 fa9c 	bl	800e6f4 <FT_String_ND>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d110      	bne.n	80071e4 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 80071c2:	2307      	movs	r3, #7
 80071c4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071c8:	f000 bf88 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
 80071cc:	080107f4 	.word	0x080107f4
 80071d0:	08010800 	.word	0x08010800
 80071d4:	08010810 	.word	0x08010810
 80071d8:	08010814 	.word	0x08010814
 80071dc:	08010824 	.word	0x08010824
 80071e0:	08010830 	.word	0x08010830
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 80071e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	220b      	movs	r2, #11
 80071f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80071f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800721e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800722c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007230:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007234:	6812      	ldr	r2, [r2, #0]
 8007236:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800723a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800723e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007242:	6809      	ldr	r1, [r1, #0]
 8007244:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007248:	2600      	movs	r6, #0
 800724a:	9604      	str	r6, [sp, #16]
 800724c:	9103      	str	r1, [sp, #12]
 800724e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007252:	9102      	str	r1, [sp, #8]
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	462b      	mov	r3, r5
 800725a:	4ab7      	ldr	r2, [pc, #732]	; (8007538 <AT_ESP8266_ND+0xc4c>)
 800725c:	4621      	mov	r1, r4
 800725e:	f007 fa49 	bl	800e6f4 <FT_String_ND>
 8007262:	4603      	mov	r3, r0
 8007264:	2b01      	cmp	r3, #1
 8007266:	d104      	bne.n	8007272 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007268:	2308      	movs	r3, #8
 800726a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800726e:	f000 bf35 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8007272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	220a      	movs	r2, #10
 800727e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007282:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007286:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800729e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072ba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072be:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072c8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072cc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072d0:	6809      	ldr	r1, [r1, #0]
 80072d2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072d6:	2600      	movs	r6, #0
 80072d8:	9604      	str	r6, [sp, #16]
 80072da:	9103      	str	r1, [sp, #12]
 80072dc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072e0:	9102      	str	r1, [sp, #8]
 80072e2:	9201      	str	r2, [sp, #4]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	462b      	mov	r3, r5
 80072e8:	4a94      	ldr	r2, [pc, #592]	; (800753c <AT_ESP8266_ND+0xc50>)
 80072ea:	4621      	mov	r1, r4
 80072ec:	f007 fa02 	bl	800e6f4 <FT_String_ND>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d104      	bne.n	8007300 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 80072f6:	231b      	movs	r3, #27
 80072f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072fc:	f000 beee 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2207      	movs	r2, #7
 800730c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007310:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007314:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800731e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800732c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800733a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007348:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800734c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007356:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800735a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800735e:	6809      	ldr	r1, [r1, #0]
 8007360:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007364:	2600      	movs	r6, #0
 8007366:	9604      	str	r6, [sp, #16]
 8007368:	9103      	str	r1, [sp, #12]
 800736a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800736e:	9102      	str	r1, [sp, #8]
 8007370:	9201      	str	r2, [sp, #4]
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	462b      	mov	r3, r5
 8007376:	4a72      	ldr	r2, [pc, #456]	; (8007540 <AT_ESP8266_ND+0xc54>)
 8007378:	4621      	mov	r1, r4
 800737a:	f007 f9bb 	bl	800e6f4 <FT_String_ND>
 800737e:	4603      	mov	r3, r0
 8007380:	2b01      	cmp	r3, #1
 8007382:	f040 86ab 	bne.w	80080dc <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 8007386:	230f      	movs	r3, #15
 8007388:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800738c:	f000 bea6 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2207      	movs	r2, #7
 800739c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80073a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073d8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073dc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073e0:	6812      	ldr	r2, [r2, #0]
 80073e2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073e6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073ea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073ee:	6809      	ldr	r1, [r1, #0]
 80073f0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073f4:	2600      	movs	r6, #0
 80073f6:	9604      	str	r6, [sp, #16]
 80073f8:	9103      	str	r1, [sp, #12]
 80073fa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073fe:	9102      	str	r1, [sp, #8]
 8007400:	9201      	str	r2, [sp, #4]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	462b      	mov	r3, r5
 8007406:	4a4f      	ldr	r2, [pc, #316]	; (8007544 <AT_ESP8266_ND+0xc58>)
 8007408:	4621      	mov	r1, r4
 800740a:	f007 f973 	bl	800e6f4 <FT_String_ND>
 800740e:	4603      	mov	r3, r0
 8007410:	2b01      	cmp	r3, #1
 8007412:	f040 8326 	bne.w	8007a62 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 8007416:	2302      	movs	r3, #2
 8007418:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800741c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007420:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2208      	movs	r2, #8
 8007428:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 800742c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007430:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800743a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800745a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007464:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007468:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007472:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007476:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800747a:	6809      	ldr	r1, [r1, #0]
 800747c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007480:	2600      	movs	r6, #0
 8007482:	9604      	str	r6, [sp, #16]
 8007484:	9103      	str	r1, [sp, #12]
 8007486:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800748a:	9102      	str	r1, [sp, #8]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	462b      	mov	r3, r5
 8007492:	4a2d      	ldr	r2, [pc, #180]	; (8007548 <AT_ESP8266_ND+0xc5c>)
 8007494:	4621      	mov	r1, r4
 8007496:	f007 f92d 	bl	800e6f4 <FT_String_ND>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d104      	bne.n	80074aa <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 80074a0:	2306      	movs	r3, #6
 80074a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074a6:	f000 be19 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80074aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2215      	movs	r2, #21
 80074b6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80074ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074f2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074f6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007500:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007504:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007508:	6809      	ldr	r1, [r1, #0]
 800750a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800750e:	2600      	movs	r6, #0
 8007510:	9604      	str	r6, [sp, #16]
 8007512:	9103      	str	r1, [sp, #12]
 8007514:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007518:	9102      	str	r1, [sp, #8]
 800751a:	9201      	str	r2, [sp, #4]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	462b      	mov	r3, r5
 8007520:	4a0a      	ldr	r2, [pc, #40]	; (800754c <AT_ESP8266_ND+0xc60>)
 8007522:	4621      	mov	r1, r4
 8007524:	f007 f8e6 	bl	800e6f4 <FT_String_ND>
 8007528:	4603      	mov	r3, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	d110      	bne.n	8007550 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 800752e:	230e      	movs	r3, #14
 8007530:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007534:	f000 bdd2 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
 8007538:	0801083c 	.word	0x0801083c
 800753c:	08010848 	.word	0x08010848
 8007540:	08010854 	.word	0x08010854
 8007544:	0801085c 	.word	0x0801085c
 8007548:	08010864 	.word	0x08010864
 800754c:	08010870 	.word	0x08010870
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	220c      	movs	r2, #12
 800755c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800756e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007572:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800757c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800758a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007598:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800759c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075a6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075aa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075ae:	6809      	ldr	r1, [r1, #0]
 80075b0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075b4:	2600      	movs	r6, #0
 80075b6:	9604      	str	r6, [sp, #16]
 80075b8:	9103      	str	r1, [sp, #12]
 80075ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075be:	9102      	str	r1, [sp, #8]
 80075c0:	9201      	str	r2, [sp, #4]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	462b      	mov	r3, r5
 80075c6:	4ab7      	ldr	r2, [pc, #732]	; (80078a4 <AT_ESP8266_ND+0xfb8>)
 80075c8:	4621      	mov	r1, r4
 80075ca:	f007 f893 	bl	800e6f4 <FT_String_ND>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d104      	bne.n	80075de <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 80075d4:	2316      	movs	r3, #22
 80075d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075da:	f000 bd7f 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 80075de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	220b      	movs	r2, #11
 80075ea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80075ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80075fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800760a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800760e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800761c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007626:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800762a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800762e:	6812      	ldr	r2, [r2, #0]
 8007630:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007634:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007638:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800763c:	6809      	ldr	r1, [r1, #0]
 800763e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007642:	2600      	movs	r6, #0
 8007644:	9604      	str	r6, [sp, #16]
 8007646:	9103      	str	r1, [sp, #12]
 8007648:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800764c:	9102      	str	r1, [sp, #8]
 800764e:	9201      	str	r2, [sp, #4]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	462b      	mov	r3, r5
 8007654:	4a94      	ldr	r2, [pc, #592]	; (80078a8 <AT_ESP8266_ND+0xfbc>)
 8007656:	4621      	mov	r1, r4
 8007658:	f007 f84c 	bl	800e6f4 <FT_String_ND>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d104      	bne.n	800766c <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 8007662:	231a      	movs	r3, #26
 8007664:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007668:	f000 bd38 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 800766c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007670:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2211      	movs	r2, #17
 8007678:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800767c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800768a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800768e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007698:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800769c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076b4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076b8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076c2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076c6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076ca:	6809      	ldr	r1, [r1, #0]
 80076cc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076d0:	2600      	movs	r6, #0
 80076d2:	9604      	str	r6, [sp, #16]
 80076d4:	9103      	str	r1, [sp, #12]
 80076d6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076da:	9102      	str	r1, [sp, #8]
 80076dc:	9201      	str	r2, [sp, #4]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	462b      	mov	r3, r5
 80076e2:	4a72      	ldr	r2, [pc, #456]	; (80078ac <AT_ESP8266_ND+0xfc0>)
 80076e4:	4621      	mov	r1, r4
 80076e6:	f007 f805 	bl	800e6f4 <FT_String_ND>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d104      	bne.n	80076fa <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 80076f0:	2311      	movs	r3, #17
 80076f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076f6:	f000 bcf1 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80076fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	220a      	movs	r2, #10
 8007706:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800770a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007742:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007746:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007750:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007754:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007758:	6809      	ldr	r1, [r1, #0]
 800775a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800775e:	2600      	movs	r6, #0
 8007760:	9604      	str	r6, [sp, #16]
 8007762:	9103      	str	r1, [sp, #12]
 8007764:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007768:	9102      	str	r1, [sp, #8]
 800776a:	9201      	str	r2, [sp, #4]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462b      	mov	r3, r5
 8007770:	4a4f      	ldr	r2, [pc, #316]	; (80078b0 <AT_ESP8266_ND+0xfc4>)
 8007772:	4621      	mov	r1, r4
 8007774:	f006 ffbe 	bl	800e6f4 <FT_String_ND>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d104      	bne.n	8007788 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 800777e:	231d      	movs	r3, #29
 8007780:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007784:	f000 bcaa 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	220b      	movs	r2, #11
 8007794:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077ec:	2600      	movs	r6, #0
 80077ee:	9604      	str	r6, [sp, #16]
 80077f0:	9103      	str	r1, [sp, #12]
 80077f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077f6:	9102      	str	r1, [sp, #8]
 80077f8:	9201      	str	r2, [sp, #4]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462b      	mov	r3, r5
 80077fe:	4a2d      	ldr	r2, [pc, #180]	; (80078b4 <AT_ESP8266_ND+0xfc8>)
 8007800:	4621      	mov	r1, r4
 8007802:	f006 ff77 	bl	800e6f4 <FT_String_ND>
 8007806:	4603      	mov	r3, r0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d104      	bne.n	8007816 <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 800780c:	231e      	movs	r3, #30
 800780e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007812:	f000 bc63 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	220b      	movs	r2, #11
 8007822:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007826:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800782a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007834:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007838:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007842:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007846:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007850:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007854:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800785e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007862:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800786c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007870:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007874:	6809      	ldr	r1, [r1, #0]
 8007876:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800787a:	2600      	movs	r6, #0
 800787c:	9604      	str	r6, [sp, #16]
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007884:	9102      	str	r1, [sp, #8]
 8007886:	9201      	str	r2, [sp, #4]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	462b      	mov	r3, r5
 800788c:	4a0a      	ldr	r2, [pc, #40]	; (80078b8 <AT_ESP8266_ND+0xfcc>)
 800788e:	4621      	mov	r1, r4
 8007890:	f006 ff30 	bl	800e6f4 <FT_String_ND>
 8007894:	4603      	mov	r3, r0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d110      	bne.n	80078bc <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 800789a:	231f      	movs	r3, #31
 800789c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078a0:	f000 bc1c 	b.w	80080dc <AT_ESP8266_ND+0x17f0>
 80078a4:	08010814 	.word	0x08010814
 80078a8:	08010824 	.word	0x08010824
 80078ac:	08010888 	.word	0x08010888
 80078b0:	080107f4 	.word	0x080107f4
 80078b4:	08010830 	.word	0x08010830
 80078b8:	0801083c 	.word	0x0801083c
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 80078bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2208      	movs	r2, #8
 80078c8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80078cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007904:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007908:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007912:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007916:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800791a:	6809      	ldr	r1, [r1, #0]
 800791c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007920:	2600      	movs	r6, #0
 8007922:	9604      	str	r6, [sp, #16]
 8007924:	9103      	str	r1, [sp, #12]
 8007926:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800792a:	9102      	str	r1, [sp, #8]
 800792c:	9201      	str	r2, [sp, #4]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	462b      	mov	r3, r5
 8007932:	4ac4      	ldr	r2, [pc, #784]	; (8007c44 <AT_ESP8266_ND+0x1358>)
 8007934:	4621      	mov	r1, r4
 8007936:	f006 fedd 	bl	800e6f4 <FT_String_ND>
 800793a:	4603      	mov	r3, r0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d103      	bne.n	8007948 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007940:	2320      	movs	r3, #32
 8007942:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007946:	e3c9      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007948:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800794c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	220a      	movs	r2, #10
 8007954:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800795c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007966:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800796a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007974:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007978:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007990:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007994:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800799e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079a2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079a6:	6809      	ldr	r1, [r1, #0]
 80079a8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079ac:	2600      	movs	r6, #0
 80079ae:	9604      	str	r6, [sp, #16]
 80079b0:	9103      	str	r1, [sp, #12]
 80079b2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079b6:	9102      	str	r1, [sp, #8]
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	462b      	mov	r3, r5
 80079be:	4aa2      	ldr	r2, [pc, #648]	; (8007c48 <AT_ESP8266_ND+0x135c>)
 80079c0:	4621      	mov	r1, r4
 80079c2:	f006 fe97 	bl	800e6f4 <FT_String_ND>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d103      	bne.n	80079d4 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 80079cc:	2321      	movs	r3, #33	; 0x21
 80079ce:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079d2:	e383      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 80079d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2205      	movs	r2, #5
 80079e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80079e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a20:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a2a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a2e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a32:	6809      	ldr	r1, [r1, #0]
 8007a34:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a38:	2600      	movs	r6, #0
 8007a3a:	9604      	str	r6, [sp, #16]
 8007a3c:	9103      	str	r1, [sp, #12]
 8007a3e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a42:	9102      	str	r1, [sp, #8]
 8007a44:	9201      	str	r2, [sp, #4]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462b      	mov	r3, r5
 8007a4a:	4a80      	ldr	r2, [pc, #512]	; (8007c4c <AT_ESP8266_ND+0x1360>)
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	f006 fe51 	bl	800e6f4 <FT_String_ND>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 8341 	bne.w	80080dc <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007a5a:	2322      	movs	r3, #34	; 0x22
 8007a5c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a60:	e33c      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aaa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ab8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007abc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ac0:	6809      	ldr	r1, [r1, #0]
 8007ac2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	9604      	str	r6, [sp, #16]
 8007aca:	9103      	str	r1, [sp, #12]
 8007acc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ad0:	9102      	str	r1, [sp, #8]
 8007ad2:	9201      	str	r2, [sp, #4]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	4a5d      	ldr	r2, [pc, #372]	; (8007c50 <AT_ESP8266_ND+0x1364>)
 8007ada:	4621      	mov	r1, r4
 8007adc:	f006 fe0a 	bl	800e6f4 <FT_String_ND>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d112      	bne.n	8007b0c <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007ae6:	230a      	movs	r3, #10
 8007ae8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007aec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007b0a:	e2e7      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2209      	movs	r2, #9
 8007b18:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007b1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b54:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b58:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b62:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b66:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b6a:	6809      	ldr	r1, [r1, #0]
 8007b6c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b70:	2600      	movs	r6, #0
 8007b72:	9604      	str	r6, [sp, #16]
 8007b74:	9103      	str	r1, [sp, #12]
 8007b76:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b7a:	9102      	str	r1, [sp, #8]
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	462b      	mov	r3, r5
 8007b82:	4a34      	ldr	r2, [pc, #208]	; (8007c54 <AT_ESP8266_ND+0x1368>)
 8007b84:	4621      	mov	r1, r4
 8007b86:	f006 fdb5 	bl	800e6f4 <FT_String_ND>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d112      	bne.n	8007bb6 <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007b90:	2319      	movs	r3, #25
 8007b92:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007bb4:	e292      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bfe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c14:	6809      	ldr	r1, [r1, #0]
 8007c16:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	9604      	str	r6, [sp, #16]
 8007c1e:	9103      	str	r1, [sp, #12]
 8007c20:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c24:	9102      	str	r1, [sp, #8]
 8007c26:	9201      	str	r2, [sp, #4]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	4a0a      	ldr	r2, [pc, #40]	; (8007c58 <AT_ESP8266_ND+0x136c>)
 8007c2e:	4621      	mov	r1, r4
 8007c30:	f006 fd60 	bl	800e6f4 <FT_String_ND>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d110      	bne.n	8007c5c <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007c3a:	2310      	movs	r3, #16
 8007c3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c40:	e24c      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
 8007c42:	bf00      	nop
 8007c44:	0801089c 	.word	0x0801089c
 8007c48:	08010848 	.word	0x08010848
 8007c4c:	080108a8 	.word	0x080108a8
 8007c50:	080108b0 	.word	0x080108b0
 8007c54:	080108c0 	.word	0x080108c0
 8007c58:	08010864 	.word	0x08010864
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007c5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ca8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cac:	6812      	ldr	r2, [r2, #0]
 8007cae:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cb2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cb6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cba:	6809      	ldr	r1, [r1, #0]
 8007cbc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	9103      	str	r1, [sp, #12]
 8007cc6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cca:	9102      	str	r1, [sp, #8]
 8007ccc:	9201      	str	r2, [sp, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	f006 fd0c 	bl	800e6f4 <FT_String_ND>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d112      	bne.n	8007d08 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 81f3 	beq.w	80080dc <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007d06:	e1e9      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	220d      	movs	r2, #13
 8007d14:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d50:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d54:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d5e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d62:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d66:	6809      	ldr	r1, [r1, #0]
 8007d68:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	9604      	str	r6, [sp, #16]
 8007d70:	9103      	str	r1, [sp, #12]
 8007d72:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d76:	9102      	str	r1, [sp, #8]
 8007d78:	9201      	str	r2, [sp, #4]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	4aaf      	ldr	r2, [pc, #700]	; (800803c <AT_ESP8266_ND+0x1750>)
 8007d80:	4621      	mov	r1, r4
 8007d82:	f006 fcb7 	bl	800e6f4 <FT_String_ND>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d112      	bne.n	8007db2 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007d8c:	2312      	movs	r3, #18
 8007d8e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007db0:	e194      	b.n	80080dc <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	220d      	movs	r2, #13
 8007dbe:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007dc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dfa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dfe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e02:	6812      	ldr	r2, [r2, #0]
 8007e04:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e08:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e0c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e10:	6809      	ldr	r1, [r1, #0]
 8007e12:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e16:	2600      	movs	r6, #0
 8007e18:	9604      	str	r6, [sp, #16]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e20:	9102      	str	r1, [sp, #8]
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	462b      	mov	r3, r5
 8007e28:	4a85      	ldr	r2, [pc, #532]	; (8008040 <AT_ESP8266_ND+0x1754>)
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f006 fc62 	bl	800e6f4 <FT_String_ND>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d112      	bne.n	8007e5c <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007e54:	230c      	movs	r3, #12
 8007e56:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e5a:	e13f      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	220e      	movs	r2, #14
 8007e68:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ea4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ea8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007eb2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007eb6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eba:	6809      	ldr	r1, [r1, #0]
 8007ebc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	9604      	str	r6, [sp, #16]
 8007ec4:	9103      	str	r1, [sp, #12]
 8007ec6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eca:	9102      	str	r1, [sp, #8]
 8007ecc:	9201      	str	r2, [sp, #4]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	4a5c      	ldr	r2, [pc, #368]	; (8008044 <AT_ESP8266_ND+0x1758>)
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f006 fc0d 	bl	800e6f4 <FT_String_ND>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d112      	bne.n	8007f06 <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007ee0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ee4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007efe:	230b      	movs	r3, #11
 8007f00:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007f04:	e0ea      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	220a      	movs	r2, #10
 8007f12:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f4e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f52:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f5c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f60:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f64:	6809      	ldr	r1, [r1, #0]
 8007f66:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	9604      	str	r6, [sp, #16]
 8007f6e:	9103      	str	r1, [sp, #12]
 8007f70:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f74:	9102      	str	r1, [sp, #8]
 8007f76:	9201      	str	r2, [sp, #4]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	4a32      	ldr	r2, [pc, #200]	; (8008048 <AT_ESP8266_ND+0x175c>)
 8007f7e:	4621      	mov	r1, r4
 8007f80:	f006 fbb8 	bl	800e6f4 <FT_String_ND>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d112      	bne.n	8007fb0 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007f8a:	2318      	movs	r3, #24
 8007f8c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007fae:	e095      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007fb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007fc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ff8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ffc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008006:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800800a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800800e:	6809      	ldr	r1, [r1, #0]
 8008010:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008014:	2600      	movs	r6, #0
 8008016:	9604      	str	r6, [sp, #16]
 8008018:	9103      	str	r1, [sp, #12]
 800801a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800801e:	9102      	str	r1, [sp, #8]
 8008020:	9201      	str	r2, [sp, #4]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	462b      	mov	r3, r5
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <AT_ESP8266_ND+0x1760>)
 8008028:	4621      	mov	r1, r4
 800802a:	f006 fb63 	bl	800e6f4 <FT_String_ND>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10d      	bne.n	8008050 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 8008034:	2303      	movs	r3, #3
 8008036:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800803a:	e04f      	b.n	80080dc <AT_ESP8266_ND+0x17f0>
 800803c:	080108cc 	.word	0x080108cc
 8008040:	080108dc 	.word	0x080108dc
 8008044:	080108ec 	.word	0x080108ec
 8008048:	080108fc 	.word	0x080108fc
 800804c:	08010908 	.word	0x08010908
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8008050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008054:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2209      	movs	r2, #9
 800805c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8008060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800806e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800807c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800808a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008098:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800809c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080a6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080aa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080ae:	6809      	ldr	r1, [r1, #0]
 80080b0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080b4:	2600      	movs	r6, #0
 80080b6:	9604      	str	r6, [sp, #16]
 80080b8:	9103      	str	r1, [sp, #12]
 80080ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080be:	9102      	str	r1, [sp, #8]
 80080c0:	9201      	str	r2, [sp, #4]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	462b      	mov	r3, r5
 80080c6:	4a77      	ldr	r2, [pc, #476]	; (80082a4 <AT_ESP8266_ND+0x19b8>)
 80080c8:	4621      	mov	r1, r4
 80080ca:	f006 fb13 	bl	800e6f4 <FT_String_ND>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d103      	bne.n	80080dc <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 80080d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080d8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80080dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80080ea:	3b01      	subs	r3, #1
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	f201 84c6 	bhi.w	8009a7e <AT_ESP8266_ND+0x3192>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <AT_ESP8266_ND+0x180c>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	080082ad 	.word	0x080082ad
 8008100:	0800852f 	.word	0x0800852f
 8008104:	080086ad 	.word	0x080086ad
 8008108:	08008885 	.word	0x08008885
 800810c:	08008b59 	.word	0x08008b59
 8008110:	08008e11 	.word	0x08008e11
 8008114:	08009329 	.word	0x08009329
 8008118:	080094ff 	.word	0x080094ff
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800811c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800812c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800813a:	2b01      	cmp	r3, #1
 800813c:	d14f      	bne.n	80081de <AT_ESP8266_ND+0x18f2>
 800813e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d04b      	beq.n	80081de <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 8008146:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800814a:	2b02      	cmp	r3, #2
 800814c:	d047      	beq.n	80081de <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 800814e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008152:	2b04      	cmp	r3, #4
 8008154:	d043      	beq.n	80081de <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008156:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800815a:	2b13      	cmp	r3, #19
 800815c:	d03f      	beq.n	80081de <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 800815e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800816e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800817e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800818c:	4620      	mov	r0, r4
 800818e:	f7f8 f831 	bl	80001f4 <strlen>
 8008192:	4603      	mov	r3, r0
 8008194:	4423      	add	r3, r4
 8008196:	4a44      	ldr	r2, [pc, #272]	; (80082a8 <AT_ESP8266_ND+0x19bc>)
 8008198:	461c      	mov	r4, r3
 800819a:	4613      	mov	r3, r2
 800819c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	6061      	str	r1, [r4, #4]
 80081a2:	60a2      	str	r2, [r4, #8]
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80081a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f8 f81c 	bl	80001f4 <strlen>
 80081bc:	4603      	mov	r3, r0
 80081be:	461a      	mov	r2, r3
 80081c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 80081ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2264      	movs	r2, #100	; 0x64
 80081da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80081de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80081fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d11b      	bne.n	8008246 <AT_ESP8266_ND+0x195a>
 800820e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d023      	beq.n	800825e <AT_ESP8266_ND+0x1972>
 8008216:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800821a:	2b1c      	cmp	r3, #28
 800821c:	d01f      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 800821e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008222:	2b02      	cmp	r3, #2
 8008224:	d01b      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 8008226:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800822a:	2b04      	cmp	r3, #4
 800822c:	d017      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 800822e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008232:	2b0b      	cmp	r3, #11
 8008234:	d013      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 8008236:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800823a:	2b0c      	cmp	r3, #12
 800823c:	d00f      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800823e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008242:	2b13      	cmp	r3, #19
 8008244:	d00b      	beq.n	800825e <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008254:	f241 3288 	movw	r2, #5000	; 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	f341 841a 	ble.w	8009a92 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800825e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800826c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008280:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008284:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 80082a0:	f001 bbf7 	b.w	8009a92 <AT_ESP8266_ND+0x31a6>
 80082a4:	08010914 	.word	0x08010914
 80082a8:	08010920 	.word	0x08010920
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80082bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	f040 80c8 	bne.w	8008460 <AT_ESP8266_ND+0x1b74>
 80082d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	f000 80c3 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 80082da:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082de:	2b02      	cmp	r3, #2
 80082e0:	f000 80be 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 80082e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	f000 80b9 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 80082ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	f000 80b4 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 80082f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082fc:	2b0a      	cmp	r3, #10
 80082fe:	f000 80af 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008302:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008306:	2b0b      	cmp	r3, #11
 8008308:	f000 80aa 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 800830c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008310:	2b0c      	cmp	r3, #12
 8008312:	f000 80a5 	beq.w	8008460 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 8008316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2201      	movs	r2, #1
 8008332:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008344:	4620      	mov	r0, r4
 8008346:	f7f7 ff55 	bl	80001f4 <strlen>
 800834a:	4603      	mov	r3, r0
 800834c:	4423      	add	r3, r4
 800834e:	49d5      	ldr	r1, [pc, #852]	; (80086a4 <AT_ESP8266_ND+0x1db8>)
 8008350:	461a      	mov	r2, r3
 8008352:	460b      	mov	r3, r1
 8008354:	cb03      	ldmia	r3!, {r0, r1}
 8008356:	6010      	str	r0, [r2, #0]
 8008358:	6051      	str	r1, [r2, #4]
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800835e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800836c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008370:	2201      	movs	r2, #1
 8008372:	4618      	mov	r0, r3
 8008374:	f006 ff1b 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008386:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800838a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	1d9d      	adds	r5, r3, #6
 8008392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3306      	adds	r3, #6
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f7 ff28 	bl	80001f4 <strlen>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	4629      	mov	r1, r5
 80083aa:	4620      	mov	r0, r4
 80083ac:	f006 feff 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80083b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7f7 ff16 	bl	80001f4 <strlen>
 80083c8:	4602      	mov	r2, r0
 80083ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80083ce:	4619      	mov	r1, r3
 80083d0:	4620      	mov	r0, r4
 80083d2:	f006 feec 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80083d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80083f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3326      	adds	r3, #38	; 0x26
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f7 fef8 	bl	80001f4 <strlen>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	4629      	mov	r1, r5
 800840a:	4620      	mov	r0, r4
 800840c:	f006 fecf 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800841e:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008422:	2203      	movs	r2, #3
 8008424:	4618      	mov	r0, r3
 8008426:	f006 fec2 	bl	800f1ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800842a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008438:	4618      	mov	r0, r3
 800843a:	f7f7 fedb 	bl	80001f4 <strlen>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	22c8      	movs	r2, #200	; 0xc8
 800845c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800847e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11b      	bne.n	80084c8 <AT_ESP8266_ND+0x1bdc>
 8008490:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d023      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
 8008498:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800849c:	2b02      	cmp	r3, #2
 800849e:	d01f      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 80084a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d01b      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 80084a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d017      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 80084b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084b4:	2b0a      	cmp	r3, #10
 80084b6:	d013      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 80084b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084bc:	2b0b      	cmp	r3, #11
 80084be:	d00f      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 80084c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084c4:	2b0c      	cmp	r3, #12
 80084c6:	d00b      	beq.n	80084e0 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 80084c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80084d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80084da:	4293      	cmp	r3, r2
 80084dc:	f341 82db 	ble.w	8009a96 <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80084e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80084ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80084f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f6:	2b0a      	cmp	r3, #10
 80084f8:	d00f      	beq.n	800851a <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80084fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800850a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2200      	movs	r2, #0
 8008516:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800851a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800852a:	f001 bab4 	b.w	8009a96 <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800852e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800853e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008542:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800854c:	2b01      	cmp	r3, #1
 800854e:	d14d      	bne.n	80085ec <AT_ESP8266_ND+0x1d00>
 8008550:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008554:	2b04      	cmp	r3, #4
 8008556:	d049      	beq.n	80085ec <AT_ESP8266_ND+0x1d00>
 8008558:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800855c:	2b0a      	cmp	r3, #10
 800855e:	d045      	beq.n	80085ec <AT_ESP8266_ND+0x1d00>
 8008560:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008564:	2b0d      	cmp	r3, #13
 8008566:	d041      	beq.n	80085ec <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 8008568:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2201      	movs	r2, #1
 8008584:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008588:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008596:	4620      	mov	r0, r4
 8008598:	f7f7 fe2c 	bl	80001f4 <strlen>
 800859c:	4603      	mov	r3, r0
 800859e:	4423      	add	r3, r4
 80085a0:	4941      	ldr	r1, [pc, #260]	; (80086a8 <AT_ESP8266_ND+0x1dbc>)
 80085a2:	461a      	mov	r2, r3
 80085a4:	460b      	mov	r3, r1
 80085a6:	cb03      	ldmia	r3!, {r0, r1}
 80085a8:	6010      	str	r0, [r2, #0]
 80085aa:	6051      	str	r1, [r2, #4]
 80085ac:	8819      	ldrh	r1, [r3, #0]
 80085ae:	789b      	ldrb	r3, [r3, #2]
 80085b0:	8111      	strh	r1, [r2, #8]
 80085b2:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80085b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7f7 fe16 	bl	80001f4 <strlen>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80085da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80085e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80085ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800860a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d113      	bne.n	8008644 <AT_ESP8266_ND+0x1d58>
 800861c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008620:	2b0a      	cmp	r3, #10
 8008622:	d01b      	beq.n	800865c <AT_ESP8266_ND+0x1d70>
 8008624:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008628:	2b0b      	cmp	r3, #11
 800862a:	d017      	beq.n	800865c <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 800862c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008630:	2b0c      	cmp	r3, #12
 8008632:	d013      	beq.n	800865c <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 8008634:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008638:	2b04      	cmp	r3, #4
 800863a:	d00f      	beq.n	800865c <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 800863c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008640:	2b0d      	cmp	r3, #13
 8008642:	d00b      	beq.n	800865c <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008644:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008648:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008652:	f241 3288 	movw	r2, #5000	; 0x1388
 8008656:	4293      	cmp	r3, r2
 8008658:	f341 821f 	ble.w	8009a9a <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800865c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800866a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800866e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800867e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800869e:	f001 b9fc 	b.w	8009a9a <AT_ESP8266_ND+0x31ae>
 80086a2:	bf00      	nop
 80086a4:	08010930 	.word	0x08010930
 80086a8:	0801093c 	.word	0x0801093c
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80086ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80086bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d16b      	bne.n	80087a6 <AT_ESP8266_ND+0x1eba>
 80086ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d067      	beq.n	80087a6 <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 80086d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d063      	beq.n	80087a6 <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 80086de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d05f      	beq.n	80087a6 <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 80086e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80086f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2201      	movs	r2, #1
 8008702:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800870a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008714:	2b01      	cmp	r3, #1
 8008716:	d115      	bne.n	8008744 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800871c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008726:	4620      	mov	r0, r4
 8008728:	f7f7 fd64 	bl	80001f4 <strlen>
 800872c:	4603      	mov	r3, r0
 800872e:	4423      	add	r3, r4
 8008730:	4a52      	ldr	r2, [pc, #328]	; (800887c <AT_ESP8266_ND+0x1f90>)
 8008732:	461c      	mov	r4, r3
 8008734:	4613      	mov	r3, r2
 8008736:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008738:	6020      	str	r0, [r4, #0]
 800873a:	6061      	str	r1, [r4, #4]
 800873c:	60a2      	str	r2, [r4, #8]
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e014      	b.n	800876e <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008752:	4620      	mov	r0, r4
 8008754:	f7f7 fd4e 	bl	80001f4 <strlen>
 8008758:	4603      	mov	r3, r0
 800875a:	4423      	add	r3, r4
 800875c:	4a48      	ldr	r2, [pc, #288]	; (8008880 <AT_ESP8266_ND+0x1f94>)
 800875e:	461c      	mov	r4, r3
 8008760:	4613      	mov	r3, r2
 8008762:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008764:	6020      	str	r0, [r4, #0]
 8008766:	6061      	str	r1, [r4, #4]
 8008768:	60a2      	str	r2, [r4, #8]
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 800876e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fd39 	bl	80001f4 <strlen>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80087a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80087a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80087c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d123      	bne.n	800881e <AT_ESP8266_ND+0x1f32>
 80087d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d02b      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
 80087de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e2:	2b0b      	cmp	r3, #11
 80087e4:	d027      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 80087e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087ea:	2b0c      	cmp	r3, #12
 80087ec:	d023      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 80087ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d01f      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 80087f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d01b      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 80087fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008802:	2b07      	cmp	r3, #7
 8008804:	d017      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008806:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800880a:	2b08      	cmp	r3, #8
 800880c:	d013      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 800880e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008812:	2b1e      	cmp	r3, #30
 8008814:	d00f      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008816:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800881a:	2b1f      	cmp	r3, #31
 800881c:	d00b      	beq.n	8008836 <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800881e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008822:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800882c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008830:	4293      	cmp	r3, r2
 8008832:	f341 8134 	ble.w	8009a9e <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008836:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008868:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008878:	f001 b911 	b.w	8009a9e <AT_ESP8266_ND+0x31b2>
 800887c:	08010948 	.word	0x08010948
 8008880:	08010958 	.word	0x08010958
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	f040 80f3 	bne.w	8008a8e <AT_ESP8266_ND+0x21a2>
 80088a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	f000 80ee 	beq.w	8008a8e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 80088b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	f000 80e9 	beq.w	8008a8e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 80088bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	f000 80e4 	beq.w	8008a8e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 80088c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ca:	2b21      	cmp	r3, #33	; 0x21
 80088cc:	f000 80df 	beq.w	8008a8e <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 80088d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088d4:	2b1b      	cmp	r3, #27
 80088d6:	f000 80da 	beq.w	8008a8e <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 80088da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80088ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80088fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008908:	4620      	mov	r0, r4
 800890a:	f7f7 fc73 	bl	80001f4 <strlen>
 800890e:	4603      	mov	r3, r0
 8008910:	4423      	add	r3, r4
 8008912:	4990      	ldr	r1, [pc, #576]	; (8008b54 <AT_ESP8266_ND+0x2268>)
 8008914:	461a      	mov	r2, r3
 8008916:	460b      	mov	r3, r1
 8008918:	cb03      	ldmia	r3!, {r0, r1}
 800891a:	6010      	str	r0, [r2, #0]
 800891c:	6051      	str	r1, [r2, #4]
 800891e:	8819      	ldrh	r1, [r3, #0]
 8008920:	789b      	ldrb	r3, [r3, #2]
 8008922:	8111      	strh	r1, [r2, #8]
 8008924:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008934:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008938:	2201      	movs	r2, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f006 fc37 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800894e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 800895c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	334c      	adds	r3, #76	; 0x4c
 8008968:	4618      	mov	r0, r3
 800896a:	f7f7 fc43 	bl	80001f4 <strlen>
 800896e:	4603      	mov	r3, r0
 8008970:	461a      	mov	r2, r3
 8008972:	4629      	mov	r1, r5
 8008974:	4620      	mov	r0, r4
 8008976:	f006 fc1a 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,separador,3);
 800897a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800897e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008988:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800898c:	2203      	movs	r2, #3
 800898e:	4618      	mov	r0, r3
 8008990:	f006 fc0d 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f103 0562 	add.w	r5, r3, #98	; 0x62
 80089b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3362      	adds	r3, #98	; 0x62
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f7 fc19 	bl	80001f4 <strlen>
 80089c2:	4603      	mov	r3, r0
 80089c4:	461a      	mov	r2, r3
 80089c6:	4629      	mov	r1, r5
 80089c8:	4620      	mov	r0, r4
 80089ca:	f006 fbf0 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,separador,3);
 80089ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089dc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80089e0:	2203      	movs	r2, #3
 80089e2:	4618      	mov	r0, r3
 80089e4:	f006 fbe3 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 80089e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3372      	adds	r3, #114	; 0x72
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f7 fbef 	bl	80001f4 <strlen>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f006 fbc6 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a30:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008a34:	2201      	movs	r2, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f006 fbb9 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a4a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008a4e:	2202      	movs	r2, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f006 fbac 	bl	800f1ae <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7f7 fbc5 	bl	80001f4 <strlen>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11b      	bne.n	8008af6 <AT_ESP8266_ND+0x220a>
 8008abe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d023      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
 8008ac6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aca:	2b0b      	cmp	r3, #11
 8008acc:	d01f      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008ace:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad2:	2b0c      	cmp	r3, #12
 8008ad4:	d01b      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008ad6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ada:	2b04      	cmp	r3, #4
 8008adc:	d017      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008ade:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d013      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008ae6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aea:	2b21      	cmp	r3, #33	; 0x21
 8008aec:	d00f      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008aee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af2:	2b1b      	cmp	r3, #27
 8008af4:	d00b      	beq.n	8008b0e <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	f340 87ca 	ble.w	8009aa2 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b50:	f000 bfa7 	b.w	8009aa2 <AT_ESP8266_ND+0x31b6>
 8008b54:	08010848 	.word	0x08010848
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	f040 80e2 	bne.w	8008d40 <AT_ESP8266_ND+0x2454>
 8008b7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	f000 80dd 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008b86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b8a:	2b0c      	cmp	r3, #12
 8008b8c:	f000 80d8 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008b90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b94:	2b0e      	cmp	r3, #14
 8008b96:	f000 80d3 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008b9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	f000 80ce 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008ba4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	f000 80c9 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008bae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	f000 80c4 	beq.w	8008d40 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7f7 fb04 	bl	80001f4 <strlen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4423      	add	r3, r4
 8008bf0:	4aa1      	ldr	r2, [pc, #644]	; (8008e78 <AT_ESP8266_ND+0x258c>)
 8008bf2:	461c      	mov	r4, r3
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bf8:	6020      	str	r0, [r4, #0]
 8008bfa:	6061      	str	r1, [r4, #4]
 8008bfc:	60a2      	str	r2, [r4, #8]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008c02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c10:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c14:	2201      	movs	r2, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f006 fac9 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7f7 fae2 	bl	80001f4 <strlen>
 8008c30:	4603      	mov	r3, r0
 8008c32:	4423      	add	r3, r4
 8008c34:	4a91      	ldr	r2, [pc, #580]	; (8008e7c <AT_ESP8266_ND+0x2590>)
 8008c36:	6810      	ldr	r0, [r2, #0]
 8008c38:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c48:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f006 faad 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008c54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008c70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3336      	adds	r3, #54	; 0x36
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7f7 fab9 	bl	80001f4 <strlen>
 8008c82:	4603      	mov	r3, r0
 8008c84:	461a      	mov	r2, r3
 8008c86:	4629      	mov	r1, r5
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f006 fa90 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008c8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c9c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f006 fa83 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008cc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3346      	adds	r3, #70	; 0x46
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7f7 fa8f 	bl	80001f4 <strlen>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f006 fa66 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cf0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f7 fa7d 	bl	80001f4 <strlen>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d00:	4619      	mov	r1, r3
 8008d02:	4620      	mov	r0, r4
 8008d04:	f006 fa53 	bl	800f1ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fa6c 	bl	80001f4 <strlen>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d120      	bne.n	8008db2 <AT_ESP8266_ND+0x24c6>
 8008d70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d74:	2b0a      	cmp	r3, #10
 8008d76:	d028      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
 8008d78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d7c:	2b0b      	cmp	r3, #11
 8008d7e:	d024      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008d80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d020      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008d88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d8c:	2b0e      	cmp	r3, #14
 8008d8e:	d01c      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008d90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d94:	2b0f      	cmp	r3, #15
 8008d96:	d018      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008d98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	d014      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008da0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d010      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008da8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db0:	d00b      	beq.n	8008dca <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	f340 866e 	ble.w	8009aa6 <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008ddc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008dec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008e0c:	f000 be4b 	b.w	8009aa6 <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e14:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008e20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d003      	beq.n	8008e30 <AT_ESP8266_ND+0x2544>
 8008e28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e2c:	2b0a      	cmp	r3, #10
 8008e2e:	d127      	bne.n	8008e80 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008e72:	f000 be1a 	b.w	8009aaa <AT_ESP8266_ND+0x31be>
 8008e76:	bf00      	nop
 8008e78:	08010968 	.word	0x08010968
 8008e7c:	08010978 	.word	0x08010978
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	f040 80d1 	bne.w	8009036 <AT_ESP8266_ND+0x274a>
 8008e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 80c7 	bne.w	8009036 <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008eb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ebc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2218      	movs	r2, #24
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008ed8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008edc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008ef6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008efa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008f06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7f7 f965 	bl	80001f4 <strlen>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4423      	add	r3, r4
 8008f2e:	4abe      	ldr	r2, [pc, #760]	; (8009228 <AT_ESP8266_ND+0x293c>)
 8008f30:	461c      	mov	r4, r3
 8008f32:	4613      	mov	r3, r2
 8008f34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f36:	6020      	str	r0, [r4, #0]
 8008f38:	6061      	str	r1, [r4, #4]
 8008f3a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008f4a:	f107 0214 	add.w	r2, r7, #20
 8008f4e:	4611      	mov	r1, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f005 ff01 	bl	800ed58 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f64:	f107 0314 	add.w	r3, r7, #20
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f7 f943 	bl	80001f4 <strlen>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f107 0314 	add.w	r3, r7, #20
 8008f74:	4619      	mov	r1, r3
 8008f76:	4620      	mov	r0, r4
 8008f78:	f006 f919 	bl	800f1ae <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008f7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008f8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f006 f9e8 	bl	800f370 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fae:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f006 f8fa 	bl	800f1ae <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7f7 f913 	bl	80001f4 <strlen>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7f7 f900 	bl	80001f4 <strlen>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	4423      	add	r3, r4
 8008ff8:	4a8c      	ldr	r2, [pc, #560]	; (800922c <AT_ESP8266_ND+0x2940>)
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009000:	6020      	str	r0, [r4, #0]
 8009002:	6061      	str	r1, [r4, #4]
 8009004:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009024:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009028:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009036:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 80a6 	bne.w	80091b4 <AT_ESP8266_ND+0x28c8>
 8009068:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800906c:	2b13      	cmp	r3, #19
 800906e:	f000 80a1 	beq.w	80091b4 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009084:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f7f7 f8a5 	bl	80001e0 <strcmp>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01b      	beq.n	80090d4 <AT_ESP8266_ND+0x27e8>
 800909c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d017      	beq.n	80090d4 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80090a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090a8:	2b14      	cmp	r3, #20
 80090aa:	d013      	beq.n	80090d4 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80090be:	4293      	cmp	r3, r2
 80090c0:	dd78      	ble.n	80091b4 <AT_ESP8266_ND+0x28c8>
 80090c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d16f      	bne.n	80091b4 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 80090d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e6:	4293      	cmp	r3, r2
 80090e8:	dd0e      	ble.n	8009108 <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80090ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009108:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800910c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009126:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2201      	movs	r2, #1
 8009150:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009162:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009166:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009174:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800917e:	2361      	movs	r3, #97	; 0x61
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2301      	movs	r3, #1
 8009184:	f005 fe1c 	bl	800edc0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80091a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80091b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80091c6:	f040 8470 	bne.w	8009aaa <AT_ESP8266_ND+0x31be>
 80091ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ce:	2b13      	cmp	r3, #19
 80091d0:	d02e      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
 80091d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	4293      	cmp	r3, r2
 80091e6:	dc23      	bgt.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 80091e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ec:	2b0a      	cmp	r3, #10
 80091ee:	d01f      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 80091f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091f4:	2b0b      	cmp	r3, #11
 80091f6:	d01b      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 80091f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091fc:	2b0c      	cmp	r3, #12
 80091fe:	d017      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009200:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009204:	2b10      	cmp	r3, #16
 8009206:	d013      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 8009208:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800920c:	2b11      	cmp	r3, #17
 800920e:	d00f      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009210:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009214:	2b12      	cmp	r3, #18
 8009216:	d00b      	beq.n	8009230 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 8009218:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800921c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009220:	f040 8443 	bne.w	8009aaa <AT_ESP8266_ND+0x31be>
 8009224:	e004      	b.n	8009230 <AT_ESP8266_ND+0x2944>
 8009226:	bf00      	nop
 8009228:	0801097c 	.word	0x0801097c
 800922c:	08010988 	.word	0x08010988
									a->_debug_count5++;
 8009230:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009234:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800924e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800925c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009260:	4293      	cmp	r3, r2
 8009262:	dd25      	ble.n	80092b0 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 8009264:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009268:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009282:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009286:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80092a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092be:	2b02      	cmp	r3, #2
 80092c0:	dd10      	ble.n	80092e4 <AT_ESP8266_ND+0x29f8>
 80092c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092c6:	2b10      	cmp	r3, #16
 80092c8:	d00c      	beq.n	80092e4 <AT_ESP8266_ND+0x29f8>
 80092ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	d008      	beq.n	80092e4 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80092d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	220f      	movs	r2, #15
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80092e2:	e008      	b.n	80092f6 <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80092f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2200      	movs	r2, #0
 8009312:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009326:	e3c0      	b.n	8009aaa <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009346:	2b01      	cmp	r3, #1
 8009348:	d16f      	bne.n	800942a <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 800934a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800934e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800935a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800935e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2201      	movs	r2, #1
 8009366:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800936a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009378:	4620      	mov	r0, r4
 800937a:	f7f6 ff3b 	bl	80001f4 <strlen>
 800937e:	4603      	mov	r3, r0
 8009380:	4423      	add	r3, r4
 8009382:	4a78      	ldr	r2, [pc, #480]	; (8009564 <AT_ESP8266_ND+0x2c78>)
 8009384:	461c      	mov	r4, r3
 8009386:	4615      	mov	r5, r2
 8009388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	6061      	str	r1, [r4, #4]
 800938e:	60a2      	str	r2, [r4, #8]
 8009390:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80093ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	335c      	adds	r3, #92	; 0x5c
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f6 ff1a 	bl	80001f4 <strlen>
 80093c0:	4603      	mov	r3, r0
 80093c2:	461a      	mov	r2, r3
 80093c4:	4629      	mov	r1, r5
 80093c6:	4620      	mov	r0, r4
 80093c8:	f005 fef1 	bl	800f1ae <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80093cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093da:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f6 ff08 	bl	80001f4 <strlen>
 80093e4:	4602      	mov	r2, r0
 80093e6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80093ea:	4619      	mov	r1, r3
 80093ec:	4620      	mov	r0, r4
 80093ee:	f005 fede 	bl	800f1ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80093f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009400:	4618      	mov	r0, r3
 8009402:	f7f6 fef7 	bl	80001f4 <strlen>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800942a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d123      	bne.n	80094a2 <AT_ESP8266_ND+0x2bb6>
 800945a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800945e:	2b0a      	cmp	r3, #10
 8009460:	d02b      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 8009462:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009466:	2b0b      	cmp	r3, #11
 8009468:	d027      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 800946a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800946e:	2b0c      	cmp	r3, #12
 8009470:	d023      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 8009472:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009476:	2b0e      	cmp	r3, #14
 8009478:	d01f      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 800947a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800947e:	2b0f      	cmp	r3, #15
 8009480:	d01b      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 8009482:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009486:	2b10      	cmp	r3, #16
 8009488:	d017      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 800948a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800948e:	2b15      	cmp	r3, #21
 8009490:	d013      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 8009492:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009496:	2b16      	cmp	r3, #22
 8009498:	d00f      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 800949a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800949e:	2b17      	cmp	r3, #23
 80094a0:	d00b      	beq.n	80094ba <AT_ESP8266_ND+0x2bce>
 80094a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80094b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b4:	4293      	cmp	r3, r2
 80094b6:	f340 82fa 	ble.w	8009aae <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80094ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80094cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80094dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80094ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80094fc:	e2d7      	b.n	8009aae <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80094fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009502:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 800950e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009512:	2b10      	cmp	r3, #16
 8009514:	d003      	beq.n	800951e <AT_ESP8266_ND+0x2c32>
 8009516:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800951a:	2b0a      	cmp	r3, #10
 800951c:	d124      	bne.n	8009568 <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 800951e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800952c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009530:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009534:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009560:	e2a7      	b.n	8009ab2 <AT_ESP8266_ND+0x31c6>
 8009562:	bf00      	nop
 8009564:	08010994 	.word	0x08010994
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009568:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800956c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009576:	2b01      	cmp	r3, #1
 8009578:	f040 8102 	bne.w	8009780 <AT_ESP8266_ND+0x2e94>
 800957c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800958a:	2b00      	cmp	r3, #0
 800958c:	f040 80f8 	bne.w	8009780 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009594:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80095a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2218      	movs	r2, #24
 80095ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80095b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80095de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80095ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80095fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009602:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800960c:	4620      	mov	r0, r4
 800960e:	f7f6 fdf1 	bl	80001f4 <strlen>
 8009612:	4603      	mov	r3, r0
 8009614:	4423      	add	r3, r4
 8009616:	4a83      	ldr	r2, [pc, #524]	; (8009824 <AT_ESP8266_ND+0x2f38>)
 8009618:	461c      	mov	r4, r3
 800961a:	4613      	mov	r3, r2
 800961c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	6061      	str	r1, [r4, #4]
 8009622:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009628:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009632:	f107 020c 	add.w	r2, r7, #12
 8009636:	4611      	mov	r1, r2
 8009638:	4618      	mov	r0, r3
 800963a:	f005 fb8d 	bl	800ed58 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800963e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	4618      	mov	r0, r3
 8009652:	f7f6 fdcf 	bl	80001f4 <strlen>
 8009656:	4602      	mov	r2, r0
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	4619      	mov	r1, r3
 800965e:	4620      	mov	r0, r4
 8009660:	f005 fda5 	bl	800f1ae <strncat>
										strncat(a->_uart2snd,",",1);
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009672:	4620      	mov	r0, r4
 8009674:	f7f6 fdbe 	bl	80001f4 <strlen>
 8009678:	4603      	mov	r3, r0
 800967a:	4423      	add	r3, r4
 800967c:	496a      	ldr	r1, [pc, #424]	; (8009828 <AT_ESP8266_ND+0x2f3c>)
 800967e:	461a      	mov	r2, r3
 8009680:	460b      	mov	r3, r1
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009694:	f107 020c 	add.w	r2, r7, #12
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f005 fb5c 	bl	800ed58 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80096a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096ae:	f107 030c 	add.w	r3, r7, #12
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f6 fd9e 	bl	80001f4 <strlen>
 80096b8:	4602      	mov	r2, r0
 80096ba:	f107 030c 	add.w	r3, r7, #12
 80096be:	4619      	mov	r1, r3
 80096c0:	4620      	mov	r0, r4
 80096c2:	f005 fd74 	bl	800f1ae <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80096c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80096d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f005 fe43 	bl	800f370 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80096ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80096f8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80096fc:	2202      	movs	r2, #2
 80096fe:	4618      	mov	r0, r3
 8009700:	f005 fd55 	bl	800f1ae <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009712:	4618      	mov	r0, r3
 8009714:	f7f6 fd6e 	bl	80001f4 <strlen>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800972a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009738:	4620      	mov	r0, r4
 800973a:	f7f6 fd5b 	bl	80001f4 <strlen>
 800973e:	4603      	mov	r3, r0
 8009740:	4423      	add	r3, r4
 8009742:	4a3a      	ldr	r2, [pc, #232]	; (800982c <AT_ESP8266_ND+0x2f40>)
 8009744:	461c      	mov	r4, r3
 8009746:	4613      	mov	r3, r2
 8009748:	cb07      	ldmia	r3!, {r0, r1, r2}
 800974a:	6020      	str	r0, [r4, #0]
 800974c:	6061      	str	r1, [r4, #4]
 800974e:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009764:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 800976e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f44f 7261 	mov.w	r2, #900	; 0x384
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800979e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 80b8 	bne.w	8009922 <AT_ESP8266_ND+0x3036>
 80097b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097b6:	2b13      	cmp	r3, #19
 80097b8:	f000 80b3 	beq.w	8009922 <AT_ESP8266_ND+0x3036>
 80097bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80097ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f7f6 fd00 	bl	80001e0 <strcmp>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d024      	beq.n	8009830 <AT_ESP8266_ND+0x2f44>
 80097e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d020      	beq.n	8009830 <AT_ESP8266_ND+0x2f44>
 80097ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097f2:	2b14      	cmp	r3, #20
 80097f4:	d01c      	beq.n	8009830 <AT_ESP8266_ND+0x2f44>
 80097f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009804:	f241 3288 	movw	r2, #5000	; 0x1388
 8009808:	4293      	cmp	r3, r2
 800980a:	f340 808a 	ble.w	8009922 <AT_ESP8266_ND+0x3036>
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800981c:	2b01      	cmp	r3, #1
 800981e:	f040 8080 	bne.w	8009922 <AT_ESP8266_ND+0x3036>
 8009822:	e005      	b.n	8009830 <AT_ESP8266_ND+0x2f44>
 8009824:	0801097c 	.word	0x0801097c
 8009828:	080109a4 	.word	0x080109a4
 800982c:	08010988 	.word	0x08010988
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800983e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009842:	4293      	cmp	r3, r2
 8009844:	dd17      	ble.n	8009876 <AT_ESP8266_ND+0x2f8a>
 8009846:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009854:	2b01      	cmp	r3, #1
 8009856:	d10e      	bne.n	8009876 <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800986c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800987a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800988a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80098b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2201      	movs	r2, #1
 80098be:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80098c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80098d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80098de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80098ec:	2361      	movs	r3, #97	; 0x61
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2301      	movs	r3, #1
 80098f2:	f005 fa65 	bl	800edc0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80098f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009912:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009916:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2200      	movs	r2, #0
 800991e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009930:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009934:	f040 80bd 	bne.w	8009ab2 <AT_ESP8266_ND+0x31c6>
 8009938:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800993c:	2b13      	cmp	r3, #19
 800993e:	d02b      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009940:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d027      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009948:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d023      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800995e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009962:	4293      	cmp	r3, r2
 8009964:	dc18      	bgt.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009966:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800996a:	2b0a      	cmp	r3, #10
 800996c:	d014      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 800996e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009972:	2b10      	cmp	r3, #16
 8009974:	d010      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009976:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800997a:	2b11      	cmp	r3, #17
 800997c:	d00c      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 800997e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009982:	2b12      	cmp	r3, #18
 8009984:	d008      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 8009986:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800998a:	2b16      	cmp	r3, #22
 800998c:	d004      	beq.n	8009998 <AT_ESP8266_ND+0x30ac>
 800998e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009992:	2b19      	cmp	r3, #25
 8009994:	f040 808d 	bne.w	8009ab2 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800999c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80099b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80099c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c8:	4293      	cmp	r3, r2
 80099ca:	dd25      	ble.n	8009a18 <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 80099cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80099ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	dd07      	ble.n	8009a3a <AT_ESP8266_ND+0x314e>
 8009a2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d003      	beq.n	8009a3a <AT_ESP8266_ND+0x314e>
 8009a32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a36:	2b0a      	cmp	r3, #10
 8009a38:	d108      	bne.n	8009a4c <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009a7c:	e019      	b.n	8009ab2 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009a90:	e010      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009a92:	bf00      	nop
 8009a94:	e00e      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009a96:	bf00      	nop
 8009a98:	e00c      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009a9a:	bf00      	nop
 8009a9c:	e00a      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009a9e:	bf00      	nop
 8009aa0:	e008      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009aa2:	bf00      	nop
 8009aa4:	e006      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009aa6:	bf00      	nop
 8009aa8:	e004      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009aaa:	bf00      	nop
 8009aac:	e002      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009aae:	bf00      	nop
 8009ab0:	e000      	b.n	8009ab4 <AT_ESP8266_ND+0x31c8>
			break;
 8009ab2:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aec <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009afe:	f240 328d 	movw	r2, #909	; 0x38d
 8009b02:	4293      	cmp	r3, r2
 8009b04:	f001 83c3 	beq.w	800b28e <WiFi_Conn_ND+0x17a2>
 8009b08:	f240 328d 	movw	r2, #909	; 0x38d
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	f301 8453 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b12:	f240 3289 	movw	r2, #905	; 0x389
 8009b16:	4293      	cmp	r3, r2
 8009b18:	f001 8335 	beq.w	800b186 <WiFi_Conn_ND+0x169a>
 8009b1c:	f240 3289 	movw	r2, #905	; 0x389
 8009b20:	4293      	cmp	r3, r2
 8009b22:	f301 8449 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b26:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009b2a:	f001 8224 	beq.w	800af76 <WiFi_Conn_ND+0x148a>
 8009b2e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009b32:	f301 8441 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b36:	f240 3229 	movw	r2, #809	; 0x329
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	f301 843c 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009b44:	f280 80a5 	bge.w	8009c92 <WiFi_Conn_ND+0x1a6>
 8009b48:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	f000 8776 	beq.w	800aa3e <WiFi_Conn_ND+0xf52>
 8009b52:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009b56:	4293      	cmp	r3, r2
 8009b58:	f301 842e 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b5c:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009b60:	4293      	cmp	r3, r2
 8009b62:	f000 86fc 	beq.w	800a95e <WiFi_Conn_ND+0xe72>
 8009b66:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	f301 8424 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b70:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009b74:	f000 862b 	beq.w	800a7ce <WiFi_Conn_ND+0xce2>
 8009b78:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009b7c:	f301 841c 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b80:	f240 2261 	movw	r2, #609	; 0x261
 8009b84:	4293      	cmp	r3, r2
 8009b86:	f000 85b1 	beq.w	800a6ec <WiFi_Conn_ND+0xc00>
 8009b8a:	f240 2261 	movw	r2, #609	; 0x261
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f301 8412 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009b94:	f240 225d 	movw	r2, #605	; 0x25d
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f000 8551 	beq.w	800a640 <WiFi_Conn_ND+0xb54>
 8009b9e:	f240 225d 	movw	r2, #605	; 0x25d
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f301 8408 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009ba8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009bac:	f000 84cf 	beq.w	800a54e <WiFi_Conn_ND+0xa62>
 8009bb0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009bb4:	f301 8400 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009bb8:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	f000 846a 	beq.w	800a496 <WiFi_Conn_ND+0x9aa>
 8009bc2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009bc6:	f281 83f7 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009bca:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	f000 8425 	beq.w	800a41e <WiFi_Conn_ND+0x932>
 8009bd4:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009bd8:	f281 83ee 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009bdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009be0:	f000 83b0 	beq.w	800a344 <WiFi_Conn_ND+0x858>
 8009be4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009be8:	f301 83e6 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009bec:	f240 1299 	movw	r2, #409	; 0x199
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	f000 8369 	beq.w	800a2c8 <WiFi_Conn_ND+0x7dc>
 8009bf6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009bfa:	f281 83dd 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009bfe:	f240 1295 	movw	r2, #405	; 0x195
 8009c02:	4293      	cmp	r3, r2
 8009c04:	f000 8329 	beq.w	800a25a <WiFi_Conn_ND+0x76e>
 8009c08:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009c0c:	f281 83d4 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c14:	f000 82a0 	beq.w	800a158 <WiFi_Conn_ND+0x66c>
 8009c18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c1c:	f301 83cc 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c20:	f240 1235 	movw	r2, #309	; 0x135
 8009c24:	4293      	cmp	r3, r2
 8009c26:	f000 8271 	beq.w	800a10c <WiFi_Conn_ND+0x620>
 8009c2a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009c2e:	f281 83c3 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c32:	f240 1231 	movw	r2, #305	; 0x131
 8009c36:	4293      	cmp	r3, r2
 8009c38:	f000 8263 	beq.w	800a102 <WiFi_Conn_ND+0x616>
 8009c3c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009c40:	f281 83ba 	bge.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009c48:	f000 8207 	beq.w	800a05a <WiFi_Conn_ND+0x56e>
 8009c4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009c50:	f301 83b2 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c54:	2bd1      	cmp	r3, #209	; 0xd1
 8009c56:	f000 81a0 	beq.w	8009f9a <WiFi_Conn_ND+0x4ae>
 8009c5a:	2bd1      	cmp	r3, #209	; 0xd1
 8009c5c:	f301 83ac 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c60:	2bcd      	cmp	r3, #205	; 0xcd
 8009c62:	f000 8170 	beq.w	8009f46 <WiFi_Conn_ND+0x45a>
 8009c66:	2bcd      	cmp	r3, #205	; 0xcd
 8009c68:	f301 83a6 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c6c:	2bc8      	cmp	r3, #200	; 0xc8
 8009c6e:	f000 80f1 	beq.w	8009e54 <WiFi_Conn_ND+0x368>
 8009c72:	2bc8      	cmp	r3, #200	; 0xc8
 8009c74:	f301 83a0 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c78:	2b6d      	cmp	r3, #109	; 0x6d
 8009c7a:	f000 80b3 	beq.w	8009de4 <WiFi_Conn_ND+0x2f8>
 8009c7e:	2b6d      	cmp	r3, #109	; 0x6d
 8009c80:	f301 839a 	bgt.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c84:	2b64      	cmp	r3, #100	; 0x64
 8009c86:	d021      	beq.n	8009ccc <WiFi_Conn_ND+0x1e0>
 8009c88:	2b69      	cmp	r3, #105	; 0x69
 8009c8a:	f000 8096 	beq.w	8009dba <WiFi_Conn_ND+0x2ce>
 8009c8e:	f001 bb93 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c92:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009c96:	2b09      	cmp	r3, #9
 8009c98:	f201 838e 	bhi.w	800b3b8 <WiFi_Conn_ND+0x18cc>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <WiFi_Conn_ND+0x1b8>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	0800ab4b 	.word	0x0800ab4b
 8009ca8:	0800b3b9 	.word	0x0800b3b9
 8009cac:	0800b3b9 	.word	0x0800b3b9
 8009cb0:	0800b3b9 	.word	0x0800b3b9
 8009cb4:	0800b3b9 	.word	0x0800b3b9
 8009cb8:	0800ac19 	.word	0x0800ac19
 8009cbc:	0800acb9 	.word	0x0800acb9
 8009cc0:	0800ad59 	.word	0x0800ad59
 8009cc4:	0800adf9 	.word	0x0800adf9
 8009cc8:	0800ae99 	.word	0x0800ae99
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd2:	2b64      	cmp	r3, #100	; 0x64
 8009cd4:	d046      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d041      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	2b1c      	cmp	r3, #28
 8009ce8:	d03c      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d037      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfa:	2b04      	cmp	r3, #4
 8009cfc:	d032      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d04:	2b13      	cmp	r3, #19
 8009d06:	d02d      	beq.n	8009d64 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7fc fc5f 	bl	80065cc <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d14e      	bne.n	8009db6 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7fc fde7 	bl	80068ec <AT_ESP8266_ND>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d109      	bne.n	8009d4c <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7f7 fbd8 	bl	80014fc <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	2364      	movs	r3, #100	; 0x64
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f7fb fb91 	bl	8005484 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009d62:	e028      	b.n	8009db6 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d004      	beq.n	8009d78 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009d74:	2b1c      	cmp	r3, #28
 8009d76:	d103      	bne.n	8009d80 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	226d      	movs	r2, #109	; 0x6d
 8009d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d00f      	beq.n	8009daa <WiFi_Conn_ND+0x2be>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d00a      	beq.n	8009daa <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9a:	2b0b      	cmp	r3, #11
 8009d9c:	d005      	beq.n	8009daa <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da4:	2b0c      	cmp	r3, #12
 8009da6:	f041 82d8 	bne.w	800b35a <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2269      	movs	r2, #105	; 0x69
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009db2:	f001 bad2 	b.w	800b35a <WiFi_Conn_ND+0x186e>
 8009db6:	f001 bad0 	b.w	800b35a <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7fc fc06 	bl	80065cc <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2264      	movs	r2, #100	; 0x64
 8009dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009de0:	f001 baea 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7fc fc18 	bl	8006624 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009e06:	e00e      	b.n	8009e26 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7fc fbf5 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	22c8      	movs	r2, #200	; 0xc8
 8009e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2c:	2b04      	cmp	r3, #4
 8009e2e:	f041 8296 	bne.w	800b35e <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7fc fbca 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2264      	movs	r2, #100	; 0x64
 8009e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e50:	f001 ba85 	b.w	800b35e <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5a:	2bc8      	cmp	r3, #200	; 0xc8
 8009e5c:	d04f      	beq.n	8009efe <WiFi_Conn_ND+0x412>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d04a      	beq.n	8009efe <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d045      	beq.n	8009efe <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	2b03      	cmp	r3, #3
 8009e7a:	d040      	beq.n	8009efe <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d03b      	beq.n	8009efe <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	2b0a      	cmp	r3, #10
 8009e8e:	d036      	beq.n	8009efe <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e96:	2b0b      	cmp	r3, #11
 8009e98:	d031      	beq.n	8009efe <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea0:	2b0c      	cmp	r3, #12
 8009ea2:	d02c      	beq.n	8009efe <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7fc fba7 	bl	80065f8 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d124      	bne.n	8009efe <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f7fc fd19 	bl	80068ec <AT_ESP8266_ND>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d109      	bne.n	8009ee8 <WiFi_Conn_ND+0x3fc>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7f7 fb0a 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	2364      	movs	r3, #100	; 0x64
 8009ef8:	68b8      	ldr	r0, [r7, #8]
 8009efa:	f7fb fac3 	bl	8005484 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d004      	beq.n	8009f12 <WiFi_Conn_ND+0x426>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	2b0c      	cmp	r3, #12
 8009f10:	d103      	bne.n	8009f1a <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	22d1      	movs	r2, #209	; 0xd1
 8009f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d00a      	beq.n	8009f3a <WiFi_Conn_ND+0x44e>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d005      	beq.n	8009f3a <WiFi_Conn_ND+0x44e>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	f041 8214 	bne.w	800b362 <WiFi_Conn_ND+0x1876>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	22cd      	movs	r2, #205	; 0xcd
 8009f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009f42:	f001 ba0e 	b.w	800b362 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009f46:	f241 3088 	movw	r0, #5000	; 0x1388
 8009f4a:	f7f8 fde7 	bl	8002b1c <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7fc fb52 	bl	80065f8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	22c8      	movs	r2, #200	; 0xc8
 8009f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	f041 81f7 	bne.w	800b366 <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7fc fb27 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2264      	movs	r2, #100	; 0x64
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009f96:	f001 b9e6 	b.w	800b366 <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d108      	bne.n	8009fbe <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f240 3229 	movw	r2, #809	; 0x329
 8009fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc4:	2b0a      	cmp	r3, #10
 8009fc6:	d004      	beq.n	8009fd2 <WiFi_Conn_ND+0x4e6>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fce:	2b0d      	cmp	r3, #13
 8009fd0:	d10a      	bne.n	8009fe8 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7fc fb10 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	22c8      	movs	r2, #200	; 0xc8
 8009fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d10e      	bne.n	800a010 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f7fc faea 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2264      	movs	r2, #100	; 0x64
 8009ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a016:	2b00      	cmp	r3, #0
 800a018:	d011      	beq.n	800a03e <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7fc fb5a 	bl	80066d4 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a03a:	f001 b9bd 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7fc faf0 	bl	8006624 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a056:	f001 b9af 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a064:	d03b      	beq.n	800a0de <WiFi_Conn_ND+0x5f2>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d036      	beq.n	800a0de <WiFi_Conn_ND+0x5f2>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	2b0a      	cmp	r3, #10
 800a078:	d031      	beq.n	800a0de <WiFi_Conn_ND+0x5f2>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a080:	2b0d      	cmp	r3, #13
 800a082:	d02c      	beq.n	800a0de <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7fc faf9 	bl	800667c <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a090:	2b01      	cmp	r3, #1
 800a092:	d124      	bne.n	800a0de <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7fc fc29 	bl	80068ec <AT_ESP8266_ND>
 800a09a:	4602      	mov	r2, r0
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d109      	bne.n	800a0c8 <WiFi_Conn_ND+0x5dc>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7f7 fa1a 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	2364      	movs	r3, #100	; 0x64
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f7fb f9d3 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e4:	2b0a      	cmp	r3, #10
 800a0e6:	d005      	beq.n	800a0f4 <WiFi_Conn_ND+0x608>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ee:	2b0d      	cmp	r3, #13
 800a0f0:	f041 813b 	bne.w	800b36a <WiFi_Conn_ND+0x187e>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f240 1235 	movw	r2, #309	; 0x135
 800a0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a0fe:	f001 b934 	b.w	800b36a <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7fc fa4c 	bl	80065a0 <NOP>
			}
			break;
 800a108:	f001 b956 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7fc fa6f 	bl	80065f8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	22c8      	movs	r2, #200	; 0xc8
 800a11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b04      	cmp	r3, #4
 800a132:	f041 811c 	bne.w	800b36e <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7fc fa48 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2264      	movs	r2, #100	; 0x64
 800a140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a154:	f001 b90b 	b.w	800b36e <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a162:	d04f      	beq.n	800a204 <WiFi_Conn_ND+0x718>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16a:	2b04      	cmp	r3, #4
 800a16c:	d04a      	beq.n	800a204 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a174:	2b01      	cmp	r3, #1
 800a176:	d045      	beq.n	800a204 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d040      	beq.n	800a204 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a188:	2b07      	cmp	r3, #7
 800a18a:	d03b      	beq.n	800a204 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a192:	2b08      	cmp	r3, #8
 800a194:	d036      	beq.n	800a204 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19c:	2b1e      	cmp	r3, #30
 800a19e:	d031      	beq.n	800a204 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a6:	2b1f      	cmp	r3, #31
 800a1a8:	d02c      	beq.n	800a204 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7fc fa3a 	bl	8006624 <MUX>
						if(b->_enviaruart==1)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d124      	bne.n	800a204 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7fc fb96 	bl	80068ec <AT_ESP8266_ND>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d109      	bne.n	800a1ee <WiFi_Conn_ND+0x702>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f7f7 f987 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	2364      	movs	r3, #100	; 0x64
 800a1fe:	68b8      	ldr	r0, [r7, #8]
 800a200:	f7fb f940 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d009      	beq.n	800a222 <WiFi_Conn_ND+0x736>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a214:	2b07      	cmp	r3, #7
 800a216:	d004      	beq.n	800a222 <WiFi_Conn_ND+0x736>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21e:	2b08      	cmp	r3, #8
 800a220:	d104      	bne.n	800a22c <WiFi_Conn_ND+0x740>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f240 1299 	movw	r2, #409	; 0x199
 800a228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a232:	2b02      	cmp	r3, #2
 800a234:	d00a      	beq.n	800a24c <WiFi_Conn_ND+0x760>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23c:	2b1e      	cmp	r3, #30
 800a23e:	d005      	beq.n	800a24c <WiFi_Conn_ND+0x760>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a246:	2b1f      	cmp	r3, #31
 800a248:	f041 8093 	bne.w	800b372 <WiFi_Conn_ND+0x1886>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f240 1295 	movw	r2, #405	; 0x195
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a256:	f001 b88c 	b.w	800b372 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7fc f9a0 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	2b04      	cmp	r3, #4
 800a268:	d112      	bne.n	800a290 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7fc f9ae 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2264      	movs	r2, #100	; 0x64
 800a274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	2b0a      	cmp	r3, #10
 800a298:	d005      	beq.n	800a2a6 <WiFi_Conn_ND+0x7ba>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a0:	2b0d      	cmp	r3, #13
 800a2a2:	f041 8068 	bne.w	800b376 <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7fc f9a6 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	22c8      	movs	r2, #200	; 0xc8
 800a2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a2c4:	f001 b857 	b.w	800b376 <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7fc f969 	bl	80065a0 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d10e      	bne.n	800a2fe <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f7fc f973 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2264      	movs	r2, #100	; 0x64
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a304:	2b0a      	cmp	r3, #10
 800a306:	d004      	beq.n	800a312 <WiFi_Conn_ND+0x826>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	2b0d      	cmp	r3, #13
 800a310:	d10a      	bne.n	800a328 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f7fc f970 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	22c8      	movs	r2, #200	; 0xc8
 800a31c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7fc f991 	bl	8006650 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a340:	f001 b83a 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a34a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a34e:	d045      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a356:	2b04      	cmp	r3, #4
 800a358:	d040      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a360:	2b01      	cmp	r3, #1
 800a362:	d03b      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d036      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a374:	2b1b      	cmp	r3, #27
 800a376:	d031      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	2b21      	cmp	r3, #33	; 0x21
 800a380:	d02c      	beq.n	800a3dc <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7fc f964 	bl	8006650 <IPDef>
						if(b->_enviaruart==1)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d124      	bne.n	800a3dc <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7fc faaa 	bl	80068ec <AT_ESP8266_ND>
 800a398:	4602      	mov	r2, r0
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d109      	bne.n	800a3c6 <WiFi_Conn_ND+0x8da>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	f7f7 f89b 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	2364      	movs	r3, #100	; 0x64
 800a3d6:	68b8      	ldr	r0, [r7, #8]
 800a3d8:	f7fb f854 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d004      	beq.n	800a3f0 <WiFi_Conn_ND+0x904>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ec:	2b1b      	cmp	r3, #27
 800a3ee:	d104      	bne.n	800a3fa <WiFi_Conn_ND+0x90e>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a400:	2b02      	cmp	r3, #2
 800a402:	d005      	beq.n	800a410 <WiFi_Conn_ND+0x924>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40a:	2b21      	cmp	r3, #33	; 0x21
 800a40c:	f040 87b5 	bne.w	800b37a <WiFi_Conn_ND+0x188e>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a41a:	f000 bfae 	b.w	800b37a <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7fc f8be 	bl	80065a0 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d004      	beq.n	800a438 <WiFi_Conn_ND+0x94c>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a434:	2b02      	cmp	r3, #2
 800a436:	d112      	bne.n	800a45e <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fc f8c7 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2264      	movs	r2, #100	; 0x64
 800a442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	2b0a      	cmp	r3, #10
 800a466:	d005      	beq.n	800a474 <WiFi_Conn_ND+0x988>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46e:	2b0d      	cmp	r3, #13
 800a470:	f040 8785 	bne.w	800b37e <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7fc f8bf 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	22c8      	movs	r2, #200	; 0xc8
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a492:	f000 bf74 	b.w	800b37e <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7fc f882 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d112      	bne.n	800a4cc <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7fc f890 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2264      	movs	r2, #100	; 0x64
 800a4b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d2:	2b0a      	cmp	r3, #10
 800a4d4:	d004      	beq.n	800a4e0 <WiFi_Conn_ND+0x9f4>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	2b0d      	cmp	r3, #13
 800a4de:	d10e      	bne.n	800a4fe <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7fc f889 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	22c8      	movs	r2, #200	; 0xc8
 800a4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a504:	2b00      	cmp	r3, #0
 800a506:	d111      	bne.n	800a52c <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7fc f8cd 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a528:	f000 bf46 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7fc f863 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	22c8      	movs	r2, #200	; 0xc8
 800a536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a54a:	f000 bf35 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a554:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a558:	d04a      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a560:	2b02      	cmp	r3, #2
 800a562:	d045      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d040      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	2b0a      	cmp	r3, #10
 800a576:	d03b      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	2b0e      	cmp	r3, #14
 800a580:	d036      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a588:	2b0f      	cmp	r3, #15
 800a58a:	d031      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a592:	2b10      	cmp	r3, #16
 800a594:	d02c      	beq.n	800a5f0 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7fc f886 	bl	80066a8 <ConectarTCP>
						if(b->_enviaruart==1)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d124      	bne.n	800a5f0 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7fc f9a0 	bl	80068ec <AT_ESP8266_ND>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d109      	bne.n	800a5da <WiFi_Conn_ND+0xaee>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7f6 ff91 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	2364      	movs	r3, #100	; 0x64
 800a5ea:	68b8      	ldr	r0, [r7, #8]
 800a5ec:	f7fa ff4a 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d009      	beq.n	800a60e <WiFi_Conn_ND+0xb22>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a600:	2b0e      	cmp	r3, #14
 800a602:	d004      	beq.n	800a60e <WiFi_Conn_ND+0xb22>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d106      	bne.n	800a61c <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f240 2261 	movw	r2, #609	; 0x261
 800a614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a618:	f000 beb3 	b.w	800b382 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a622:	2b02      	cmp	r3, #2
 800a624:	d005      	beq.n	800a632 <WiFi_Conn_ND+0xb46>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62c:	2b10      	cmp	r3, #16
 800a62e:	f040 86a8 	bne.w	800b382 <WiFi_Conn_ND+0x1896>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f240 225d 	movw	r2, #605	; 0x25d
 800a638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a63c:	f000 bea1 	b.w	800b382 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7fb ffad 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d112      	bne.n	800a676 <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7fb ffbb 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2264      	movs	r2, #100	; 0x64
 800a65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67c:	2b0a      	cmp	r3, #10
 800a67e:	d004      	beq.n	800a68a <WiFi_Conn_ND+0xb9e>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	2b0d      	cmp	r3, #13
 800a688:	d10e      	bne.n	800a6a8 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7fb ffb4 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	22c8      	movs	r2, #200	; 0xc8
 800a694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d00a      	beq.n	800a6c8 <WiFi_Conn_ND+0xbdc>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d005      	beq.n	800a6c8 <WiFi_Conn_ND+0xbdc>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c2:	2b0e      	cmp	r3, #14
 800a6c4:	f040 865f 	bne.w	800b386 <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7fb ffed 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a6e8:	f000 be4d 	b.w	800b386 <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7fb ff57 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d112      	bne.n	800a722 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7fb ff65 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2264      	movs	r2, #100	; 0x64
 800a706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a728:	2b0a      	cmp	r3, #10
 800a72a:	d004      	beq.n	800a736 <WiFi_Conn_ND+0xc4a>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a732:	2b0d      	cmp	r3, #13
 800a734:	d10e      	bne.n	800a754 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7fb ff5e 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	22c8      	movs	r2, #200	; 0xc8
 800a740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d004      	beq.n	800a768 <WiFi_Conn_ND+0xc7c>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a764:	2b10      	cmp	r3, #16
 800a766:	d10f      	bne.n	800a788 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7fb ff9d 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a78e:	2b0e      	cmp	r3, #14
 800a790:	d005      	beq.n	800a79e <WiFi_Conn_ND+0xcb2>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a798:	2b0f      	cmp	r3, #15
 800a79a:	f040 85f6 	bne.w	800b38a <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	f240 85f0 	bls.w	800b38a <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7fb ffbe 	bl	800672c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a7b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a7ca:	f000 bdde 	b.w	800b38a <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a7d8:	d054      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d04f      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ea:	2b0a      	cmp	r3, #10
 800a7ec:	d04a      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d045      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	2b11      	cmp	r3, #17
 800a800:	d040      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a808:	2b14      	cmp	r3, #20
 800a80a:	d03b      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	2b12      	cmp	r3, #18
 800a814:	d036      	beq.n	800a884 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d907      	bls.n	800a830 <WiFi_Conn_ND+0xd44>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7fb ff7e 	bl	800672c <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a836:	2b01      	cmp	r3, #1
 800a838:	d124      	bne.n	800a884 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7fc f856 	bl	80068ec <AT_ESP8266_ND>
 800a840:	4602      	mov	r2, r0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a856:	2b01      	cmp	r3, #1
 800a858:	d109      	bne.n	800a86e <WiFi_Conn_ND+0xd82>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f7f6 fe47 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	2364      	movs	r3, #100	; 0x64
 800a87e:	68b8      	ldr	r0, [r7, #8]
 800a880:	f7fa fe00 	bl	8005484 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a88e:	d13b      	bne.n	800a908 <WiFi_Conn_ND+0xe1c>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a896:	2b01      	cmp	r3, #1
 800a898:	d136      	bne.n	800a908 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d031      	beq.n	800a908 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8aa:	2b0a      	cmp	r3, #10
 800a8ac:	d02c      	beq.n	800a908 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	2b10      	cmp	r3, #16
 800a8b6:	d027      	beq.n	800a908 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b11      	cmp	r3, #17
 800a8c0:	d022      	beq.n	800a908 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b12      	cmp	r3, #18
 800a8ca:	d01d      	beq.n	800a908 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d109      	bne.n	800a8f2 <WiFi_Conn_ND+0xe06>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7f6 fe05 	bl	80014fc <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	2364      	movs	r3, #100	; 0x64
 800a902:	68b8      	ldr	r0, [r7, #8]
 800a904:	f7fa fdbe 	bl	8005484 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90e:	2b13      	cmp	r3, #19
 800a910:	d104      	bne.n	800a91c <WiFi_Conn_ND+0xe30>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a922:	2b02      	cmp	r3, #2
 800a924:	d014      	beq.n	800a950 <WiFi_Conn_ND+0xe64>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92c:	2b0a      	cmp	r3, #10
 800a92e:	d00f      	beq.n	800a950 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a936:	2b10      	cmp	r3, #16
 800a938:	d00a      	beq.n	800a950 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a940:	2b11      	cmp	r3, #17
 800a942:	d005      	beq.n	800a950 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94a:	2b12      	cmp	r3, #18
 800a94c:	f040 851f 	bne.w	800b38e <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a95a:	f000 bd18 	b.w	800b38e <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7fb fe1e 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d112      	bne.n	800a994 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7fb fe2c 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2264      	movs	r2, #100	; 0x64
 800a978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	2b0a      	cmp	r3, #10
 800a99c:	d004      	beq.n	800a9a8 <WiFi_Conn_ND+0xebc>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a4:	2b0d      	cmp	r3, #13
 800a9a6:	d10e      	bne.n	800a9c6 <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7fb fe25 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	22c8      	movs	r2, #200	; 0xc8
 800a9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9cc:	2b0c      	cmp	r3, #12
 800a9ce:	d10f      	bne.n	800a9f0 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7fb fe69 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d00f      	beq.n	800aa1a <WiFi_Conn_ND+0xf2e>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d00a      	beq.n	800aa1a <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0a:	2b11      	cmp	r3, #17
 800aa0c:	d005      	beq.n	800aa1a <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa14:	2b12      	cmp	r3, #18
 800aa16:	f040 84bc 	bne.w	800b392 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7fb fe44 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aa3a:	f000 bcaa 	b.w	800b392 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7fb fdae 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d112      	bne.n	800aa74 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7fb fdbc 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2264      	movs	r2, #100	; 0x64
 800aa58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa7a:	2b0a      	cmp	r3, #10
 800aa7c:	d004      	beq.n	800aa88 <WiFi_Conn_ND+0xf9c>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa84:	2b0d      	cmp	r3, #13
 800aa86:	d10e      	bne.n	800aaa6 <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7fb fdb5 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	22c8      	movs	r2, #200	; 0xc8
 800aa92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d00e      	beq.n	800aace <WiFi_Conn_ND+0xfe2>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab6:	2b0b      	cmp	r3, #11
 800aab8:	d009      	beq.n	800aace <WiFi_Conn_ND+0xfe2>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac0:	2b0c      	cmp	r3, #12
 800aac2:	d004      	beq.n	800aace <WiFi_Conn_ND+0xfe2>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	2b10      	cmp	r3, #16
 800aacc:	d10f      	bne.n	800aaee <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fb fdea 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aaee:	20c8      	movs	r0, #200	; 0xc8
 800aaf0:	f7f8 f814 	bl	8002b1c <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d916      	bls.n	800ab2c <WiFi_Conn_ND+0x1040>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d011      	beq.n	800ab2c <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7fb fe0f 	bl	800672c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ab14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ab28:	f000 bc46 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f240 2261 	movw	r2, #609	; 0x261
 800ab32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ab46:	f000 bc37 	b.w	800b3b8 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab50:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ab54:	d045      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d040      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab66:	2b0a      	cmp	r3, #10
 800ab68:	d03b      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab70:	2b15      	cmp	r3, #21
 800ab72:	d036      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7a:	2b16      	cmp	r3, #22
 800ab7c:	d031      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab84:	2b17      	cmp	r3, #23
 800ab86:	d02c      	beq.n	800abe2 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7fb fda3 	bl	80066d4 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d124      	bne.n	800abe2 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7fb fea7 	bl	80068ec <AT_ESP8266_ND>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d109      	bne.n	800abcc <WiFi_Conn_ND+0x10e0>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7f6 fc98 	bl	80014fc <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abd8:	b29a      	uxth	r2, r3
 800abda:	2364      	movs	r3, #100	; 0x64
 800abdc:	68b8      	ldr	r0, [r7, #8]
 800abde:	f7fa fc51 	bl	8005484 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe8:	2b15      	cmp	r3, #21
 800abea:	d004      	beq.n	800abf6 <WiFi_Conn_ND+0x110a>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	2b17      	cmp	r3, #23
 800abf4:	d104      	bne.n	800ac00 <WiFi_Conn_ND+0x1114>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f240 3229 	movw	r2, #809	; 0x329
 800abfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac06:	2b16      	cmp	r3, #22
 800ac08:	f040 83c5 	bne.w	800b396 <WiFi_Conn_ND+0x18aa>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f240 3225 	movw	r2, #805	; 0x325
 800ac12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ac16:	e3be      	b.n	800b396 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7fb fcc1 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d112      	bne.n	800ac4e <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f7fb fccf 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2264      	movs	r2, #100	; 0x64
 800ac32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac54:	2b0a      	cmp	r3, #10
 800ac56:	d004      	beq.n	800ac62 <WiFi_Conn_ND+0x1176>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5e:	2b0d      	cmp	r3, #13
 800ac60:	d10e      	bne.n	800ac80 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7fb fcc8 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	22c8      	movs	r2, #200	; 0xc8
 800ac6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d005      	beq.n	800ac96 <WiFi_Conn_ND+0x11aa>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	f040 8382 	bne.w	800b39a <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7fb fd06 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800acb6:	e370      	b.n	800b39a <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7fb fc71 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d112      	bne.n	800acee <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7fb fc7f 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2264      	movs	r2, #100	; 0x64
 800acd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf4:	2b0a      	cmp	r3, #10
 800acf6:	d004      	beq.n	800ad02 <WiFi_Conn_ND+0x1216>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfe:	2b0d      	cmp	r3, #13
 800ad00:	d10e      	bne.n	800ad20 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7fb fc78 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	22c8      	movs	r2, #200	; 0xc8
 800ad0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d005      	beq.n	800ad36 <WiFi_Conn_ND+0x124a>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad30:	2b10      	cmp	r3, #16
 800ad32:	f040 8334 	bne.w	800b39e <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7fb fcb6 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad56:	e322      	b.n	800b39e <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7fb fc21 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d112      	bne.n	800ad8e <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7fb fc2f 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2264      	movs	r2, #100	; 0x64
 800ad72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	2b0a      	cmp	r3, #10
 800ad96:	d004      	beq.n	800ada2 <WiFi_Conn_ND+0x12b6>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9e:	2b0d      	cmp	r3, #13
 800ada0:	d10e      	bne.n	800adc0 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7fb fc28 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	22c8      	movs	r2, #200	; 0xc8
 800adac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d005      	beq.n	800add6 <WiFi_Conn_ND+0x12ea>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add0:	2b10      	cmp	r3, #16
 800add2:	f040 82e6 	bne.w	800b3a2 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7fb fc66 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800adf6:	e2d4      	b.n	800b3a2 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7fb fbd1 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d112      	bne.n	800ae2e <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7fb fbdf 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2264      	movs	r2, #100	; 0x64
 800ae12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae34:	2b0a      	cmp	r3, #10
 800ae36:	d004      	beq.n	800ae42 <WiFi_Conn_ND+0x1356>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3e:	2b0d      	cmp	r3, #13
 800ae40:	d10e      	bne.n	800ae60 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7fb fbd8 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	22c8      	movs	r2, #200	; 0xc8
 800ae4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d005      	beq.n	800ae76 <WiFi_Conn_ND+0x138a>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae70:	2b10      	cmp	r3, #16
 800ae72:	f040 8298 	bne.w	800b3a6 <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7fb fc16 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae96:	e286      	b.n	800b3a6 <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7fb fb81 	bl	80065a0 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d112      	bne.n	800aed6 <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7fb fb8b 	bl	80065cc <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2264      	movs	r2, #100	; 0x64
 800aeba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aedc:	2b0a      	cmp	r3, #10
 800aede:	d004      	beq.n	800aeea <WiFi_Conn_ND+0x13fe>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee6:	2b0d      	cmp	r3, #13
 800aee8:	d10e      	bne.n	800af08 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7fb fb84 	bl	80065f8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	22c8      	movs	r2, #200	; 0xc8
 800aef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d004      	beq.n	800af1c <WiFi_Conn_ND+0x1430>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af18:	2b10      	cmp	r3, #16
 800af1a:	d10f      	bne.n	800af3c <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7fb fbc3 	bl	80066a8 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800af42:	2b01      	cmp	r3, #1
 800af44:	f040 8231 	bne.w	800b3aa <WiFi_Conn_ND+0x18be>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 822b 	beq.w	800b3aa <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f7fb fbd3 	bl	8006700 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800af60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800af74:	e219      	b.n	800b3aa <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800af80:	d063      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d05e      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af92:	2b0a      	cmp	r3, #10
 800af94:	d059      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800af9c:	2b0b      	cmp	r3, #11
 800af9e:	d054      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800afa6:	2b0c      	cmp	r3, #12
 800afa8:	d04f      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800afb0:	2b10      	cmp	r3, #16
 800afb2:	d04a      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800afba:	2b11      	cmp	r3, #17
 800afbc:	d045      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800afc4:	2b12      	cmp	r3, #18
 800afc6:	d040      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800afce:	2b13      	cmp	r3, #19
 800afd0:	d03b      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800afd8:	2b16      	cmp	r3, #22
 800afda:	d036      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe2:	2b19      	cmp	r3, #25
 800afe4:	d031      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d02c      	beq.n	800b04a <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7fb fb85 	bl	8006700 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800affc:	2b01      	cmp	r3, #1
 800affe:	d124      	bne.n	800b04a <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7fb fc73 	bl	80068ec <AT_ESP8266_ND>
 800b006:	4602      	mov	r2, r0
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d109      	bne.n	800b034 <WiFi_Conn_ND+0x1548>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f7f6 fa64 	bl	80014fc <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b040:	b29a      	uxth	r2, r3
 800b042:	2364      	movs	r3, #100	; 0x64
 800b044:	68b8      	ldr	r0, [r7, #8]
 800b046:	f7fa fa1d 	bl	8005484 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b054:	d154      	bne.n	800b100 <WiFi_Conn_ND+0x1614>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d14f      	bne.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b066:	2b02      	cmp	r3, #2
 800b068:	d04a      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b070:	2b0a      	cmp	r3, #10
 800b072:	d045      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d040      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b084:	2b0c      	cmp	r3, #12
 800b086:	d03b      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b08e:	2b10      	cmp	r3, #16
 800b090:	d036      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b098:	2b11      	cmp	r3, #17
 800b09a:	d031      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b0a2:	2b12      	cmp	r3, #18
 800b0a4:	d02c      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b0ac:	2b13      	cmp	r3, #19
 800b0ae:	d027      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b0b6:	2b16      	cmp	r3, #22
 800b0b8:	d022      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c0:	2b19      	cmp	r3, #25
 800b0c2:	d01d      	beq.n	800b100 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d109      	bne.n	800b0ea <WiFi_Conn_ND+0x15fe>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7f6 fa09 	bl	80014fc <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	2364      	movs	r3, #100	; 0x64
 800b0fa:	68b8      	ldr	r0, [r7, #8]
 800b0fc:	f7fa f9c2 	bl	8005484 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b106:	2b13      	cmp	r3, #19
 800b108:	d104      	bne.n	800b114 <WiFi_Conn_ND+0x1628>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f240 328d 	movw	r2, #909	; 0x38d
 800b110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d02d      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b124:	2b04      	cmp	r3, #4
 800b126:	d028      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b12e:	2b0a      	cmp	r3, #10
 800b130:	d023      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	d01e      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b142:	2b0c      	cmp	r3, #12
 800b144:	d019      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14c:	2b10      	cmp	r3, #16
 800b14e:	d014      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b156:	2b11      	cmp	r3, #17
 800b158:	d00f      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b160:	2b12      	cmp	r3, #18
 800b162:	d00a      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b16a:	2b16      	cmp	r3, #22
 800b16c:	d005      	beq.n	800b17a <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b174:	2b19      	cmp	r3, #25
 800b176:	f040 811a 	bne.w	800b3ae <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f240 3289 	movw	r2, #905	; 0x389
 800b180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b184:	e113      	b.n	800b3ae <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7fb fa0a 	bl	80065a0 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b192:	2b04      	cmp	r3, #4
 800b194:	d009      	beq.n	800b1aa <WiFi_Conn_ND+0x16be>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19c:	2b0b      	cmp	r3, #11
 800b19e:	d004      	beq.n	800b1aa <WiFi_Conn_ND+0x16be>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	2b0c      	cmp	r3, #12
 800b1a8:	d112      	bne.n	800b1d0 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7fb fa0e 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2264      	movs	r2, #100	; 0x64
 800b1b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d6:	2b0a      	cmp	r3, #10
 800b1d8:	d004      	beq.n	800b1e4 <WiFi_Conn_ND+0x16f8>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e0:	2b0d      	cmp	r3, #13
 800b1e2:	d10e      	bne.n	800b202 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7fb fa07 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	22c8      	movs	r2, #200	; 0xc8
 800b1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b208:	2b16      	cmp	r3, #22
 800b20a:	d10c      	bne.n	800b226 <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f240 3225 	movw	r2, #805	; 0x325
 800b212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22c:	2b18      	cmp	r3, #24
 800b22e:	d10c      	bne.n	800b24a <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f240 3229 	movw	r2, #809	; 0x329
 800b236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b250:	2b19      	cmp	r3, #25
 800b252:	d008      	beq.n	800b266 <WiFi_Conn_ND+0x177a>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25a:	2b11      	cmp	r3, #17
 800b25c:	d003      	beq.n	800b266 <WiFi_Conn_ND+0x177a>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2212      	movs	r2, #18
 800b262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 80a0 	bne.w	800b3b2 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b28c:	e091      	b.n	800b3b2 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7fb f986 	bl	80065a0 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d009      	beq.n	800b2b2 <WiFi_Conn_ND+0x17c6>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a4:	2b0b      	cmp	r3, #11
 800b2a6:	d004      	beq.n	800b2b2 <WiFi_Conn_ND+0x17c6>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ae:	2b0c      	cmp	r3, #12
 800b2b0:	d112      	bne.n	800b2d8 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7fb f98a 	bl	80065cc <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2264      	movs	r2, #100	; 0x64
 800b2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2de:	2b0a      	cmp	r3, #10
 800b2e0:	d004      	beq.n	800b2ec <WiFi_Conn_ND+0x1800>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e8:	2b0d      	cmp	r3, #13
 800b2ea:	d10e      	bne.n	800b30a <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7fb f983 	bl	80065f8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	22c8      	movs	r2, #200	; 0xc8
 800b2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b310:	2b01      	cmp	r3, #1
 800b312:	d004      	beq.n	800b31e <WiFi_Conn_ND+0x1832>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d14b      	bne.n	800b3b6 <WiFi_Conn_ND+0x18ca>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d046      	beq.n	800b3b6 <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7fb f9e9 	bl	8006700 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b358:	e02d      	b.n	800b3b6 <WiFi_Conn_ND+0x18ca>
			break;
 800b35a:	bf00      	nop
 800b35c:	e02c      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b35e:	bf00      	nop
 800b360:	e02a      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b362:	bf00      	nop
 800b364:	e028      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b366:	bf00      	nop
 800b368:	e026      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b36a:	bf00      	nop
 800b36c:	e024      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b36e:	bf00      	nop
 800b370:	e022      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b372:	bf00      	nop
 800b374:	e020      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b376:	bf00      	nop
 800b378:	e01e      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b37a:	bf00      	nop
 800b37c:	e01c      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b37e:	bf00      	nop
 800b380:	e01a      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b382:	bf00      	nop
 800b384:	e018      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b386:	bf00      	nop
 800b388:	e016      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b38a:	bf00      	nop
 800b38c:	e014      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b38e:	bf00      	nop
 800b390:	e012      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
			break;
 800b392:	bf00      	nop
 800b394:	e010      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b396:	bf00      	nop
 800b398:	e00e      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b39a:	bf00      	nop
 800b39c:	e00c      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b39e:	bf00      	nop
 800b3a0:	e00a      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3a2:	bf00      	nop
 800b3a4:	e008      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3a6:	bf00      	nop
 800b3a8:	e006      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3aa:	bf00      	nop
 800b3ac:	e004      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3ae:	bf00      	nop
 800b3b0:	e002      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3b2:	bf00      	nop
 800b3b4:	e000      	b.n	800b3b8 <WiFi_Conn_ND+0x18cc>
						break;
 800b3b6:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop

0800b3c8 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b3c8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ca:	b09c      	sub	sp, #112	; 0x70
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b3d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b3de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b3e6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b3ea:	f7f4 ff03 	bl	80001f4 <strlen>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3f6:	4413      	add	r3, r2
 800b3f8:	4aeb      	ldr	r2, [pc, #940]	; (800b7a8 <httpPOST+0x3e0>)
 800b3fa:	6810      	ldr	r0, [r2, #0]
 800b3fc:	6018      	str	r0, [r3, #0]
 800b3fe:	8892      	ldrh	r2, [r2, #4]
 800b400:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f7f4 fef6 	bl	80001f4 <strlen>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	68f9      	ldr	r1, [r7, #12]
 800b40e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b412:	f003 fecc 	bl	800f1ae <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b416:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b41a:	f7f4 feeb 	bl	80001f4 <strlen>
 800b41e:	4603      	mov	r3, r0
 800b420:	461a      	mov	r2, r3
 800b422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b426:	4413      	add	r3, r2
 800b428:	49e0      	ldr	r1, [pc, #896]	; (800b7ac <httpPOST+0x3e4>)
 800b42a:	461a      	mov	r2, r3
 800b42c:	460b      	mov	r3, r1
 800b42e:	cb03      	ldmia	r3!, {r0, r1}
 800b430:	6010      	str	r0, [r2, #0]
 800b432:	6051      	str	r1, [r2, #4]
 800b434:	8819      	ldrh	r1, [r3, #0]
 800b436:	789b      	ldrb	r3, [r3, #2]
 800b438:	8111      	strh	r1, [r2, #8]
 800b43a:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b43c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b440:	f7f4 fed8 	bl	80001f4 <strlen>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b44c:	4413      	add	r3, r2
 800b44e:	4ad8      	ldr	r2, [pc, #864]	; (800b7b0 <httpPOST+0x3e8>)
 800b450:	8811      	ldrh	r1, [r2, #0]
 800b452:	7892      	ldrb	r2, [r2, #2]
 800b454:	8019      	strh	r1, [r3, #0]
 800b456:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b458:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b45c:	f7f4 feca 	bl	80001f4 <strlen>
 800b460:	4603      	mov	r3, r0
 800b462:	461a      	mov	r2, r3
 800b464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b468:	4413      	add	r3, r2
 800b46a:	4ad2      	ldr	r2, [pc, #840]	; (800b7b4 <httpPOST+0x3ec>)
 800b46c:	6810      	ldr	r0, [r2, #0]
 800b46e:	6018      	str	r0, [r3, #0]
 800b470:	8891      	ldrh	r1, [r2, #4]
 800b472:	7992      	ldrb	r2, [r2, #6]
 800b474:	8099      	strh	r1, [r3, #4]
 800b476:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7f4 febb 	bl	80001f4 <strlen>
 800b47e:	4603      	mov	r3, r0
 800b480:	461a      	mov	r2, r3
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b488:	f003 fe91 	bl	800f1ae <strncat>
	strncat(post,":",1);
 800b48c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b490:	f7f4 feb0 	bl	80001f4 <strlen>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b49c:	4413      	add	r3, r2
 800b49e:	49c6      	ldr	r1, [pc, #792]	; (800b7b8 <httpPOST+0x3f0>)
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7f4 fea3 	bl	80001f4 <strlen>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4b8:	f003 fe79 	bl	800f1ae <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b4bc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4c0:	f7f4 fe98 	bl	80001f4 <strlen>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4cc:	4413      	add	r3, r2
 800b4ce:	4ab8      	ldr	r2, [pc, #736]	; (800b7b0 <httpPOST+0x3e8>)
 800b4d0:	8811      	ldrh	r1, [r2, #0]
 800b4d2:	7892      	ldrb	r2, [r2, #2]
 800b4d4:	8019      	strh	r1, [r3, #0]
 800b4d6:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b4d8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b4dc:	f7f4 fe8a 	bl	80001f4 <strlen>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4e8:	4413      	add	r3, r2
 800b4ea:	4ab4      	ldr	r2, [pc, #720]	; (800b7bc <httpPOST+0x3f4>)
 800b4ec:	461d      	mov	r5, r3
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4f2:	6028      	str	r0, [r5, #0]
 800b4f4:	6069      	str	r1, [r5, #4]
 800b4f6:	60aa      	str	r2, [r5, #8]
 800b4f8:	60eb      	str	r3, [r5, #12]
 800b4fa:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b4fc:	6128      	str	r0, [r5, #16]
 800b4fe:	6169      	str	r1, [r5, #20]
 800b500:	61aa      	str	r2, [r5, #24]
 800b502:	8823      	ldrh	r3, [r4, #0]
 800b504:	78a2      	ldrb	r2, [r4, #2]
 800b506:	83ab      	strh	r3, [r5, #28]
 800b508:	4613      	mov	r3, r2
 800b50a:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b50c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b510:	f7f4 fe70 	bl	80001f4 <strlen>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b51c:	4413      	add	r3, r2
 800b51e:	4aa4      	ldr	r2, [pc, #656]	; (800b7b0 <httpPOST+0x3e8>)
 800b520:	8811      	ldrh	r1, [r2, #0]
 800b522:	7892      	ldrb	r2, [r2, #2]
 800b524:	8019      	strh	r1, [r3, #0]
 800b526:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b528:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b52c:	f7f4 fe62 	bl	80001f4 <strlen>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b538:	4413      	add	r3, r2
 800b53a:	4aa1      	ldr	r2, [pc, #644]	; (800b7c0 <httpPOST+0x3f8>)
 800b53c:	461c      	mov	r4, r3
 800b53e:	4615      	mov	r5, r2
 800b540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b542:	6020      	str	r0, [r4, #0]
 800b544:	6061      	str	r1, [r4, #4]
 800b546:	60a2      	str	r2, [r4, #8]
 800b548:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b550:	887b      	ldrh	r3, [r7, #2]
 800b552:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f003 fbfd 	bl	800ed58 <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b55e:	2300      	movs	r3, #0
 800b560:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b564:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b568:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b56c:	4611      	mov	r1, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	f003 fbf2 	bl	800ed58 <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b574:	2300      	movs	r3, #0
 800b576:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b57a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b57e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b582:	4611      	mov	r1, r2
 800b584:	4618      	mov	r0, r3
 800b586:	f003 fbe7 	bl	800ed58 <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b58a:	2300      	movs	r3, #0
 800b58c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800b590:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b594:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b598:	4611      	mov	r1, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f003 fbdc 	bl	800ed58 <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800b5a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b5aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5ae:	4611      	mov	r1, r2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f003 fbd1 	bl	800ed58 <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b5bc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b5c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f003 fbc6 	bl	800ed58 <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800b5d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b5d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f003 fbbb 	bl	800ed58 <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800b5e8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b5ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f003 fbb0 	bl	800ed58 <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800b5fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b606:	4611      	mov	r1, r2
 800b608:	4618      	mov	r0, r3
 800b60a:	f003 fba5 	bl	800ed58 <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b60e:	2300      	movs	r3, #0
 800b610:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800b614:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b618:	f107 0220 	add.w	r2, r7, #32
 800b61c:	4611      	mov	r1, r2
 800b61e:	4618      	mov	r0, r3
 800b620:	f003 fb9a 	bl	800ed58 <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800b624:	2300      	movs	r3, #0
 800b626:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b628:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b62c:	f107 0218 	add.w	r2, r7, #24
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f003 fb90 	bl	800ed58 <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b638:	4862      	ldr	r0, [pc, #392]	; (800b7c4 <httpPOST+0x3fc>)
 800b63a:	f7f4 fddb 	bl	80001f4 <strlen>
 800b63e:	4603      	mov	r3, r0
 800b640:	461a      	mov	r2, r3
 800b642:	4960      	ldr	r1, [pc, #384]	; (800b7c4 <httpPOST+0x3fc>)
 800b644:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b648:	f003 fdb1 	bl	800f1ae <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b64c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b650:	4618      	mov	r0, r3
 800b652:	f7f4 fdcf 	bl	80001f4 <strlen>
 800b656:	4602      	mov	r2, r0
 800b658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b65c:	4619      	mov	r1, r3
 800b65e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b662:	f003 fda4 	bl	800f1ae <strncat>
	strncat(body,filtro,strlen(filtro));
 800b666:	4858      	ldr	r0, [pc, #352]	; (800b7c8 <httpPOST+0x400>)
 800b668:	f7f4 fdc4 	bl	80001f4 <strlen>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
 800b670:	4955      	ldr	r1, [pc, #340]	; (800b7c8 <httpPOST+0x400>)
 800b672:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b676:	f003 fd9a 	bl	800f1ae <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b67a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f4 fdb8 	bl	80001f4 <strlen>
 800b684:	4602      	mov	r2, r0
 800b686:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b68a:	4619      	mov	r1, r3
 800b68c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b690:	f003 fd8d 	bl	800f1ae <strncat>
	strncat(body,ev1,strlen(ev1));
 800b694:	484d      	ldr	r0, [pc, #308]	; (800b7cc <httpPOST+0x404>)
 800b696:	f7f4 fdad 	bl	80001f4 <strlen>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	494b      	ldr	r1, [pc, #300]	; (800b7cc <httpPOST+0x404>)
 800b6a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6a4:	f003 fd83 	bl	800f1ae <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b6a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f4 fda1 	bl	80001f4 <strlen>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6be:	f003 fd76 	bl	800f1ae <strncat>
	strncat(body,ev2,strlen(ev2));
 800b6c2:	4843      	ldr	r0, [pc, #268]	; (800b7d0 <httpPOST+0x408>)
 800b6c4:	f7f4 fd96 	bl	80001f4 <strlen>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	4940      	ldr	r1, [pc, #256]	; (800b7d0 <httpPOST+0x408>)
 800b6ce:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6d2:	f003 fd6c 	bl	800f1ae <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b6d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7f4 fd8a 	bl	80001f4 <strlen>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b6ec:	f003 fd5f 	bl	800f1ae <strncat>
	strncat(body,ev3,strlen(ev3));
 800b6f0:	4838      	ldr	r0, [pc, #224]	; (800b7d4 <httpPOST+0x40c>)
 800b6f2:	f7f4 fd7f 	bl	80001f4 <strlen>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4936      	ldr	r1, [pc, #216]	; (800b7d4 <httpPOST+0x40c>)
 800b6fc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b700:	f003 fd55 	bl	800f1ae <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f4 fd73 	bl	80001f4 <strlen>
 800b70e:	4602      	mov	r2, r0
 800b710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b714:	4619      	mov	r1, r3
 800b716:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b71a:	f003 fd48 	bl	800f1ae <strncat>
	strncat(body,ev4,strlen(ev4));
 800b71e:	482e      	ldr	r0, [pc, #184]	; (800b7d8 <httpPOST+0x410>)
 800b720:	f7f4 fd68 	bl	80001f4 <strlen>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	492b      	ldr	r1, [pc, #172]	; (800b7d8 <httpPOST+0x410>)
 800b72a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b72e:	f003 fd3e 	bl	800f1ae <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b736:	4618      	mov	r0, r3
 800b738:	f7f4 fd5c 	bl	80001f4 <strlen>
 800b73c:	4602      	mov	r2, r0
 800b73e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b742:	4619      	mov	r1, r3
 800b744:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b748:	f003 fd31 	bl	800f1ae <strncat>
	strncat(body,ev5,strlen(ev5));
 800b74c:	4823      	ldr	r0, [pc, #140]	; (800b7dc <httpPOST+0x414>)
 800b74e:	f7f4 fd51 	bl	80001f4 <strlen>
 800b752:	4603      	mov	r3, r0
 800b754:	461a      	mov	r2, r3
 800b756:	4921      	ldr	r1, [pc, #132]	; (800b7dc <httpPOST+0x414>)
 800b758:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b75c:	f003 fd27 	bl	800f1ae <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800b760:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b764:	4618      	mov	r0, r3
 800b766:	f7f4 fd45 	bl	80001f4 <strlen>
 800b76a:	4602      	mov	r2, r0
 800b76c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b770:	4619      	mov	r1, r3
 800b772:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b776:	f003 fd1a 	bl	800f1ae <strncat>
	strncat(body,ev6,strlen(ev6));
 800b77a:	4819      	ldr	r0, [pc, #100]	; (800b7e0 <httpPOST+0x418>)
 800b77c:	f7f4 fd3a 	bl	80001f4 <strlen>
 800b780:	4603      	mov	r3, r0
 800b782:	461a      	mov	r2, r3
 800b784:	4916      	ldr	r1, [pc, #88]	; (800b7e0 <httpPOST+0x418>)
 800b786:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b78a:	f003 fd10 	bl	800f1ae <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800b78e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b792:	4618      	mov	r0, r3
 800b794:	f7f4 fd2e 	bl	80001f4 <strlen>
 800b798:	4602      	mov	r2, r0
 800b79a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7a4:	e01e      	b.n	800b7e4 <httpPOST+0x41c>
 800b7a6:	bf00      	nop
 800b7a8:	080109bc 	.word	0x080109bc
 800b7ac:	080109c4 	.word	0x080109c4
 800b7b0:	080109d0 	.word	0x080109d0
 800b7b4:	080109d4 	.word	0x080109d4
 800b7b8:	080109dc 	.word	0x080109dc
 800b7bc:	080109e0 	.word	0x080109e0
 800b7c0:	08010a00 	.word	0x08010a00
 800b7c4:	20000090 	.word	0x20000090
 800b7c8:	200000a0 	.word	0x200000a0
 800b7cc:	200000b0 	.word	0x200000b0
 800b7d0:	200000c0 	.word	0x200000c0
 800b7d4:	200000d0 	.word	0x200000d0
 800b7d8:	200000e0 	.word	0x200000e0
 800b7dc:	200000f0 	.word	0x200000f0
 800b7e0:	20000100 	.word	0x20000100
 800b7e4:	f003 fce3 	bl	800f1ae <strncat>
	strncat(body,ev7,strlen(ev7));
 800b7e8:	484a      	ldr	r0, [pc, #296]	; (800b914 <httpPOST+0x54c>)
 800b7ea:	f7f4 fd03 	bl	80001f4 <strlen>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4948      	ldr	r1, [pc, #288]	; (800b914 <httpPOST+0x54c>)
 800b7f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b7f8:	f003 fcd9 	bl	800f1ae <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800b7fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b800:	4618      	mov	r0, r3
 800b802:	f7f4 fcf7 	bl	80001f4 <strlen>
 800b806:	4602      	mov	r2, r0
 800b808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b80c:	4619      	mov	r1, r3
 800b80e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b812:	f003 fccc 	bl	800f1ae <strncat>
	strncat(body,ev8,strlen(ev8));
 800b816:	4840      	ldr	r0, [pc, #256]	; (800b918 <httpPOST+0x550>)
 800b818:	f7f4 fcec 	bl	80001f4 <strlen>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	493d      	ldr	r1, [pc, #244]	; (800b918 <httpPOST+0x550>)
 800b822:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b826:	f003 fcc2 	bl	800f1ae <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800b82a:	f107 0320 	add.w	r3, r7, #32
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f4 fce0 	bl	80001f4 <strlen>
 800b834:	4602      	mov	r2, r0
 800b836:	f107 0320 	add.w	r3, r7, #32
 800b83a:	4619      	mov	r1, r3
 800b83c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b840:	f003 fcb5 	bl	800f1ae <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800b844:	4835      	ldr	r0, [pc, #212]	; (800b91c <httpPOST+0x554>)
 800b846:	f7f4 fcd5 	bl	80001f4 <strlen>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461a      	mov	r2, r3
 800b84e:	4933      	ldr	r1, [pc, #204]	; (800b91c <httpPOST+0x554>)
 800b850:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b854:	f003 fcab 	bl	800f1ae <strncat>
	strncat(body,_devId,strlen(_devId));
 800b858:	f107 0318 	add.w	r3, r7, #24
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7f4 fcc9 	bl	80001f4 <strlen>
 800b862:	4602      	mov	r2, r0
 800b864:	f107 0318 	add.w	r3, r7, #24
 800b868:	4619      	mov	r1, r3
 800b86a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b86e:	f003 fc9e 	bl	800f1ae <strncat>

	strncat(body,"}",strlen("}"));
 800b872:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b876:	f7f4 fcbd 	bl	80001f4 <strlen>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b882:	4413      	add	r3, r2
 800b884:	4926      	ldr	r1, [pc, #152]	; (800b920 <httpPOST+0x558>)
 800b886:	461a      	mov	r2, r3
 800b888:	460b      	mov	r3, r1
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b88e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b892:	f7f4 fcaf 	bl	80001f4 <strlen>
 800b896:	4602      	mov	r2, r0
 800b898:	f107 0310 	add.w	r3, r7, #16
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f003 fa5a 	bl	800ed58 <INTOA>
	strncat(post,length,strlen(length));
 800b8a4:	f107 0310 	add.w	r3, r7, #16
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f4 fca3 	bl	80001f4 <strlen>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	f107 0310 	add.w	r3, r7, #16
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8ba:	f003 fc78 	bl	800f1ae <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b8be:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b8c2:	f7f4 fc97 	bl	80001f4 <strlen>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8ce:	4413      	add	r3, r2
 800b8d0:	4a14      	ldr	r2, [pc, #80]	; (800b924 <httpPOST+0x55c>)
 800b8d2:	6810      	ldr	r0, [r2, #0]
 800b8d4:	6018      	str	r0, [r3, #0]
 800b8d6:	7912      	ldrb	r2, [r2, #4]
 800b8d8:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b8da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8de:	f7f4 fc89 	bl	80001f4 <strlen>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d20d      	bcs.n	800b908 <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b8ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b8f0:	f7f4 fc80 	bl	80001f4 <strlen>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b8fc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b900:	f003 fc55 	bl	800f1ae <strncat>
		return 1 ;
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b908:	2300      	movs	r3, #0
		}
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3770      	adds	r7, #112	; 0x70
 800b90e:	46bd      	mov	sp, r7
 800b910:	bdb0      	pop	{r4, r5, r7, pc}
 800b912:	bf00      	nop
 800b914:	20000110 	.word	0x20000110
 800b918:	20000120 	.word	0x20000120
 800b91c:	20000130 	.word	0x20000130
 800b920:	08010a10 	.word	0x08010a10
 800b924:	08010a14 	.word	0x08010a14

0800b928 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b942:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a1c      	ldr	r2, [pc, #112]	; (800b9c8 <ModBUS_Config+0xa0>)
 800b956:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2220      	movs	r2, #32
 800b964:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a18      	ldr	r2, [pc, #96]	; (800b9cc <ModBUS_Config+0xa4>)
 800b96c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2210      	movs	r2, #16
 800b97a:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2210      	movs	r2, #16
 800b988:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2220      	movs	r2, #32
 800b996:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2220      	movs	r2, #32
 800b9aa:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	f0f0af5a 	.word	0xf0f0af5a
 800b9cc:	a5fa0f0f 	.word	0xa5fa0f0f

0800b9d0 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3305      	adds	r3, #5
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	3306      	adds	r3, #6
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d10b      	bne.n	800ba00 <ModBUS_Check+0x30>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3302      	adds	r3, #2
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3303      	adds	r3, #3
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <ModBUS_Check+0x30>
	{
		return(1);
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800ba00:	2300      	movs	r3, #0
	}
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7b5b      	ldrb	r3, [r3, #13]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d11d      	bne.n	800ba60 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d116      	bne.n	800ba60 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d10f      	bne.n	800ba60 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d108      	bne.n	800ba60 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d101      	bne.n	800ba60 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e000      	b.n	800ba62 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800ba60:	2300      	movs	r3, #0
	}
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800ba88:	78fa      	ldrb	r2, [r7, #3]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d901      	bls.n	800ba92 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e015      	b.n	800babe <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800ba92:	78fb      	ldrb	r3, [r7, #3]
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	3301      	adds	r3, #1
 800ba98:	883a      	ldrh	r2, [r7, #0]
 800ba9a:	b2d1      	uxtb	r1, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	4413      	add	r3, r2
 800baa0:	460a      	mov	r2, r1
 800baa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800baa6:	883b      	ldrh	r3, [r7, #0]
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	b29b      	uxth	r3, r3
 800baac:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4413      	add	r3, r2
 800bab6:	7bfa      	ldrb	r2, [r7, #15]
 800bab8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800babc:	2300      	movs	r3, #0
	}
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800baca:	b480      	push	{r7}
 800bacc:	b085      	sub	sp, #20
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bada:	2300      	movs	r3, #0
 800badc:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d901      	bls.n	800baee <ModBUS_F03_Read+0x24>
	{
		return(1);
 800baea:	2301      	movs	r3, #1
 800baec:	e015      	b.n	800bb1a <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800baee:	78fb      	ldrb	r3, [r7, #3]
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4413      	add	r3, r2
 800baf6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bafa:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bafc:	89fb      	ldrh	r3, [r7, #14]
 800bafe:	021b      	lsls	r3, r3, #8
 800bb00:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	3301      	adds	r3, #1
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	89fb      	ldrh	r3, [r7, #14]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800bb18:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	807b      	strh	r3, [r7, #2]
 800bb32:	4613      	mov	r3, r2
 800bb34:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bb36:	887b      	ldrh	r3, [r7, #2]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bf14      	ite	ne
 800bb3c:	2301      	movne	r3, #1
 800bb3e:	2300      	moveq	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	461a      	mov	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800bb4a:	887b      	ldrh	r3, [r7, #2]
 800bb4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb50:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bb52:	887b      	ldrh	r3, [r7, #2]
 800bb54:	0a1b      	lsrs	r3, r3, #8
 800bb56:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bb58:	887b      	ldrh	r3, [r7, #2]
 800bb5a:	f003 030f 	and.w	r3, r3, #15
 800bb5e:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2206      	movs	r2, #6
 800bb8c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	781a      	ldrb	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800bba2:	887b      	ldrh	r3, [r7, #2]
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	787a      	ldrb	r2, [r7, #1]
 800bbb8:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	220c      	movs	r2, #12
 800bbc0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800bbc4:	bf00      	nop
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b09c      	sub	sp, #112	; 0x70
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	785b      	ldrb	r3, [r3, #1]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	f041 813f 	bne.w	800ce64 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f103 020d 	add.w	r2, r3, #13
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f7ff feeb 	bl	800b9d0 <ModBUS_Check>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f001 812f 	beq.w	800ce60 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7d1b      	ldrb	r3, [r3, #20]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	2b0f      	cmp	r3, #15
 800bc0a:	f201 80f3 	bhi.w	800cdf4 <ModBUS+0x1220>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <ModBUS+0x40>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc55 	.word	0x0800bc55
 800bc18:	0800be95 	.word	0x0800be95
 800bc1c:	0800c0d5 	.word	0x0800c0d5
 800bc20:	0800c30d 	.word	0x0800c30d
 800bc24:	0800c545 	.word	0x0800c545
 800bc28:	0800c75b 	.word	0x0800c75b
 800bc2c:	0800cdf5 	.word	0x0800cdf5
 800bc30:	0800cdf5 	.word	0x0800cdf5
 800bc34:	0800cdf5 	.word	0x0800cdf5
 800bc38:	0800cdf5 	.word	0x0800cdf5
 800bc3c:	0800cdf5 	.word	0x0800cdf5
 800bc40:	0800cdf5 	.word	0x0800cdf5
 800bc44:	0800cdf5 	.word	0x0800cdf5
 800bc48:	0800cdf5 	.word	0x0800cdf5
 800bc4c:	0800c917 	.word	0x0800c917
 800bc50:	0800cba7 	.word	0x0800cba7

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7c5a      	ldrb	r2, [r3, #17]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7c1a      	ldrb	r2, [r3, #16]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7bda      	ldrb	r2, [r3, #15]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7b9a      	ldrb	r2, [r3, #14]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7b5a      	ldrb	r2, [r3, #13]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	795b      	ldrb	r3, [r3, #5]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	f040 80e6 	bne.w	800be60 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7d5b      	ldrb	r3, [r3, #21]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800bca6:	021b      	lsls	r3, r3, #8
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800bcb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7d9b      	ldrb	r3, [r3, #22]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	7ddb      	ldrb	r3, [r3, #23]
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bcfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7e1b      	ldrb	r3, [r3, #24]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d87e      	bhi.n	800be2c <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800bd34:	461a      	mov	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bd3c:	4413      	add	r3, r2
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800bd44:	4293      	cmp	r3, r2
 800bd46:	dc57      	bgt.n	800bdf8 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	2300      	movs	r3, #0
 800bd52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd54:	2300      	movs	r3, #0
 800bd56:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800bd68:	40d3      	lsrs	r3, r2
 800bd6a:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bd72:	08db      	lsrs	r3, r3, #3
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d102      	bne.n	800bd90 <ModBUS+0x1bc>
									{
										bytes=div;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd8e:	e002      	b.n	800bd96 <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	3301      	adds	r3, #1
 800bd94:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bd96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bda0:	e00e      	b.n	800bdc0 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bda4:	3308      	adds	r3, #8
 800bda6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bda8:	b2d1      	uxtb	r1, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	4413      	add	r3, r2
 800bdae:	460a      	mov	r2, r1
 800bdb0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bdb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdb6:	0a1b      	lsrs	r3, r3, #8
 800bdb8:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bdba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bdc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dced      	bgt.n	800bda2 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bddc:	3303      	adds	r3, #3
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bdec:	1d9a      	adds	r2, r3, #6
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bdf4:	f001 b8d4 	b.w	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2281      	movs	r2, #129	; 0x81
 800be04:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2203      	movs	r2, #3
 800be14:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800be1e:	1d9a      	adds	r2, r3, #6
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800be26:	2302      	movs	r3, #2
 800be28:	f001 b8ba 	b.w	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2203      	movs	r2, #3
 800be30:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2281      	movs	r2, #129	; 0x81
 800be38:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2203      	movs	r2, #3
 800be48:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800be52:	1d9a      	adds	r2, r3, #6
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800be5a:	2303      	movs	r3, #3
 800be5c:	f001 b8a0 	b.w	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2281      	movs	r2, #129	; 0x81
 800be6c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2203      	movs	r2, #3
 800be7c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800be86:	1d9a      	adds	r2, r3, #6
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800be8e:	2301      	movs	r3, #1
 800be90:	f001 b886 	b.w	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7c5a      	ldrb	r2, [r3, #17]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7c1a      	ldrb	r2, [r3, #16]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7bda      	ldrb	r2, [r3, #15]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	7b9a      	ldrb	r2, [r3, #14]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	7b5a      	ldrb	r2, [r3, #13]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	799b      	ldrb	r3, [r3, #6]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	f040 80e6 	bne.w	800c0a0 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7d5b      	ldrb	r3, [r3, #21]
 800bed8:	b29a      	uxth	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	7d9b      	ldrb	r3, [r3, #22]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7ddb      	ldrb	r3, [r3, #23]
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bf2a:	021b      	lsls	r3, r3, #8
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bf3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	7e1b      	ldrb	r3, [r3, #24]
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	4313      	orrs	r3, r2
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d87e      	bhi.n	800c06c <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bf74:	461a      	mov	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bf7c:	4413      	add	r3, r2
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800bf84:	4293      	cmp	r3, r2
 800bf86:	dc57      	bgt.n	800c038 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	623b      	str	r3, [r7, #32]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	2300      	movs	r3, #0
 800bf92:	667b      	str	r3, [r7, #100]	; 0x64
 800bf94:	2300      	movs	r3, #0
 800bf96:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800bfa8:	40d3      	lsrs	r3, r2
 800bfaa:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bfb2:	08db      	lsrs	r3, r3, #3
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <ModBUS+0x3fc>
									{
										bytes=div;
 800bfca:	6a3b      	ldr	r3, [r7, #32]
 800bfcc:	667b      	str	r3, [r7, #100]	; 0x64
 800bfce:	e002      	b.n	800bfd6 <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800bfd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bfe0:	e00e      	b.n	800c000 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bfe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfe8:	b2d1      	uxtb	r1, r2
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	460a      	mov	r2, r1
 800bff0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bff4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800bffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffc:	3b01      	subs	r3, #1
 800bffe:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c002:	2b00      	cmp	r3, #0
 800c004:	dced      	bgt.n	800bfe2 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2202      	movs	r2, #2
 800c00a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c01c:	3303      	adds	r3, #3
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c02c:	1d9a      	adds	r2, r3, #6
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c034:	f000 bfb4 	b.w	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2202      	movs	r2, #2
 800c03c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2282      	movs	r2, #130	; 0x82
 800c044:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2203      	movs	r2, #3
 800c054:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c05e:	1d9a      	adds	r2, r3, #6
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c066:	2302      	movs	r3, #2
 800c068:	f000 bf9a 	b.w	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2203      	movs	r2, #3
 800c070:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2282      	movs	r2, #130	; 0x82
 800c078:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2203      	movs	r2, #3
 800c088:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c092:	1d9a      	adds	r2, r3, #6
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c09a:	2303      	movs	r3, #3
 800c09c:	f000 bf80 	b.w	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2282      	movs	r2, #130	; 0x82
 800c0ac:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2203      	movs	r2, #3
 800c0bc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c0c6:	1d9a      	adds	r2, r3, #6
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	f000 bf66 	b.w	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7c5a      	ldrb	r2, [r3, #17]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7c1a      	ldrb	r2, [r3, #16]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7bda      	ldrb	r2, [r3, #15]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7b9a      	ldrb	r2, [r3, #14]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7b5a      	ldrb	r2, [r3, #13]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c106:	2300      	movs	r3, #0
 800c108:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	79db      	ldrb	r3, [r3, #7]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	f040 80e2 	bne.w	800c2d8 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7d5b      	ldrb	r3, [r3, #21]
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800c126:	021b      	lsls	r3, r3, #8
 800c128:	b29a      	uxth	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800c136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	7d9b      	ldrb	r3, [r3, #22]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	4313      	orrs	r3, r2
 800c150:	b29a      	uxth	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7ddb      	ldrb	r3, [r3, #23]
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800c16a:	021b      	lsls	r3, r3, #8
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800c17a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c17e:	b29a      	uxth	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7e1b      	ldrb	r3, [r3, #24]
 800c190:	b29b      	uxth	r3, r3
 800c192:	4313      	orrs	r3, r2
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d87a      	bhi.n	800c2a4 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800c1bc:	4413      	add	r3, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	dc53      	bgt.n	800c270 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c1c8:	e029      	b.n	800c21e <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1d4:	4413      	add	r3, r2
 800c1d6:	005a      	lsls	r2, r3, #1
 800c1d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	3309      	adds	r3, #9
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	440a      	add	r2, r1
 800c1e2:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	460a      	mov	r2, r1
 800c1ec:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1fa:	4413      	add	r3, r2
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	1c5a      	adds	r2, r3, #1
 800c200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c202:	3305      	adds	r3, #5
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	440a      	add	r2, r1
 800c20a:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	4413      	add	r3, r2
 800c212:	460a      	mov	r2, r1
 800c214:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800c218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c21a:	3301      	adds	r3, #1
 800c21c:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800c224:	461a      	mov	r2, r3
 800c226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c228:	4293      	cmp	r3, r2
 800c22a:	dbce      	blt.n	800c1ca <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800c232:	b2db      	uxtb	r3, r3
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2203      	movs	r2, #3
 800c242:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c254:	3303      	adds	r3, #3
 800c256:	b2da      	uxtb	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c264:	1d9a      	adds	r2, r3, #6
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c26c:	f000 be98 	b.w	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2283      	movs	r2, #131	; 0x83
 800c27c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2203      	movs	r2, #3
 800c28c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c296:	1d9a      	adds	r2, r3, #6
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c29e:	2302      	movs	r3, #2
 800c2a0:	f000 be7e 	b.w	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2283      	movs	r2, #131	; 0x83
 800c2b0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c2ca:	1d9a      	adds	r2, r3, #6
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	f000 be64 	b.w	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2283      	movs	r2, #131	; 0x83
 800c2e4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c2fe:	1d9a      	adds	r2, r3, #6
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c306:	2301      	movs	r3, #1
 800c308:	f000 be4a 	b.w	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7c5a      	ldrb	r2, [r3, #17]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	7c1a      	ldrb	r2, [r3, #16]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	7bda      	ldrb	r2, [r3, #15]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	7b9a      	ldrb	r2, [r3, #14]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7b5a      	ldrb	r2, [r3, #13]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c33e:	2300      	movs	r3, #0
 800c340:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7a1b      	ldrb	r3, [r3, #8]
 800c346:	2b01      	cmp	r3, #1
 800c348:	f040 80e2 	bne.w	800c510 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7d5b      	ldrb	r3, [r3, #21]
 800c350:	b29a      	uxth	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c36e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c372:	b29a      	uxth	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7d9b      	ldrb	r3, [r3, #22]
 800c384:	b29b      	uxth	r3, r3
 800c386:	4313      	orrs	r3, r2
 800c388:	b29a      	uxth	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	7ddb      	ldrb	r3, [r3, #23]
 800c394:	b29a      	uxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c3a2:	021b      	lsls	r3, r3, #8
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c3b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7e1b      	ldrb	r3, [r3, #24]
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d87a      	bhi.n	800c4dc <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c3f4:	4413      	add	r3, r2
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	dc53      	bgt.n	800c4a8 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c400:	e029      	b.n	800c456 <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c408:	461a      	mov	r2, r3
 800c40a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c40c:	4413      	add	r3, r2
 800c40e:	005a      	lsls	r2, r3, #1
 800c410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	3309      	adds	r3, #9
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	440a      	add	r2, r1
 800c41a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	4413      	add	r3, r2
 800c422:	460a      	mov	r2, r1
 800c424:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c42e:	461a      	mov	r2, r3
 800c430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c432:	4413      	add	r3, r2
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	1c5a      	adds	r2, r3, #1
 800c438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c43a:	3305      	adds	r3, #5
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	440a      	add	r2, r1
 800c442:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	460a      	mov	r2, r1
 800c44c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800c450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c452:	3301      	adds	r3, #1
 800c454:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c45c:	461a      	mov	r2, r3
 800c45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c460:	4293      	cmp	r3, r2
 800c462:	dbce      	blt.n	800c402 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2204      	movs	r2, #4
 800c47a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c48c:	3303      	adds	r3, #3
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c49c:	1d9a      	adds	r2, r3, #6
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c4a4:	f000 bd7c 	b.w	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2284      	movs	r2, #132	; 0x84
 800c4b4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c4ce:	1d9a      	adds	r2, r3, #6
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	f000 bd62 	b.w	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2203      	movs	r2, #3
 800c4e0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2284      	movs	r2, #132	; 0x84
 800c4e8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c502:	1d9a      	adds	r2, r3, #6
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c50a:	2303      	movs	r3, #3
 800c50c:	f000 bd48 	b.w	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2284      	movs	r2, #132	; 0x84
 800c51c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2203      	movs	r2, #3
 800c52c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c536:	1d9a      	adds	r2, r3, #6
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c53e:	2301      	movs	r3, #1
 800c540:	f000 bd2e 	b.w	800cfa0 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7c5a      	ldrb	r2, [r3, #17]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7c1a      	ldrb	r2, [r3, #16]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	7bda      	ldrb	r2, [r3, #15]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7b9a      	ldrb	r2, [r3, #14]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	7b5a      	ldrb	r2, [r3, #13]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800c576:	2300      	movs	r3, #0
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7a5b      	ldrb	r3, [r3, #9]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	f040 80d1 	bne.w	800c726 <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7d5b      	ldrb	r3, [r3, #21]
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c596:	021b      	lsls	r3, r3, #8
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c5a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7d9b      	ldrb	r3, [r3, #22]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7ddb      	ldrb	r3, [r3, #23]
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c5ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7e1b      	ldrb	r3, [r3, #24]
 800c600:	b29b      	uxth	r3, r3
 800c602:	4313      	orrs	r3, r2
 800c604:	b29a      	uxth	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c61a:	429a      	cmp	r2, r3
 800c61c:	dd69      	ble.n	800c6f2 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c624:	2b00      	cmp	r3, #0
 800c626:	d005      	beq.n	800c634 <ModBUS+0xa60>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c62e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c632:	d144      	bne.n	800c6be <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c63a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c63e:	d10d      	bne.n	800c65c <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800c64c:	4611      	mov	r1, r2
 800c64e:	2201      	movs	r2, #1
 800c650:	408a      	lsls	r2, r1
 800c652:	431a      	orrs	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c65a:	e003      	b.n	800c664 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7e1a      	ldrb	r2, [r3, #24]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	7dda      	ldrb	r2, [r3, #23]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	7d9a      	ldrb	r2, [r3, #22]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7d5a      	ldrb	r2, [r3, #21]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2205      	movs	r2, #5
 800c690:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c6a2:	3306      	adds	r3, #6
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c6b2:	1d9a      	adds	r2, r3, #6
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c6ba:	f000 bc71 	b.w	800cfa0 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2285      	movs	r2, #133	; 0x85
 800c6ca:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2203      	movs	r2, #3
 800c6da:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c6e4:	1d9a      	adds	r2, r3, #6
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	f000 bc57 	b.w	800cfa0 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2285      	movs	r2, #133	; 0x85
 800c6fe:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2203      	movs	r2, #3
 800c70e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c718:	1d9a      	adds	r2, r3, #6
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800c720:	2303      	movs	r3, #3
 800c722:	f000 bc3d 	b.w	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2285      	movs	r2, #133	; 0x85
 800c732:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2203      	movs	r2, #3
 800c742:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c74c:	1d9a      	adds	r2, r3, #6
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800c754:	2301      	movs	r3, #1
 800c756:	f000 bc23 	b.w	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7c5a      	ldrb	r2, [r3, #17]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7c1a      	ldrb	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7bda      	ldrb	r2, [r3, #15]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	7b9a      	ldrb	r2, [r3, #14]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7b5a      	ldrb	r2, [r3, #13]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c790:	2300      	movs	r3, #0
 800c792:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7a9b      	ldrb	r3, [r3, #10]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	f040 80a3 	bne.w	800c8e4 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	7d5b      	ldrb	r3, [r3, #21]
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c7b0:	021b      	lsls	r3, r3, #8
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c7c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7d9b      	ldrb	r3, [r3, #22]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c7e8:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7ddb      	ldrb	r3, [r3, #23]
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c80c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7e1b      	ldrb	r3, [r3, #24]
 800c822:	b29b      	uxth	r3, r3
 800c824:	4313      	orrs	r3, r2
 800c826:	b29a      	uxth	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d838      	bhi.n	800c8b2 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c840:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	7dd1      	ldrb	r1, [r2, #23]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	4413      	add	r3, r2
 800c84a:	460a      	mov	r2, r1
 800c84c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c850:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c852:	3301      	adds	r3, #1
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	7e11      	ldrb	r1, [r2, #24]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	4413      	add	r3, r2
 800c85c:	460a      	mov	r2, r1
 800c85e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	7e1a      	ldrb	r2, [r3, #24]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	7dda      	ldrb	r2, [r3, #23]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	7d9a      	ldrb	r2, [r3, #22]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7d5a      	ldrb	r2, [r3, #21]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2206      	movs	r2, #6
 800c88e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2206      	movs	r2, #6
 800c89e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8a8:	1d9a      	adds	r2, r3, #6
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c8b0:	e376      	b.n	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2286      	movs	r2, #134	; 0x86
 800c8be:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8d8:	1d9a      	adds	r2, r3, #6
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e35d      	b.n	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2286      	movs	r2, #134	; 0x86
 800c8f0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2203      	movs	r2, #3
 800c900:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c90a:	1d9a      	adds	r2, r3, #6
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c912:	2301      	movs	r3, #1
 800c914:	e344      	b.n	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	7c5a      	ldrb	r2, [r3, #17]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	7c1a      	ldrb	r2, [r3, #16]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	7bda      	ldrb	r2, [r3, #15]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7b9a      	ldrb	r2, [r3, #14]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7b5a      	ldrb	r2, [r3, #13]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c948:	2300      	movs	r3, #0
 800c94a:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7adb      	ldrb	r3, [r3, #11]
 800c950:	2b01      	cmp	r3, #1
 800c952:	f040 810f 	bne.w	800cb74 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	7d5b      	ldrb	r3, [r3, #21]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c968:	021b      	lsls	r3, r3, #8
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c978:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7d9b      	ldrb	r3, [r3, #22]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	4313      	orrs	r3, r2
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7ddb      	ldrb	r3, [r3, #23]
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c9bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7e1b      	ldrb	r3, [r3, #24]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	f200 80a8 	bhi.w	800cb42 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800ca00:	4413      	add	r3, r2
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	f300 8081 	bgt.w	800cb10 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	657b      	str	r3, [r7, #84]	; 0x54
 800ca12:	2300      	movs	r3, #0
 800ca14:	653b      	str	r3, [r7, #80]	; 0x50
 800ca16:	2300      	movs	r3, #0
 800ca18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	7e5b      	ldrb	r3, [r3, #25]
 800ca22:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800ca24:	e00e      	b.n	800ca44 <ModBUS+0xe70>
									{
										data=data<<8;
 800ca26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800ca2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2e:	330c      	adds	r3, #12
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	4413      	add	r3, r2
 800ca34:	7b5b      	ldrb	r3, [r3, #13]
 800ca36:	461a      	mov	r2, r3
 800ca38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	3b01      	subs	r3, #1
 800ca42:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800ca44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1ed      	bne.n	800ca26 <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800ca50:	461a      	mov	r2, r3
 800ca52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca54:	4093      	lsls	r3, r2
 800ca56:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800ca58:	e00f      	b.n	800ca7a <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800ca60:	461a      	mov	r2, r3
 800ca62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca64:	4413      	add	r3, r2
 800ca66:	2201      	movs	r2, #1
 800ca68:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca70:	4313      	orrs	r3, r2
 800ca72:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800ca74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca76:	3301      	adds	r3, #1
 800ca78:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800ca80:	461a      	mov	r2, r3
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d3e8      	bcc.n	800ca5a <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800ca88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca8a:	43db      	mvns	r3, r3
 800ca8c:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800ca94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca96:	401a      	ands	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800ca9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa0:	43db      	mvns	r3, r3
 800caa2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caa4:	4013      	ands	r3, r2
 800caa6:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800caae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cab0:	431a      	orrs	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	7e1a      	ldrb	r2, [r3, #24]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7dda      	ldrb	r2, [r3, #23]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7d9a      	ldrb	r2, [r3, #22]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7d5a      	ldrb	r2, [r3, #21]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	220f      	movs	r2, #15
 800cae4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800caf6:	3306      	adds	r3, #6
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb06:	1d9a      	adds	r2, r3, #6
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb0e:	e247      	b.n	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2202      	movs	r2, #2
 800cb14:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	228f      	movs	r2, #143	; 0x8f
 800cb1c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2203      	movs	r2, #3
 800cb2c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb36:	1d9a      	adds	r2, r3, #6
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e22e      	b.n	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2203      	movs	r2, #3
 800cb46:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	228f      	movs	r2, #143	; 0x8f
 800cb4e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb68:	1d9a      	adds	r2, r3, #6
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cb70:	2303      	movs	r3, #3
 800cb72:	e215      	b.n	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	228f      	movs	r2, #143	; 0x8f
 800cb80:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2203      	movs	r2, #3
 800cb90:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb9a:	1d9a      	adds	r2, r3, #6
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cba2:	2301      	movs	r3, #1
 800cba4:	e1fc      	b.n	800cfa0 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7c5a      	ldrb	r2, [r3, #17]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7c1a      	ldrb	r2, [r3, #16]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7bda      	ldrb	r2, [r3, #15]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7b9a      	ldrb	r2, [r3, #14]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	7b5a      	ldrb	r2, [r3, #13]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cbde:	2300      	movs	r3, #0
 800cbe0:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	7b1b      	ldrb	r3, [r3, #12]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	f040 80eb 	bne.w	800cdc2 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	7d5b      	ldrb	r3, [r3, #21]
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800cc0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7d9b      	ldrb	r3, [r3, #22]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	4313      	orrs	r3, r2
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	7ddb      	ldrb	r3, [r3, #23]
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800cc4c:	021b      	lsls	r3, r3, #8
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800cc5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7e1b      	ldrb	r3, [r3, #24]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4313      	orrs	r3, r2
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d87f      	bhi.n	800cd90 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800cc96:	461a      	mov	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800cc9e:	4413      	add	r3, r2
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800cca6:	4293      	cmp	r3, r2
 800cca8:	dc59      	bgt.n	800cd5e <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ccaa:	e029      	b.n	800cd00 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ccac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccb0:	f103 020d 	add.w	r2, r3, #13
 800ccb4:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ccb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccba:	440b      	add	r3, r1
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	440a      	add	r2, r1
 800ccc0:	7b51      	ldrb	r1, [r2, #13]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	460a      	mov	r2, r1
 800ccc8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800cccc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ccd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccda:	f103 020d 	add.w	r2, r3, #13
 800ccde:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800cce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cce4:	440b      	add	r3, r1
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	440a      	add	r2, r1
 800ccea:	7b51      	ldrb	r1, [r2, #13]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4413      	add	r3, r2
 800ccf0:	460a      	mov	r2, r1
 800ccf2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800ccf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7e5b      	ldrb	r3, [r3, #25]
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d3ce      	bcc.n	800ccac <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7e1a      	ldrb	r2, [r3, #24]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7dda      	ldrb	r2, [r3, #23]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	7d9a      	ldrb	r2, [r3, #22]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7d5a      	ldrb	r2, [r3, #21]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2210      	movs	r2, #16
 800cd3a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2206      	movs	r2, #6
 800cd4a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd54:	1d9a      	adds	r2, r3, #6
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd5c:	e120      	b.n	800cfa0 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2202      	movs	r2, #2
 800cd62:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2290      	movs	r2, #144	; 0x90
 800cd6a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2203      	movs	r2, #3
 800cd7a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cd84:	1d9a      	adds	r2, r3, #6
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	e107      	b.n	800cfa0 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2290      	movs	r2, #144	; 0x90
 800cd9c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cdb6:	1d9a      	adds	r2, r3, #6
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	e0ee      	b.n	800cfa0 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2290      	movs	r2, #144	; 0x90
 800cdce:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2203      	movs	r2, #3
 800cdde:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cde8:	1d9a      	adds	r2, r3, #6
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e0d5      	b.n	800cfa0 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7d1b      	ldrb	r3, [r3, #20]
 800ce00:	3b80      	subs	r3, #128	; 0x80
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7cda      	ldrb	r2, [r3, #19]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2203      	movs	r2, #3
 800ce18:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7c5a      	ldrb	r2, [r3, #17]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7c1a      	ldrb	r2, [r3, #16]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7bda      	ldrb	r2, [r3, #15]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7b9a      	ldrb	r2, [r3, #14]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	7b5a      	ldrb	r2, [r3, #13]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ce54:	1d9a      	adds	r2, r3, #6
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e09f      	b.n	800cfa0 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800ce60:	2301      	movs	r3, #1
 800ce62:	e09d      	b.n	800cfa0 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	785b      	ldrb	r3, [r3, #1]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f040 8099 	bne.w	800cfa0 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f103 020d 	add.w	r2, r3, #13
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7fe fda7 	bl	800b9d0 <ModBUS_Check>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 808b 	beq.w	800cfa0 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7fe fdbf 	bl	800ba0e <ModBUS_Check_tid>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d04f      	beq.n	800cf36 <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7d1b      	ldrb	r3, [r3, #20]
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d143      	bne.n	800cf26 <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800ceae:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800ceb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cec0:	4313      	orrs	r3, r2
 800cec2:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800ceca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cece:	2300      	movs	r3, #0
 800ced0:	643b      	str	r3, [r7, #64]	; 0x40
 800ced2:	e022      	b.n	800cf1a <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800ced4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	f103 0209 	add.w	r2, r3, #9
 800cedc:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee0:	440b      	add	r3, r1
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	440a      	add	r2, r1
 800cee8:	7b51      	ldrb	r1, [r2, #13]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	4413      	add	r3, r2
 800ceee:	460a      	mov	r2, r1
 800cef0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef6:	3305      	adds	r3, #5
 800cef8:	005a      	lsls	r2, r3, #1
 800cefa:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefe:	440b      	add	r3, r1
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	3301      	adds	r3, #1
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	440a      	add	r2, r1
 800cf08:	7b51      	ldrb	r1, [r2, #13]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	460a      	mov	r2, r1
 800cf10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800cf14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf16:	3301      	adds	r3, #1
 800cf18:	643b      	str	r3, [r7, #64]	; 0x40
 800cf1a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cf1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf20:	429a      	cmp	r2, r3
 800cf22:	dbd7      	blt.n	800ced4 <ModBUS+0x1300>

						}


					}
					break;
 800cf24:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	7c9b      	ldrb	r3, [r3, #18]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	7d5b      	ldrb	r3, [r3, #21]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf34:	e034      	b.n	800cfa0 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7d1b      	ldrb	r3, [r3, #20]
 800cf3a:	3b81      	subs	r3, #129	; 0x81
 800cf3c:	2b15      	cmp	r3, #21
 800cf3e:	d82f      	bhi.n	800cfa0 <ModBUS+0x13cc>
 800cf40:	a201      	add	r2, pc, #4	; (adr r2, 800cf48 <ModBUS+0x1374>)
 800cf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf46:	bf00      	nop
 800cf48:	0800cfa1 	.word	0x0800cfa1
 800cf4c:	0800cfa1 	.word	0x0800cfa1
 800cf50:	0800cfa1 	.word	0x0800cfa1
 800cf54:	0800cfa1 	.word	0x0800cfa1
 800cf58:	0800cfa1 	.word	0x0800cfa1
 800cf5c:	0800cfa1 	.word	0x0800cfa1
 800cf60:	0800cfa1 	.word	0x0800cfa1
 800cf64:	0800cfa1 	.word	0x0800cfa1
 800cf68:	0800cfa1 	.word	0x0800cfa1
 800cf6c:	0800cfa1 	.word	0x0800cfa1
 800cf70:	0800cfa1 	.word	0x0800cfa1
 800cf74:	0800cfa1 	.word	0x0800cfa1
 800cf78:	0800cfa1 	.word	0x0800cfa1
 800cf7c:	0800cfa1 	.word	0x0800cfa1
 800cf80:	0800cfa1 	.word	0x0800cfa1
 800cf84:	0800cfa1 	.word	0x0800cfa1
 800cf88:	0800cfa1 	.word	0x0800cfa1
 800cf8c:	0800cfa1 	.word	0x0800cfa1
 800cf90:	0800cfa1 	.word	0x0800cfa1
 800cf94:	0800cfa1 	.word	0x0800cfa1
 800cf98:	0800cfa1 	.word	0x0800cfa1
 800cf9c:	0800cfa1 	.word	0x0800cfa1
			}
		}
	}


}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3770      	adds	r7, #112	; 0x70
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68d8      	ldr	r0, [r3, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	8a1b      	ldrh	r3, [r3, #16]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	4619      	mov	r1, r3
 800cfbc:	f7f6 fa10 	bl	80033e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cfc0:	2064      	movs	r0, #100	; 0x64
 800cfc2:	f7f5 fdab 	bl	8002b1c <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68d8      	ldr	r0, [r3, #12]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	8a1b      	ldrh	r3, [r3, #16]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	f7f6 fa05 	bl	80033e0 <HAL_GPIO_WritePin>
}
 800cfd6:	bf00      	nop
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	222e      	movs	r2, #46	; 0x2e
 800cff2:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f81c 	bl	800d03e <SPI_ETH>
	a=x->RX[3];
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d00c:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	222e      	movs	r2, #46	; 0x2e
 800d020:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2204      	movs	r2, #4
 800d026:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	7bfa      	ldrb	r2, [r7, #15]
 800d02c:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f805 	bl	800d03e <SPI_ETH>
}
 800d034:	bf00      	nop
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af02      	add	r7, sp, #8
 800d044:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6858      	ldr	r0, [r3, #4]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	891b      	ldrh	r3, [r3, #8]
 800d04e:	2200      	movs	r2, #0
 800d050:	4619      	mov	r1, r3
 800d052:	f7f6 f9c5 	bl	80033e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f103 011c 	add.w	r1, r3, #28
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f103 0220 	add.w	r2, r3, #32
 800d066:	2364      	movs	r3, #100	; 0x64
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	2304      	movs	r3, #4
 800d06c:	f7f6 fecd 	bl	8003e0a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6858      	ldr	r0, [r3, #4]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	891b      	ldrh	r3, [r3, #8]
 800d078:	2201      	movs	r2, #1
 800d07a:	4619      	mov	r1, r3
 800d07c:	f7f6 f9b0 	bl	80033e0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b086      	sub	sp, #24
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	4608      	mov	r0, r1
 800d098:	4611      	mov	r1, r2
 800d09a:	461a      	mov	r2, r3
 800d09c:	4603      	mov	r3, r0
 800d09e:	807b      	strh	r3, [r7, #2]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	707b      	strb	r3, [r7, #1]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800d0ac:	783b      	ldrb	r3, [r7, #0]
 800d0ae:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800d0b0:	887b      	ldrh	r3, [r7, #2]
 800d0b2:	0a1b      	lsrs	r3, r3, #8
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800d0bc:	887b      	ldrh	r3, [r7, #2]
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800d0c4:	787b      	ldrb	r3, [r7, #1]
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	b25a      	sxtb	r2, r3
 800d0ca:	783b      	ldrb	r3, [r7, #0]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	b25b      	sxtb	r3, r3
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	b25b      	sxtb	r3, r3
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800d0e0:	783b      	ldrb	r3, [r7, #0]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d11d      	bne.n	800d122 <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	613b      	str	r3, [r7, #16]
 800d0ea:	e013      	b.n	800d114 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	6a3a      	ldr	r2, [r7, #32]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	781a      	ldrb	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff ffa0 	bl	800d03e <SPI_ETH>
 800d0fe:	4603      	mov	r3, r0
 800d100:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7f5b      	ldrb	r3, [r3, #29]
 800d106:	3301      	adds	r3, #1
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	3301      	adds	r3, #1
 800d112:	613b      	str	r3, [r7, #16]
 800d114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	dbe6      	blt.n	800d0ec <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800d11e:	8afb      	ldrh	r3, [r7, #22]
 800d120:	e037      	b.n	800d192 <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800d122:	783b      	ldrb	r3, [r7, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d134      	bne.n	800d192 <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800d12e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d132:	2b02      	cmp	r3, #2
 800d134:	d120      	bne.n	800d178 <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800d136:	2300      	movs	r3, #0
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	e016      	b.n	800d16a <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff ff7e 	bl	800d03e <SPI_ETH>
 800d142:	4603      	mov	r3, r0
 800d144:	b29a      	uxth	r2, r3
 800d146:	8afb      	ldrh	r3, [r7, #22]
 800d148:	4313      	orrs	r3, r2
 800d14a:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7f5b      	ldrb	r3, [r3, #29]
 800d150:	3301      	adds	r3, #1
 800d152:	b2da      	uxtb	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d102      	bne.n	800d164 <SPI_ETH_REG+0xd6>
 800d15e:	8afb      	ldrh	r3, [r7, #22]
 800d160:	021b      	lsls	r3, r3, #8
 800d162:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3301      	adds	r3, #1
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	429a      	cmp	r2, r3
 800d172:	dbe3      	blt.n	800d13c <SPI_ETH_REG+0xae>
			}
		 return(res);
 800d174:	8afb      	ldrh	r3, [r7, #22]
 800d176:	e00c      	b.n	800d192 <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff ff60 	bl	800d03e <SPI_ETH>
 800d17e:	4603      	mov	r3, r0
 800d180:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7f5b      	ldrb	r3, [r3, #29]
 800d186:	3301      	adds	r3, #1
 800d188:	b2da      	uxtb	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	775a      	strb	r2, [r3, #29]
			return(res);
 800d18e:	8afb      	ldrh	r3, [r7, #22]
 800d190:	e7ff      	b.n	800d192 <SPI_ETH_REG+0x104>
		}
 	 }
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b088      	sub	sp, #32
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	60f8      	str	r0, [r7, #12]
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	817b      	strh	r3, [r7, #10]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	813b      	strh	r3, [r7, #8]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	b25b      	sxtb	r3, r3
 800d1be:	f043 0304 	orr.w	r3, r3, #4
 800d1c2:	b25b      	sxtb	r3, r3
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800d1ca:	893b      	ldrh	r3, [r7, #8]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800d1d0:	893b      	ldrh	r3, [r7, #8]
 800d1d2:	0a1b      	lsrs	r3, r3, #8
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800d1da:	2300      	movs	r3, #0
 800d1dc:	61bb      	str	r3, [r7, #24]
 800d1de:	e01b      	b.n	800d218 <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800d1e0:	897b      	ldrh	r3, [r7, #10]
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800d1e8:	897b      	ldrh	r3, [r7, #10]
 800d1ea:	0a1b      	lsrs	r3, r3, #8
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	771a      	strb	r2, [r3, #28]
					addr++;
 800d1f4:	897b      	ldrh	r3, [r7, #10]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800d1fa:	f107 0214 	add.w	r2, r7, #20
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	4413      	add	r3, r2
 800d202:	781a      	ldrb	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff ff18 	bl	800d03e <SPI_ETH>
 800d20e:	4603      	mov	r3, r0
 800d210:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	3301      	adds	r3, #1
 800d216:	61bb      	str	r3, [r7, #24]
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	dde0      	ble.n	800d1e0 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800d21e:	8bfb      	ldrh	r3, [r7, #30]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3720      	adds	r7, #32
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	607a      	str	r2, [r7, #4]
 800d232:	461a      	mov	r2, r3
 800d234:	460b      	mov	r3, r1
 800d236:	817b      	strh	r3, [r7, #10]
 800d238:	4613      	mov	r3, r2
 800d23a:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800d23c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	b2da      	uxtb	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d24e:	d226      	bcs.n	800d29e <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800d256:	2300      	movs	r3, #0
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	e01a      	b.n	800d292 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800d25c:	897b      	ldrh	r3, [r7, #10]
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d264:	897b      	ldrh	r3, [r7, #10]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	b29b      	uxth	r3, r3
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800d270:	893a      	ldrh	r2, [r7, #8]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	4413      	add	r3, r2
 800d276:	461a      	mov	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	189c      	adds	r4, r3, r2
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7ff fede 	bl	800d03e <SPI_ETH>
 800d282:	4603      	mov	r3, r0
 800d284:	7023      	strb	r3, [r4, #0]
				addr++;
 800d286:	897b      	ldrh	r3, [r7, #10]
 800d288:	3301      	adds	r3, #1
 800d28a:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	3301      	adds	r3, #1
 800d290:	617b      	str	r3, [r7, #20]
 800d292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	429a      	cmp	r2, r3
 800d298:	dbe0      	blt.n	800d25c <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d29a:	2300      	movs	r3, #0
 800d29c:	e000      	b.n	800d2a0 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800d29e:	2301      	movs	r3, #1
	}
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	371c      	adds	r7, #28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd90      	pop	{r4, r7, pc}

0800d2a8 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	607a      	str	r2, [r7, #4]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	817b      	strh	r3, [r7, #10]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d2bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	b25b      	sxtb	r3, r3
 800d2c4:	f043 0304 	orr.w	r3, r3, #4
 800d2c8:	b25b      	sxtb	r3, r3
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d2d0:	8c3b      	ldrh	r3, [r7, #32]
 800d2d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2d6:	d224      	bcs.n	800d322 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	e01b      	b.n	800d316 <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d2de:	897b      	ldrh	r3, [r7, #10]
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d2e6:	897b      	ldrh	r3, [r7, #10]
 800d2e8:	0a1b      	lsrs	r3, r3, #8
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d2f2:	893a      	ldrh	r2, [r7, #8]
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f7ff fe9a 	bl	800d03e <SPI_ETH>
				addr++;
 800d30a:	897b      	ldrh	r3, [r7, #10]
 800d30c:	3301      	adds	r3, #1
 800d30e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	3301      	adds	r3, #1
 800d314:	617b      	str	r3, [r7, #20]
 800d316:	8c3b      	ldrh	r3, [r7, #32]
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	dbdf      	blt.n	800d2de <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d31e:	2300      	movs	r3, #0
 800d320:	e000      	b.n	800d324 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d322:	2301      	movs	r3, #1
	}
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]
 800d338:	4613      	mov	r3, r2
 800d33a:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	00db      	lsls	r3, r3, #3
 800d34c:	b25b      	sxtb	r3, r3
 800d34e:	f043 0304 	orr.w	r3, r3, #4
 800d352:	b25b      	sxtb	r3, r3
 800d354:	b2da      	uxtb	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	78ba      	ldrb	r2, [r7, #2]
 800d35e:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fe6c 	bl	800d03e <SPI_ETH>
}
 800d366:	bf00      	nop
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	460b      	mov	r3, r1
 800d37a:	70fb      	strb	r3, [r7, #3]
 800d37c:	4613      	mov	r3, r2
 800d37e:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d38c:	78fb      	ldrb	r3, [r7, #3]
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	b25b      	sxtb	r3, r3
 800d392:	f043 0304 	orr.w	r3, r3, #4
 800d396:	b25b      	sxtb	r3, r3
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	78ba      	ldrb	r2, [r7, #2]
 800d3a2:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff fe4a 	bl	800d03e <SPI_ETH>
}
 800d3aa:	bf00      	nop
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff fdf3 	bl	800cfa8 <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d3c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d3c6:	f7f5 fba9 	bl	8002b1c <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	2204      	movs	r2, #4
 800d3d4:	9201      	str	r2, [sp, #4]
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	2301      	movs	r3, #1
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2101      	movs	r1, #1
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7ff fe55 	bl	800d08e <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	9301      	str	r3, [sp, #4]
 800d400:	9200      	str	r2, [sp, #0]
 800d402:	2301      	movs	r3, #1
 800d404:	2200      	movs	r2, #0
 800d406:	2116      	movs	r1, #22
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff fe40 	bl	800d08e <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d414:	220f      	movs	r2, #15
 800d416:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d420:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d424:	461a      	mov	r2, r3
 800d426:	2301      	movs	r3, #1
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	9200      	str	r2, [sp, #0]
 800d42c:	2301      	movs	r3, #1
 800d42e:	2200      	movs	r2, #0
 800d430:	2119      	movs	r1, #25
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fe2b 	bl	800d08e <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43e:	22a0      	movs	r2, #160	; 0xa0
 800d440:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d44a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d44e:	461a      	mov	r2, r3
 800d450:	2301      	movs	r3, #1
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	9200      	str	r2, [sp, #0]
 800d456:	2301      	movs	r3, #1
 800d458:	2200      	movs	r2, #0
 800d45a:	211a      	movs	r1, #26
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff fe16 	bl	800d08e <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d468:	2207      	movs	r2, #7
 800d46a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d474:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d478:	461a      	mov	r2, r3
 800d47a:	2301      	movs	r3, #1
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	9200      	str	r2, [sp, #0]
 800d480:	2301      	movs	r3, #1
 800d482:	2200      	movs	r2, #0
 800d484:	211b      	movs	r1, #27
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff fe01 	bl	800d08e <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	2200      	movs	r2, #0
 800d494:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	9200      	str	r2, [sp, #0]
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2118      	movs	r1, #24
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff fdec 	bl	800d08e <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4bc:	330c      	adds	r3, #12
 800d4be:	2206      	movs	r2, #6
 800d4c0:	9201      	str	r2, [sp, #4]
 800d4c2:	9300      	str	r3, [sp, #0]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2109      	movs	r1, #9
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7ff fddf 	bl	800d08e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d4d0:	2113      	movs	r1, #19
 800d4d2:	481d      	ldr	r0, [pc, #116]	; (800d548 <eth_init+0x194>)
 800d4d4:	f7f4 f812 	bl	80014fc <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4de:	3304      	adds	r3, #4
 800d4e0:	2204      	movs	r2, #4
 800d4e2:	9201      	str	r2, [sp, #4]
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fdce 	bl	800d08e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d4f2:	2119      	movs	r1, #25
 800d4f4:	4815      	ldr	r0, [pc, #84]	; (800d54c <eth_init+0x198>)
 800d4f6:	f7f4 f801 	bl	80014fc <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d500:	3308      	adds	r3, #8
 800d502:	2204      	movs	r2, #4
 800d504:	9201      	str	r2, [sp, #4]
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	2301      	movs	r3, #1
 800d50a:	2200      	movs	r2, #0
 800d50c:	2105      	movs	r1, #5
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fdbd 	bl	800d08e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d514:	2116      	movs	r1, #22
 800d516:	480e      	ldr	r0, [pc, #56]	; (800d550 <eth_init+0x19c>)
 800d518:	f7f3 fff0 	bl	80014fc <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d522:	3312      	adds	r3, #18
 800d524:	2204      	movs	r2, #4
 800d526:	9201      	str	r2, [sp, #4]
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	2301      	movs	r3, #1
 800d52c:	2200      	movs	r2, #0
 800d52e:	210f      	movs	r1, #15
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff fdac 	bl	800d08e <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d536:	2112      	movs	r1, #18
 800d538:	4806      	ldr	r0, [pc, #24]	; (800d554 <eth_init+0x1a0>)
 800d53a:	f7f3 ffdf 	bl	80014fc <ITM0_Write>

}
 800d53e:	bf00      	nop
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	08010a1c 	.word	0x08010a1c
 800d54c:	08010a34 	.word	0x08010a34
 800d550:	08010a50 	.word	0x08010a50
 800d554:	08010a6c 	.word	0x08010a6c

0800d558 <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b086      	sub	sp, #24
 800d55c:	af02      	add	r7, sp, #8
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	460b      	mov	r3, r1
 800d562:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d576:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d57a:	461a      	mov	r2, r3
 800d57c:	2301      	movs	r3, #1
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	9200      	str	r2, [sp, #0]
 800d582:	2301      	movs	r3, #1
 800d584:	2201      	movs	r2, #1
 800d586:	211e      	movs	r1, #30
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fd80 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d594:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d598:	461a      	mov	r2, r3
 800d59a:	2301      	movs	r3, #1
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	9200      	str	r2, [sp, #0]
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	211f      	movs	r1, #31
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff fd71 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	9301      	str	r3, [sp, #4]
 800d5bc:	9200      	str	r2, [sp, #0]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	2205      	movs	r2, #5
 800d5c2:	211e      	movs	r1, #30
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff fd62 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	9200      	str	r2, [sp, #0]
 800d5dc:	2301      	movs	r3, #1
 800d5de:	2205      	movs	r2, #5
 800d5e0:	211f      	movs	r1, #31
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff fd53 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5ee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	9200      	str	r2, [sp, #0]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	2209      	movs	r2, #9
 800d5fe:	211e      	movs	r1, #30
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7ff fd44 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d60c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d610:	461a      	mov	r2, r3
 800d612:	2301      	movs	r3, #1
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	9200      	str	r2, [sp, #0]
 800d618:	2301      	movs	r3, #1
 800d61a:	2209      	movs	r2, #9
 800d61c:	211f      	movs	r1, #31
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fd35 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d62a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d62e:	461a      	mov	r2, r3
 800d630:	2301      	movs	r3, #1
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	9200      	str	r2, [sp, #0]
 800d636:	2301      	movs	r3, #1
 800d638:	220d      	movs	r2, #13
 800d63a:	211e      	movs	r1, #30
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fd26 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d648:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d64c:	461a      	mov	r2, r3
 800d64e:	2301      	movs	r3, #1
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	9200      	str	r2, [sp, #0]
 800d654:	2301      	movs	r3, #1
 800d656:	220d      	movs	r2, #13
 800d658:	211f      	movs	r1, #31
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff fd17 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d666:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d66a:	461a      	mov	r2, r3
 800d66c:	2301      	movs	r3, #1
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	9200      	str	r2, [sp, #0]
 800d672:	2301      	movs	r3, #1
 800d674:	2211      	movs	r2, #17
 800d676:	211e      	movs	r1, #30
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fd08 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d684:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d688:	461a      	mov	r2, r3
 800d68a:	2301      	movs	r3, #1
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	9200      	str	r2, [sp, #0]
 800d690:	2301      	movs	r3, #1
 800d692:	2211      	movs	r2, #17
 800d694:	211f      	movs	r1, #31
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff fcf9 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	9301      	str	r3, [sp, #4]
 800d6ac:	9200      	str	r2, [sp, #0]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	2215      	movs	r2, #21
 800d6b2:	211e      	movs	r1, #30
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff fcea 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	9200      	str	r2, [sp, #0]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	2215      	movs	r2, #21
 800d6d0:	211f      	movs	r1, #31
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7ff fcdb 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	9301      	str	r3, [sp, #4]
 800d6e8:	9200      	str	r2, [sp, #0]
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	2219      	movs	r2, #25
 800d6ee:	211e      	movs	r1, #30
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff fccc 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d700:	461a      	mov	r2, r3
 800d702:	2301      	movs	r3, #1
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	9200      	str	r2, [sp, #0]
 800d708:	2301      	movs	r3, #1
 800d70a:	2219      	movs	r2, #25
 800d70c:	211f      	movs	r1, #31
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff fcbd 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d71e:	461a      	mov	r2, r3
 800d720:	2301      	movs	r3, #1
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	9200      	str	r2, [sp, #0]
 800d726:	2301      	movs	r3, #1
 800d728:	221d      	movs	r2, #29
 800d72a:	211e      	movs	r1, #30
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff fcae 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d738:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d73c:	461a      	mov	r2, r3
 800d73e:	2301      	movs	r3, #1
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	9200      	str	r2, [sp, #0]
 800d744:	2301      	movs	r3, #1
 800d746:	221d      	movs	r2, #29
 800d748:	211f      	movs	r1, #31
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff fc9f 	bl	800d08e <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d756:	2200      	movs	r2, #0
 800d758:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d762:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d766:	461a      	mov	r2, r3
 800d768:	2301      	movs	r3, #1
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	9200      	str	r2, [sp, #0]
 800d76e:	2301      	movs	r3, #1
 800d770:	2201      	movs	r2, #1
 800d772:	2124      	movs	r1, #36	; 0x24
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff fc8a 	bl	800d08e <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d780:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d784:	461a      	mov	r2, r3
 800d786:	2301      	movs	r3, #1
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	9200      	str	r2, [sp, #0]
 800d78c:	2301      	movs	r3, #1
 800d78e:	2201      	movs	r2, #1
 800d790:	2125      	movs	r1, #37	; 0x25
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff fc7b 	bl	800d08e <SPI_ETH_REG>
	 uint16_t b=0;
 800d798:	2300      	movs	r3, #0
 800d79a:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d79c:	2302      	movs	r3, #2
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	f107 030c 	add.w	r3, r7, #12
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	2124      	movs	r1, #36	; 0x24
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff fc6e 	bl	800d08e <SPI_ETH_REG>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7bc:	3302      	adds	r3, #2
 800d7be:	2202      	movs	r2, #2
 800d7c0:	9201      	str	r2, [sp, #4]
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	2104      	movs	r1, #4
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7ff fc5f 	bl	800d08e <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d7d0:	212c      	movs	r1, #44	; 0x2c
 800d7d2:	4804      	ldr	r0, [pc, #16]	; (800d7e4 <eth_socket_init+0x28c>)
 800d7d4:	f7f3 fe92 	bl	80014fc <ITM0_Write>


}
 800d7d8:	bf00      	nop
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08010a84 	.word	0x08010a84

0800d7e8 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2203      	movs	r2, #3
 800d7fe:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	b2da      	uxtb	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7ff fc17 	bl	800d03e <SPI_ETH>
			return(y->RX[3]);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b082      	sub	sp, #8
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff fbfc 	bl	800d03e <SPI_ETH>
			return(y->RX[3]);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b08c      	sub	sp, #48	; 0x30
 800d858:	af02      	add	r7, sp, #8
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	607a      	str	r2, [r7, #4]
 800d85e:	461a      	mov	r2, r3
 800d860:	460b      	mov	r3, r1
 800d862:	72fb      	strb	r3, [r7, #11]
 800d864:	4613      	mov	r3, r2
 800d866:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d868:	2300      	movs	r3, #0
 800d86a:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d86c:	2300      	movs	r3, #0
 800d86e:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d870:	2300      	movs	r3, #0
 800d872:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d874:	2300      	movs	r3, #0
 800d876:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d878:	2300      	movs	r3, #0
 800d87a:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d87c:	2300      	movs	r3, #0
 800d87e:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d880:	2300      	movs	r3, #0
 800d882:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d884:	2300      	movs	r3, #0
 800d886:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d888:	2300      	movs	r3, #0
 800d88a:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d89a:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8a6:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d8a8:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	9301      	str	r3, [sp, #4]
 800d8ae:	f107 0310 	add.w	r3, r7, #16
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	2128      	movs	r1, #40	; 0x28
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f7ff fbe7 	bl	800d08e <SPI_ETH_REG>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d8c4:	8bfa      	ldrh	r2, [r7, #30]
 800d8c6:	8afb      	ldrh	r3, [r7, #22]
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d8cc:	8aba      	ldrh	r2, [r7, #20]
 800d8ce:	8bbb      	ldrh	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d8d4:	8bba      	ldrh	r2, [r7, #28]
 800d8d6:	893b      	ldrh	r3, [r7, #8]
 800d8d8:	441a      	add	r2, r3
 800d8da:	8afb      	ldrh	r3, [r7, #22]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	dd30      	ble.n	800d944 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d8e2:	8afa      	ldrh	r2, [r7, #22]
 800d8e4:	8bbb      	ldrh	r3, [r7, #28]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d8f4:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d8f6:	8b79      	ldrh	r1, [r7, #26]
 800d8f8:	7afb      	ldrb	r3, [r7, #11]
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	4603      	mov	r3, r0
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f7ff fc90 	bl	800d228 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d908:	8c3a      	ldrh	r2, [r7, #32]
 800d90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90c:	4413      	add	r3, r2
 800d90e:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d910:	893a      	ldrh	r2, [r7, #8]
 800d912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d91a:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d922:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d924:	8ab9      	ldrh	r1, [r7, #20]
 800d926:	7afb      	ldrb	r3, [r7, #11]
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	4603      	mov	r3, r0
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff fc79 	bl	800d228 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d936:	8bfa      	ldrh	r2, [r7, #30]
 800d938:	893b      	ldrh	r3, [r7, #8]
 800d93a:	4413      	add	r3, r2
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	801a      	strh	r2, [r3, #0]
 800d942:	e012      	b.n	800d96a <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d94a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d94c:	8b79      	ldrh	r1, [r7, #26]
 800d94e:	7afb      	ldrb	r3, [r7, #11]
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	893b      	ldrh	r3, [r7, #8]
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4603      	mov	r3, r0
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7ff fc65 	bl	800d228 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800d95e:	8bfa      	ldrh	r2, [r7, #30]
 800d960:	893b      	ldrh	r3, [r7, #8]
 800d962:	4413      	add	r3, r2
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	b29b      	uxth	r3, r3
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3728      	adds	r7, #40	; 0x28
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b08c      	sub	sp, #48	; 0x30
 800d97a:	af02      	add	r7, sp, #8
 800d97c:	60f8      	str	r0, [r7, #12]
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	461a      	mov	r2, r3
 800d982:	460b      	mov	r3, r1
 800d984:	72fb      	strb	r3, [r7, #11]
 800d986:	4613      	mov	r3, r2
 800d988:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d98a:	2300      	movs	r3, #0
 800d98c:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800d98e:	2300      	movs	r3, #0
 800d990:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800d992:	2300      	movs	r3, #0
 800d994:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800d996:	2300      	movs	r3, #0
 800d998:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800d99a:	2300      	movs	r3, #0
 800d99c:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800d99e:	2300      	movs	r3, #0
 800d9a0:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9c0:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d9cc:	827b      	strh	r3, [r7, #18]
		}
		break;
 800d9ce:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d9d0:	e00c      	b.n	800d9ec <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	f107 0310 	add.w	r3, r7, #16
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	2201      	movs	r2, #1
 800d9e0:	2120      	movs	r1, #32
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff fb53 	bl	800d08e <SPI_ETH_REG>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d9ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9ee:	893b      	ldrh	r3, [r7, #8]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d3ee      	bcc.n	800d9d2 <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	9301      	str	r3, [sp, #4]
 800d9f8:	f107 0310 	add.w	r3, r7, #16
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	2300      	movs	r3, #0
 800da00:	2201      	movs	r2, #1
 800da02:	2124      	movs	r1, #36	; 0x24
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f7ff fb42 	bl	800d08e <SPI_ETH_REG>
 800da0a:	4603      	mov	r3, r0
 800da0c:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800da0e:	8bba      	ldrh	r2, [r7, #28]
 800da10:	8abb      	ldrh	r3, [r7, #20]
 800da12:	4013      	ands	r3, r2
 800da14:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800da16:	8a7a      	ldrh	r2, [r7, #18]
 800da18:	8b7b      	ldrh	r3, [r7, #26]
 800da1a:	4413      	add	r3, r2
 800da1c:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800da1e:	8b7a      	ldrh	r2, [r7, #26]
 800da20:	893b      	ldrh	r3, [r7, #8]
 800da22:	441a      	add	r2, r3
 800da24:	8abb      	ldrh	r3, [r7, #20]
 800da26:	3301      	adds	r3, #1
 800da28:	429a      	cmp	r2, r3
 800da2a:	dd30      	ble.n	800da8e <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800da2c:	8aba      	ldrh	r2, [r7, #20]
 800da2e:	8b7b      	ldrh	r3, [r7, #26]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	b29b      	uxth	r3, r3
 800da34:	3301      	adds	r3, #1
 800da36:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800da3e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800da40:	8b39      	ldrh	r1, [r7, #24]
 800da42:	7afb      	ldrb	r3, [r7, #11]
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	8c3b      	ldrh	r3, [r7, #32]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	4603      	mov	r3, r0
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7ff fc2b 	bl	800d2a8 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800da52:	8bfa      	ldrh	r2, [r7, #30]
 800da54:	8c3b      	ldrh	r3, [r7, #32]
 800da56:	4413      	add	r3, r2
 800da58:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800da5a:	893a      	ldrh	r2, [r7, #8]
 800da5c:	8c3b      	ldrh	r3, [r7, #32]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800da62:	8c3b      	ldrh	r3, [r7, #32]
 800da64:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800da6c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800da6e:	8a79      	ldrh	r1, [r7, #18]
 800da70:	7afb      	ldrb	r3, [r7, #11]
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4603      	mov	r3, r0
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f7ff fc14 	bl	800d2a8 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800da80:	8bba      	ldrh	r2, [r7, #28]
 800da82:	893b      	ldrh	r3, [r7, #8]
 800da84:	4413      	add	r3, r2
 800da86:	b29a      	uxth	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	801a      	strh	r2, [r3, #0]
 800da8c:	e012      	b.n	800dab4 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800da94:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800da96:	8b39      	ldrh	r1, [r7, #24]
 800da98:	7afb      	ldrb	r3, [r7, #11]
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	893b      	ldrh	r3, [r7, #8]
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	4603      	mov	r3, r0
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fc00 	bl	800d2a8 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800daa8:	8bba      	ldrh	r2, [r7, #28]
 800daaa:	893b      	ldrh	r3, [r7, #8]
 800daac:	4413      	add	r3, r2
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	801a      	strh	r2, [r3, #0]
					}

}
 800dab4:	bf00      	nop
 800dab6:	4618      	mov	r0, r3
 800dab8:	3728      	adds	r7, #40	; 0x28
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af02      	add	r7, sp, #8
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dace:	3318      	adds	r3, #24
 800dad0:	2201      	movs	r2, #1
 800dad2:	9201      	str	r2, [sp, #4]
 800dad4:	9300      	str	r3, [sp, #0]
 800dad6:	2300      	movs	r3, #0
 800dad8:	2200      	movs	r2, #0
 800dada:	2100      	movs	r1, #0
 800dadc:	6838      	ldr	r0, [r7, #0]
 800dade:	f7ff fad6 	bl	800d08e <SPI_ETH_REG>
 800dae2:	4603      	mov	r3, r0
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800daf0:	3318      	adds	r3, #24
 800daf2:	2201      	movs	r2, #1
 800daf4:	9201      	str	r2, [sp, #4]
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	2300      	movs	r3, #0
 800dafa:	2200      	movs	r2, #0
 800dafc:	2101      	movs	r1, #1
 800dafe:	6838      	ldr	r0, [r7, #0]
 800db00:	f7ff fac5 	bl	800d08e <SPI_ETH_REG>
 800db04:	4603      	mov	r3, r0
 800db06:	b2da      	uxtb	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db12:	3318      	adds	r3, #24
 800db14:	2201      	movs	r2, #1
 800db16:	9201      	str	r2, [sp, #4]
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	2300      	movs	r3, #0
 800db1c:	2200      	movs	r2, #0
 800db1e:	2102      	movs	r1, #2
 800db20:	6838      	ldr	r0, [r7, #0]
 800db22:	f7ff fab4 	bl	800d08e <SPI_ETH_REG>
 800db26:	4603      	mov	r3, r0
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db34:	3318      	adds	r3, #24
 800db36:	2201      	movs	r2, #1
 800db38:	9201      	str	r2, [sp, #4]
 800db3a:	9300      	str	r3, [sp, #0]
 800db3c:	2300      	movs	r3, #0
 800db3e:	2200      	movs	r2, #0
 800db40:	2103      	movs	r1, #3
 800db42:	6838      	ldr	r0, [r7, #0]
 800db44:	f7ff faa3 	bl	800d08e <SPI_ETH_REG>
 800db48:	4603      	mov	r3, r0
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db56:	3318      	adds	r3, #24
 800db58:	2201      	movs	r2, #1
 800db5a:	9201      	str	r2, [sp, #4]
 800db5c:	9300      	str	r3, [sp, #0]
 800db5e:	2300      	movs	r3, #0
 800db60:	2200      	movs	r2, #0
 800db62:	2104      	movs	r1, #4
 800db64:	6838      	ldr	r0, [r7, #0]
 800db66:	f7ff fa92 	bl	800d08e <SPI_ETH_REG>
 800db6a:	4603      	mov	r3, r0
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db78:	3318      	adds	r3, #24
 800db7a:	2201      	movs	r2, #1
 800db7c:	9201      	str	r2, [sp, #4]
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	2300      	movs	r3, #0
 800db82:	2200      	movs	r2, #0
 800db84:	2105      	movs	r1, #5
 800db86:	6838      	ldr	r0, [r7, #0]
 800db88:	f7ff fa81 	bl	800d08e <SPI_ETH_REG>
 800db8c:	4603      	mov	r3, r0
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db9a:	3318      	adds	r3, #24
 800db9c:	2201      	movs	r2, #1
 800db9e:	9201      	str	r2, [sp, #4]
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	2300      	movs	r3, #0
 800dba4:	2200      	movs	r2, #0
 800dba6:	2106      	movs	r1, #6
 800dba8:	6838      	ldr	r0, [r7, #0]
 800dbaa:	f7ff fa70 	bl	800d08e <SPI_ETH_REG>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbbc:	3318      	adds	r3, #24
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	9201      	str	r2, [sp, #4]
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	2107      	movs	r1, #7
 800dbca:	6838      	ldr	r0, [r7, #0]
 800dbcc:	f7ff fa5f 	bl	800d08e <SPI_ETH_REG>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	b2da      	uxtb	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbde:	3318      	adds	r3, #24
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	9201      	str	r2, [sp, #4]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2108      	movs	r1, #8
 800dbec:	6838      	ldr	r0, [r7, #0]
 800dbee:	f7ff fa4e 	bl	800d08e <SPI_ETH_REG>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc00:	3318      	adds	r3, #24
 800dc02:	2201      	movs	r2, #1
 800dc04:	9201      	str	r2, [sp, #4]
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	2109      	movs	r1, #9
 800dc0e:	6838      	ldr	r0, [r7, #0]
 800dc10:	f7ff fa3d 	bl	800d08e <SPI_ETH_REG>
 800dc14:	4603      	mov	r3, r0
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc22:	3318      	adds	r3, #24
 800dc24:	2201      	movs	r2, #1
 800dc26:	9201      	str	r2, [sp, #4]
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	210a      	movs	r1, #10
 800dc30:	6838      	ldr	r0, [r7, #0]
 800dc32:	f7ff fa2c 	bl	800d08e <SPI_ETH_REG>
 800dc36:	4603      	mov	r3, r0
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc44:	3318      	adds	r3, #24
 800dc46:	2201      	movs	r2, #1
 800dc48:	9201      	str	r2, [sp, #4]
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	2200      	movs	r2, #0
 800dc50:	210b      	movs	r1, #11
 800dc52:	6838      	ldr	r0, [r7, #0]
 800dc54:	f7ff fa1b 	bl	800d08e <SPI_ETH_REG>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc66:	3318      	adds	r3, #24
 800dc68:	2201      	movs	r2, #1
 800dc6a:	9201      	str	r2, [sp, #4]
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	2200      	movs	r2, #0
 800dc72:	210c      	movs	r1, #12
 800dc74:	6838      	ldr	r0, [r7, #0]
 800dc76:	f7ff fa0a 	bl	800d08e <SPI_ETH_REG>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc88:	3318      	adds	r3, #24
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	9201      	str	r2, [sp, #4]
 800dc8e:	9300      	str	r3, [sp, #0]
 800dc90:	2300      	movs	r3, #0
 800dc92:	2200      	movs	r2, #0
 800dc94:	210d      	movs	r1, #13
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f7ff f9f9 	bl	800d08e <SPI_ETH_REG>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcaa:	3318      	adds	r3, #24
 800dcac:	2201      	movs	r2, #1
 800dcae:	9201      	str	r2, [sp, #4]
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	210e      	movs	r1, #14
 800dcb8:	6838      	ldr	r0, [r7, #0]
 800dcba:	f7ff f9e8 	bl	800d08e <SPI_ETH_REG>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dccc:	3318      	adds	r3, #24
 800dcce:	2201      	movs	r2, #1
 800dcd0:	9201      	str	r2, [sp, #4]
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	210f      	movs	r1, #15
 800dcda:	6838      	ldr	r0, [r7, #0]
 800dcdc:	f7ff f9d7 	bl	800d08e <SPI_ETH_REG>
 800dce0:	4603      	mov	r3, r0
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcee:	3318      	adds	r3, #24
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2110      	movs	r1, #16
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f7ff f9c6 	bl	800d08e <SPI_ETH_REG>
 800dd02:	4603      	mov	r3, r0
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd10:	3318      	adds	r3, #24
 800dd12:	2201      	movs	r2, #1
 800dd14:	9201      	str	r2, [sp, #4]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2111      	movs	r1, #17
 800dd1e:	6838      	ldr	r0, [r7, #0]
 800dd20:	f7ff f9b5 	bl	800d08e <SPI_ETH_REG>
 800dd24:	4603      	mov	r3, r0
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd32:	3318      	adds	r3, #24
 800dd34:	2201      	movs	r2, #1
 800dd36:	9201      	str	r2, [sp, #4]
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2112      	movs	r1, #18
 800dd40:	6838      	ldr	r0, [r7, #0]
 800dd42:	f7ff f9a4 	bl	800d08e <SPI_ETH_REG>
 800dd46:	4603      	mov	r3, r0
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd54:	3318      	adds	r3, #24
 800dd56:	2201      	movs	r2, #1
 800dd58:	9201      	str	r2, [sp, #4]
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2113      	movs	r1, #19
 800dd62:	6838      	ldr	r0, [r7, #0]
 800dd64:	f7ff f993 	bl	800d08e <SPI_ETH_REG>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd76:	3318      	adds	r3, #24
 800dd78:	2201      	movs	r2, #1
 800dd7a:	9201      	str	r2, [sp, #4]
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	2200      	movs	r2, #0
 800dd82:	2114      	movs	r1, #20
 800dd84:	6838      	ldr	r0, [r7, #0]
 800dd86:	f7ff f982 	bl	800d08e <SPI_ETH_REG>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd98:	3318      	adds	r3, #24
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	9201      	str	r2, [sp, #4]
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	2300      	movs	r3, #0
 800dda2:	2200      	movs	r2, #0
 800dda4:	2115      	movs	r1, #21
 800dda6:	6838      	ldr	r0, [r7, #0]
 800dda8:	f7ff f971 	bl	800d08e <SPI_ETH_REG>
 800ddac:	4603      	mov	r3, r0
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddba:	3318      	adds	r3, #24
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	9201      	str	r2, [sp, #4]
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2116      	movs	r1, #22
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f7ff f960 	bl	800d08e <SPI_ETH_REG>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dddc:	3318      	adds	r3, #24
 800ddde:	2201      	movs	r2, #1
 800dde0:	9201      	str	r2, [sp, #4]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	2300      	movs	r3, #0
 800dde6:	2200      	movs	r2, #0
 800dde8:	2117      	movs	r1, #23
 800ddea:	6838      	ldr	r0, [r7, #0]
 800ddec:	f7ff f94f 	bl	800d08e <SPI_ETH_REG>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddfe:	3318      	adds	r3, #24
 800de00:	2201      	movs	r2, #1
 800de02:	9201      	str	r2, [sp, #4]
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	2300      	movs	r3, #0
 800de08:	2200      	movs	r2, #0
 800de0a:	2118      	movs	r1, #24
 800de0c:	6838      	ldr	r0, [r7, #0]
 800de0e:	f7ff f93e 	bl	800d08e <SPI_ETH_REG>
 800de12:	4603      	mov	r3, r0
 800de14:	b2da      	uxtb	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de20:	3318      	adds	r3, #24
 800de22:	2201      	movs	r2, #1
 800de24:	9201      	str	r2, [sp, #4]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	2300      	movs	r3, #0
 800de2a:	2200      	movs	r2, #0
 800de2c:	2119      	movs	r1, #25
 800de2e:	6838      	ldr	r0, [r7, #0]
 800de30:	f7ff f92d 	bl	800d08e <SPI_ETH_REG>
 800de34:	4603      	mov	r3, r0
 800de36:	b2da      	uxtb	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de42:	3318      	adds	r3, #24
 800de44:	2201      	movs	r2, #1
 800de46:	9201      	str	r2, [sp, #4]
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	211a      	movs	r1, #26
 800de50:	6838      	ldr	r0, [r7, #0]
 800de52:	f7ff f91c 	bl	800d08e <SPI_ETH_REG>
 800de56:	4603      	mov	r3, r0
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de64:	3318      	adds	r3, #24
 800de66:	2201      	movs	r2, #1
 800de68:	9201      	str	r2, [sp, #4]
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	2300      	movs	r3, #0
 800de6e:	2200      	movs	r2, #0
 800de70:	211b      	movs	r1, #27
 800de72:	6838      	ldr	r0, [r7, #0]
 800de74:	f7ff f90b 	bl	800d08e <SPI_ETH_REG>
 800de78:	4603      	mov	r3, r0
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de86:	3318      	adds	r3, #24
 800de88:	2201      	movs	r2, #1
 800de8a:	9201      	str	r2, [sp, #4]
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	2300      	movs	r3, #0
 800de90:	2200      	movs	r2, #0
 800de92:	211c      	movs	r1, #28
 800de94:	6838      	ldr	r0, [r7, #0]
 800de96:	f7ff f8fa 	bl	800d08e <SPI_ETH_REG>
 800de9a:	4603      	mov	r3, r0
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dea8:	3318      	adds	r3, #24
 800deaa:	2201      	movs	r2, #1
 800deac:	9201      	str	r2, [sp, #4]
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	2300      	movs	r3, #0
 800deb2:	2200      	movs	r2, #0
 800deb4:	211d      	movs	r1, #29
 800deb6:	6838      	ldr	r0, [r7, #0]
 800deb8:	f7ff f8e9 	bl	800d08e <SPI_ETH_REG>
 800debc:	4603      	mov	r3, r0
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deca:	3318      	adds	r3, #24
 800decc:	2201      	movs	r2, #1
 800dece:	9201      	str	r2, [sp, #4]
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	2300      	movs	r3, #0
 800ded4:	2200      	movs	r2, #0
 800ded6:	211e      	movs	r1, #30
 800ded8:	6838      	ldr	r0, [r7, #0]
 800deda:	f7ff f8d8 	bl	800d08e <SPI_ETH_REG>
 800dede:	4603      	mov	r3, r0
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deec:	3318      	adds	r3, #24
 800deee:	2201      	movs	r2, #1
 800def0:	9201      	str	r2, [sp, #4]
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	2300      	movs	r3, #0
 800def6:	2200      	movs	r2, #0
 800def8:	211f      	movs	r1, #31
 800defa:	6838      	ldr	r0, [r7, #0]
 800defc:	f7ff f8c7 	bl	800d08e <SPI_ETH_REG>
 800df00:	4603      	mov	r3, r0
 800df02:	b2da      	uxtb	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df0e:	3318      	adds	r3, #24
 800df10:	2201      	movs	r2, #1
 800df12:	9201      	str	r2, [sp, #4]
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	2200      	movs	r2, #0
 800df1a:	2120      	movs	r1, #32
 800df1c:	6838      	ldr	r0, [r7, #0]
 800df1e:	f7ff f8b6 	bl	800d08e <SPI_ETH_REG>
 800df22:	4603      	mov	r3, r0
 800df24:	b2da      	uxtb	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df32:	3318      	adds	r3, #24
 800df34:	2201      	movs	r2, #1
 800df36:	9201      	str	r2, [sp, #4]
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	2300      	movs	r3, #0
 800df3c:	2200      	movs	r2, #0
 800df3e:	2121      	movs	r1, #33	; 0x21
 800df40:	6838      	ldr	r0, [r7, #0]
 800df42:	f7ff f8a4 	bl	800d08e <SPI_ETH_REG>
 800df46:	4603      	mov	r3, r0
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df56:	3318      	adds	r3, #24
 800df58:	2201      	movs	r2, #1
 800df5a:	9201      	str	r2, [sp, #4]
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	2300      	movs	r3, #0
 800df60:	2200      	movs	r2, #0
 800df62:	2122      	movs	r1, #34	; 0x22
 800df64:	6838      	ldr	r0, [r7, #0]
 800df66:	f7ff f892 	bl	800d08e <SPI_ETH_REG>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df7a:	3318      	adds	r3, #24
 800df7c:	2201      	movs	r2, #1
 800df7e:	9201      	str	r2, [sp, #4]
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	2200      	movs	r2, #0
 800df86:	2123      	movs	r1, #35	; 0x23
 800df88:	6838      	ldr	r0, [r7, #0]
 800df8a:	f7ff f880 	bl	800d08e <SPI_ETH_REG>
 800df8e:	4603      	mov	r3, r0
 800df90:	b2da      	uxtb	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df9e:	3318      	adds	r3, #24
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	9201      	str	r2, [sp, #4]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2124      	movs	r1, #36	; 0x24
 800dfac:	6838      	ldr	r0, [r7, #0]
 800dfae:	f7ff f86e 	bl	800d08e <SPI_ETH_REG>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfc2:	3318      	adds	r3, #24
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	9201      	str	r2, [sp, #4]
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	2300      	movs	r3, #0
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2125      	movs	r1, #37	; 0x25
 800dfd0:	6838      	ldr	r0, [r7, #0]
 800dfd2:	f7ff f85c 	bl	800d08e <SPI_ETH_REG>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfe6:	3318      	adds	r3, #24
 800dfe8:	2201      	movs	r2, #1
 800dfea:	9201      	str	r2, [sp, #4]
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	2300      	movs	r3, #0
 800dff0:	2200      	movs	r2, #0
 800dff2:	2126      	movs	r1, #38	; 0x26
 800dff4:	6838      	ldr	r0, [r7, #0]
 800dff6:	f7ff f84a 	bl	800d08e <SPI_ETH_REG>
 800dffa:	4603      	mov	r3, r0
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e00a:	3318      	adds	r3, #24
 800e00c:	2201      	movs	r2, #1
 800e00e:	9201      	str	r2, [sp, #4]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	2300      	movs	r3, #0
 800e014:	2200      	movs	r2, #0
 800e016:	2127      	movs	r1, #39	; 0x27
 800e018:	6838      	ldr	r0, [r7, #0]
 800e01a:	f7ff f838 	bl	800d08e <SPI_ETH_REG>
 800e01e:	4603      	mov	r3, r0
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e02e:	3318      	adds	r3, #24
 800e030:	2201      	movs	r2, #1
 800e032:	9201      	str	r2, [sp, #4]
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	2300      	movs	r3, #0
 800e038:	2200      	movs	r2, #0
 800e03a:	2128      	movs	r1, #40	; 0x28
 800e03c:	6838      	ldr	r0, [r7, #0]
 800e03e:	f7ff f826 	bl	800d08e <SPI_ETH_REG>
 800e042:	4603      	mov	r3, r0
 800e044:	b2da      	uxtb	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e052:	3318      	adds	r3, #24
 800e054:	2201      	movs	r2, #1
 800e056:	9201      	str	r2, [sp, #4]
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	2300      	movs	r3, #0
 800e05c:	2200      	movs	r2, #0
 800e05e:	2129      	movs	r1, #41	; 0x29
 800e060:	6838      	ldr	r0, [r7, #0]
 800e062:	f7ff f814 	bl	800d08e <SPI_ETH_REG>
 800e066:	4603      	mov	r3, r0
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e076:	3318      	adds	r3, #24
 800e078:	2201      	movs	r2, #1
 800e07a:	9201      	str	r2, [sp, #4]
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	2300      	movs	r3, #0
 800e080:	2200      	movs	r2, #0
 800e082:	212a      	movs	r1, #42	; 0x2a
 800e084:	6838      	ldr	r0, [r7, #0]
 800e086:	f7ff f802 	bl	800d08e <SPI_ETH_REG>
 800e08a:	4603      	mov	r3, r0
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e09a:	3318      	adds	r3, #24
 800e09c:	2201      	movs	r2, #1
 800e09e:	9201      	str	r2, [sp, #4]
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	212b      	movs	r1, #43	; 0x2b
 800e0a8:	6838      	ldr	r0, [r7, #0]
 800e0aa:	f7fe fff0 	bl	800d08e <SPI_ETH_REG>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0be:	3318      	adds	r3, #24
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	9201      	str	r2, [sp, #4]
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	212c      	movs	r1, #44	; 0x2c
 800e0cc:	6838      	ldr	r0, [r7, #0]
 800e0ce:	f7fe ffde 	bl	800d08e <SPI_ETH_REG>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0e2:	3318      	adds	r3, #24
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	9201      	str	r2, [sp, #4]
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	212d      	movs	r1, #45	; 0x2d
 800e0f0:	6838      	ldr	r0, [r7, #0]
 800e0f2:	f7fe ffcc 	bl	800d08e <SPI_ETH_REG>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e106:	3318      	adds	r3, #24
 800e108:	2201      	movs	r2, #1
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	2300      	movs	r3, #0
 800e110:	2200      	movs	r2, #0
 800e112:	212e      	movs	r1, #46	; 0x2e
 800e114:	6838      	ldr	r0, [r7, #0]
 800e116:	f7fe ffba 	bl	800d08e <SPI_ETH_REG>
 800e11a:	4603      	mov	r3, r0
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e12a:	3318      	adds	r3, #24
 800e12c:	2201      	movs	r2, #1
 800e12e:	9201      	str	r2, [sp, #4]
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	2300      	movs	r3, #0
 800e134:	2200      	movs	r2, #0
 800e136:	2139      	movs	r1, #57	; 0x39
 800e138:	6838      	ldr	r0, [r7, #0]
 800e13a:	f7fe ffa8 	bl	800d08e <SPI_ETH_REG>
 800e13e:	4603      	mov	r3, r0
 800e140:	b2da      	uxtb	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e14e:	3318      	adds	r3, #24
 800e150:	2201      	movs	r2, #1
 800e152:	9201      	str	r2, [sp, #4]
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	2300      	movs	r3, #0
 800e158:	2201      	movs	r2, #1
 800e15a:	2100      	movs	r1, #0
 800e15c:	6838      	ldr	r0, [r7, #0]
 800e15e:	f7fe ff96 	bl	800d08e <SPI_ETH_REG>
 800e162:	4603      	mov	r3, r0
 800e164:	b2da      	uxtb	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e172:	3318      	adds	r3, #24
 800e174:	2201      	movs	r2, #1
 800e176:	9201      	str	r2, [sp, #4]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	2300      	movs	r3, #0
 800e17c:	2201      	movs	r2, #1
 800e17e:	2101      	movs	r1, #1
 800e180:	6838      	ldr	r0, [r7, #0]
 800e182:	f7fe ff84 	bl	800d08e <SPI_ETH_REG>
 800e186:	4603      	mov	r3, r0
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e196:	3318      	adds	r3, #24
 800e198:	2201      	movs	r2, #1
 800e19a:	9201      	str	r2, [sp, #4]
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	2300      	movs	r3, #0
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	2102      	movs	r1, #2
 800e1a4:	6838      	ldr	r0, [r7, #0]
 800e1a6:	f7fe ff72 	bl	800d08e <SPI_ETH_REG>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ba:	3318      	adds	r3, #24
 800e1bc:	2201      	movs	r2, #1
 800e1be:	9201      	str	r2, [sp, #4]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	2103      	movs	r1, #3
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f7fe ff60 	bl	800d08e <SPI_ETH_REG>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1de:	3318      	adds	r3, #24
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	9201      	str	r2, [sp, #4]
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	2104      	movs	r1, #4
 800e1ec:	6838      	ldr	r0, [r7, #0]
 800e1ee:	f7fe ff4e 	bl	800d08e <SPI_ETH_REG>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e202:	3318      	adds	r3, #24
 800e204:	2201      	movs	r2, #1
 800e206:	9201      	str	r2, [sp, #4]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	2300      	movs	r3, #0
 800e20c:	2201      	movs	r2, #1
 800e20e:	2105      	movs	r1, #5
 800e210:	6838      	ldr	r0, [r7, #0]
 800e212:	f7fe ff3c 	bl	800d08e <SPI_ETH_REG>
 800e216:	4603      	mov	r3, r0
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e226:	3318      	adds	r3, #24
 800e228:	2201      	movs	r2, #1
 800e22a:	9201      	str	r2, [sp, #4]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	2300      	movs	r3, #0
 800e230:	2201      	movs	r2, #1
 800e232:	2106      	movs	r1, #6
 800e234:	6838      	ldr	r0, [r7, #0]
 800e236:	f7fe ff2a 	bl	800d08e <SPI_ETH_REG>
 800e23a:	4603      	mov	r3, r0
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e24a:	3318      	adds	r3, #24
 800e24c:	2201      	movs	r2, #1
 800e24e:	9201      	str	r2, [sp, #4]
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	2300      	movs	r3, #0
 800e254:	2201      	movs	r2, #1
 800e256:	2107      	movs	r1, #7
 800e258:	6838      	ldr	r0, [r7, #0]
 800e25a:	f7fe ff18 	bl	800d08e <SPI_ETH_REG>
 800e25e:	4603      	mov	r3, r0
 800e260:	b2da      	uxtb	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e26e:	3318      	adds	r3, #24
 800e270:	2201      	movs	r2, #1
 800e272:	9201      	str	r2, [sp, #4]
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	2300      	movs	r3, #0
 800e278:	2201      	movs	r2, #1
 800e27a:	2108      	movs	r1, #8
 800e27c:	6838      	ldr	r0, [r7, #0]
 800e27e:	f7fe ff06 	bl	800d08e <SPI_ETH_REG>
 800e282:	4603      	mov	r3, r0
 800e284:	b2da      	uxtb	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e292:	3318      	adds	r3, #24
 800e294:	2201      	movs	r2, #1
 800e296:	9201      	str	r2, [sp, #4]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	2300      	movs	r3, #0
 800e29c:	2201      	movs	r2, #1
 800e29e:	2109      	movs	r1, #9
 800e2a0:	6838      	ldr	r0, [r7, #0]
 800e2a2:	f7fe fef4 	bl	800d08e <SPI_ETH_REG>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	9201      	str	r2, [sp, #4]
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	210a      	movs	r1, #10
 800e2c4:	6838      	ldr	r0, [r7, #0]
 800e2c6:	f7fe fee2 	bl	800d08e <SPI_ETH_REG>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2da:	3318      	adds	r3, #24
 800e2dc:	2201      	movs	r2, #1
 800e2de:	9201      	str	r2, [sp, #4]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	210b      	movs	r1, #11
 800e2e8:	6838      	ldr	r0, [r7, #0]
 800e2ea:	f7fe fed0 	bl	800d08e <SPI_ETH_REG>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2fe:	3318      	adds	r3, #24
 800e300:	2201      	movs	r2, #1
 800e302:	9201      	str	r2, [sp, #4]
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	2300      	movs	r3, #0
 800e308:	2201      	movs	r2, #1
 800e30a:	210c      	movs	r1, #12
 800e30c:	6838      	ldr	r0, [r7, #0]
 800e30e:	f7fe febe 	bl	800d08e <SPI_ETH_REG>
 800e312:	4603      	mov	r3, r0
 800e314:	b2da      	uxtb	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e322:	3318      	adds	r3, #24
 800e324:	2201      	movs	r2, #1
 800e326:	9201      	str	r2, [sp, #4]
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	2300      	movs	r3, #0
 800e32c:	2201      	movs	r2, #1
 800e32e:	210d      	movs	r1, #13
 800e330:	6838      	ldr	r0, [r7, #0]
 800e332:	f7fe feac 	bl	800d08e <SPI_ETH_REG>
 800e336:	4603      	mov	r3, r0
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e346:	3318      	adds	r3, #24
 800e348:	2201      	movs	r2, #1
 800e34a:	9201      	str	r2, [sp, #4]
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	2300      	movs	r3, #0
 800e350:	2201      	movs	r2, #1
 800e352:	210e      	movs	r1, #14
 800e354:	6838      	ldr	r0, [r7, #0]
 800e356:	f7fe fe9a 	bl	800d08e <SPI_ETH_REG>
 800e35a:	4603      	mov	r3, r0
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e36a:	3318      	adds	r3, #24
 800e36c:	2201      	movs	r2, #1
 800e36e:	9201      	str	r2, [sp, #4]
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	2300      	movs	r3, #0
 800e374:	2201      	movs	r2, #1
 800e376:	210f      	movs	r1, #15
 800e378:	6838      	ldr	r0, [r7, #0]
 800e37a:	f7fe fe88 	bl	800d08e <SPI_ETH_REG>
 800e37e:	4603      	mov	r3, r0
 800e380:	b2da      	uxtb	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e38e:	3318      	adds	r3, #24
 800e390:	2201      	movs	r2, #1
 800e392:	9201      	str	r2, [sp, #4]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	2300      	movs	r3, #0
 800e398:	2201      	movs	r2, #1
 800e39a:	2110      	movs	r1, #16
 800e39c:	6838      	ldr	r0, [r7, #0]
 800e39e:	f7fe fe76 	bl	800d08e <SPI_ETH_REG>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	b2da      	uxtb	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3b2:	3318      	adds	r3, #24
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	9201      	str	r2, [sp, #4]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	2201      	movs	r2, #1
 800e3be:	2111      	movs	r1, #17
 800e3c0:	6838      	ldr	r0, [r7, #0]
 800e3c2:	f7fe fe64 	bl	800d08e <SPI_ETH_REG>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3d6:	3318      	adds	r3, #24
 800e3d8:	2201      	movs	r2, #1
 800e3da:	9201      	str	r2, [sp, #4]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	2112      	movs	r1, #18
 800e3e4:	6838      	ldr	r0, [r7, #0]
 800e3e6:	f7fe fe52 	bl	800d08e <SPI_ETH_REG>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3fa:	3318      	adds	r3, #24
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	9201      	str	r2, [sp, #4]
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	2300      	movs	r3, #0
 800e404:	2201      	movs	r2, #1
 800e406:	2113      	movs	r1, #19
 800e408:	6838      	ldr	r0, [r7, #0]
 800e40a:	f7fe fe40 	bl	800d08e <SPI_ETH_REG>
 800e40e:	4603      	mov	r3, r0
 800e410:	b2da      	uxtb	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e41e:	3318      	adds	r3, #24
 800e420:	2201      	movs	r2, #1
 800e422:	9201      	str	r2, [sp, #4]
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	2300      	movs	r3, #0
 800e428:	2201      	movs	r2, #1
 800e42a:	2115      	movs	r1, #21
 800e42c:	6838      	ldr	r0, [r7, #0]
 800e42e:	f7fe fe2e 	bl	800d08e <SPI_ETH_REG>
 800e432:	4603      	mov	r3, r0
 800e434:	b2da      	uxtb	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e442:	3318      	adds	r3, #24
 800e444:	2201      	movs	r2, #1
 800e446:	9201      	str	r2, [sp, #4]
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	2300      	movs	r3, #0
 800e44c:	2201      	movs	r2, #1
 800e44e:	2116      	movs	r1, #22
 800e450:	6838      	ldr	r0, [r7, #0]
 800e452:	f7fe fe1c 	bl	800d08e <SPI_ETH_REG>
 800e456:	4603      	mov	r3, r0
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e466:	3318      	adds	r3, #24
 800e468:	2201      	movs	r2, #1
 800e46a:	9201      	str	r2, [sp, #4]
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	2300      	movs	r3, #0
 800e470:	2201      	movs	r2, #1
 800e472:	211e      	movs	r1, #30
 800e474:	6838      	ldr	r0, [r7, #0]
 800e476:	f7fe fe0a 	bl	800d08e <SPI_ETH_REG>
 800e47a:	4603      	mov	r3, r0
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e48a:	3318      	adds	r3, #24
 800e48c:	2201      	movs	r2, #1
 800e48e:	9201      	str	r2, [sp, #4]
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	2300      	movs	r3, #0
 800e494:	2201      	movs	r2, #1
 800e496:	211f      	movs	r1, #31
 800e498:	6838      	ldr	r0, [r7, #0]
 800e49a:	f7fe fdf8 	bl	800d08e <SPI_ETH_REG>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4ae:	3318      	adds	r3, #24
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	9201      	str	r2, [sp, #4]
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	2120      	movs	r1, #32
 800e4bc:	6838      	ldr	r0, [r7, #0]
 800e4be:	f7fe fde6 	bl	800d08e <SPI_ETH_REG>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4d2:	3318      	adds	r3, #24
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	9201      	str	r2, [sp, #4]
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	2201      	movs	r2, #1
 800e4de:	2121      	movs	r1, #33	; 0x21
 800e4e0:	6838      	ldr	r0, [r7, #0]
 800e4e2:	f7fe fdd4 	bl	800d08e <SPI_ETH_REG>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4f6:	3318      	adds	r3, #24
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	9201      	str	r2, [sp, #4]
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	2300      	movs	r3, #0
 800e500:	2201      	movs	r2, #1
 800e502:	2122      	movs	r1, #34	; 0x22
 800e504:	6838      	ldr	r0, [r7, #0]
 800e506:	f7fe fdc2 	bl	800d08e <SPI_ETH_REG>
 800e50a:	4603      	mov	r3, r0
 800e50c:	b2da      	uxtb	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e51a:	3318      	adds	r3, #24
 800e51c:	2201      	movs	r2, #1
 800e51e:	9201      	str	r2, [sp, #4]
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	2300      	movs	r3, #0
 800e524:	2201      	movs	r2, #1
 800e526:	2123      	movs	r1, #35	; 0x23
 800e528:	6838      	ldr	r0, [r7, #0]
 800e52a:	f7fe fdb0 	bl	800d08e <SPI_ETH_REG>
 800e52e:	4603      	mov	r3, r0
 800e530:	b2da      	uxtb	r2, r3
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e53e:	3318      	adds	r3, #24
 800e540:	2201      	movs	r2, #1
 800e542:	9201      	str	r2, [sp, #4]
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	2300      	movs	r3, #0
 800e548:	2201      	movs	r2, #1
 800e54a:	2124      	movs	r1, #36	; 0x24
 800e54c:	6838      	ldr	r0, [r7, #0]
 800e54e:	f7fe fd9e 	bl	800d08e <SPI_ETH_REG>
 800e552:	4603      	mov	r3, r0
 800e554:	b2da      	uxtb	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e562:	3318      	adds	r3, #24
 800e564:	2201      	movs	r2, #1
 800e566:	9201      	str	r2, [sp, #4]
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	2300      	movs	r3, #0
 800e56c:	2201      	movs	r2, #1
 800e56e:	2125      	movs	r1, #37	; 0x25
 800e570:	6838      	ldr	r0, [r7, #0]
 800e572:	f7fe fd8c 	bl	800d08e <SPI_ETH_REG>
 800e576:	4603      	mov	r3, r0
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e586:	3318      	adds	r3, #24
 800e588:	2201      	movs	r2, #1
 800e58a:	9201      	str	r2, [sp, #4]
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	2300      	movs	r3, #0
 800e590:	2201      	movs	r2, #1
 800e592:	2126      	movs	r1, #38	; 0x26
 800e594:	6838      	ldr	r0, [r7, #0]
 800e596:	f7fe fd7a 	bl	800d08e <SPI_ETH_REG>
 800e59a:	4603      	mov	r3, r0
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5aa:	3318      	adds	r3, #24
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	9201      	str	r2, [sp, #4]
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	2127      	movs	r1, #39	; 0x27
 800e5b8:	6838      	ldr	r0, [r7, #0]
 800e5ba:	f7fe fd68 	bl	800d08e <SPI_ETH_REG>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5ce:	3318      	adds	r3, #24
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	9201      	str	r2, [sp, #4]
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	2201      	movs	r2, #1
 800e5da:	2128      	movs	r1, #40	; 0x28
 800e5dc:	6838      	ldr	r0, [r7, #0]
 800e5de:	f7fe fd56 	bl	800d08e <SPI_ETH_REG>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5f2:	3318      	adds	r3, #24
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	9201      	str	r2, [sp, #4]
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	2129      	movs	r1, #41	; 0x29
 800e600:	6838      	ldr	r0, [r7, #0]
 800e602:	f7fe fd44 	bl	800d08e <SPI_ETH_REG>
 800e606:	4603      	mov	r3, r0
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e616:	3318      	adds	r3, #24
 800e618:	2201      	movs	r2, #1
 800e61a:	9201      	str	r2, [sp, #4]
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	2300      	movs	r3, #0
 800e620:	2201      	movs	r2, #1
 800e622:	212a      	movs	r1, #42	; 0x2a
 800e624:	6838      	ldr	r0, [r7, #0]
 800e626:	f7fe fd32 	bl	800d08e <SPI_ETH_REG>
 800e62a:	4603      	mov	r3, r0
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e63a:	3318      	adds	r3, #24
 800e63c:	2201      	movs	r2, #1
 800e63e:	9201      	str	r2, [sp, #4]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	2300      	movs	r3, #0
 800e644:	2201      	movs	r2, #1
 800e646:	212b      	movs	r1, #43	; 0x2b
 800e648:	6838      	ldr	r0, [r7, #0]
 800e64a:	f7fe fd20 	bl	800d08e <SPI_ETH_REG>
 800e64e:	4603      	mov	r3, r0
 800e650:	b2da      	uxtb	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e65e:	3318      	adds	r3, #24
 800e660:	2201      	movs	r2, #1
 800e662:	9201      	str	r2, [sp, #4]
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	2300      	movs	r3, #0
 800e668:	2201      	movs	r2, #1
 800e66a:	212c      	movs	r1, #44	; 0x2c
 800e66c:	6838      	ldr	r0, [r7, #0]
 800e66e:	f7fe fd0e 	bl	800d08e <SPI_ETH_REG>
 800e672:	4603      	mov	r3, r0
 800e674:	b2da      	uxtb	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e682:	3318      	adds	r3, #24
 800e684:	2201      	movs	r2, #1
 800e686:	9201      	str	r2, [sp, #4]
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	2300      	movs	r3, #0
 800e68c:	2201      	movs	r2, #1
 800e68e:	212d      	movs	r1, #45	; 0x2d
 800e690:	6838      	ldr	r0, [r7, #0]
 800e692:	f7fe fcfc 	bl	800d08e <SPI_ETH_REG>
 800e696:	4603      	mov	r3, r0
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6a6:	3318      	adds	r3, #24
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	9201      	str	r2, [sp, #4]
 800e6ac:	9300      	str	r3, [sp, #0]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	212e      	movs	r1, #46	; 0x2e
 800e6b4:	6838      	ldr	r0, [r7, #0]
 800e6b6:	f7fe fcea 	bl	800d08e <SPI_ETH_REG>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6ca:	3318      	adds	r3, #24
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	9201      	str	r2, [sp, #4]
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	212f      	movs	r1, #47	; 0x2f
 800e6d8:	6838      	ldr	r0, [r7, #0]
 800e6da:	f7fe fcd8 	bl	800d08e <SPI_ETH_REG>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e6e8:	bf00      	nop
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
	...

0800e6f4 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b090      	sub	sp, #64	; 0x40
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e702:	2300      	movs	r3, #0
 800e704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e706:	2300      	movs	r3, #0
 800e708:	63bb      	str	r3, [r7, #56]	; 0x38
 800e70a:	2300      	movs	r3, #0
 800e70c:	637b      	str	r3, [r7, #52]	; 0x34
 800e70e:	2300      	movs	r3, #0
 800e710:	633b      	str	r3, [r7, #48]	; 0x30
 800e712:	2300      	movs	r3, #0
 800e714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e716:	2300      	movs	r3, #0
 800e718:	623b      	str	r3, [r7, #32]
 800e71a:	2300      	movs	r3, #0
 800e71c:	61fb      	str	r3, [r7, #28]
 800e71e:	2300      	movs	r3, #0
 800e720:	61bb      	str	r3, [r7, #24]
 800e722:	2300      	movs	r3, #0
 800e724:	62bb      	str	r3, [r7, #40]	; 0x28
 800e726:	2300      	movs	r3, #0
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	2300      	movs	r3, #0
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e73e:	6a3a      	ldr	r2, [r7, #32]
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	429a      	cmp	r2, r3
 800e744:	f2c0 82fe 	blt.w	800ed44 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e748:	2300      	movs	r3, #0
 800e74a:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e74c:	e00c      	b.n	800e768 <FT_String_ND+0x74>
							{
								n++;
 800e74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e750:	3301      	adds	r3, #1
 800e752:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	441a      	add	r2, r3
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	3301      	adds	r3, #1
 800e75e:	429a      	cmp	r2, r3
 800e760:	dd02      	ble.n	800e768 <FT_String_ND+0x74>
								{
									estado=0;
 800e762:	2300      	movs	r3, #0
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e766:	e009      	b.n	800e77c <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4413      	add	r3, r2
 800e76e:	781a      	ldrb	r2, [r3, #0]
 800e770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	440b      	add	r3, r1
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d1e8      	bne.n	800e74e <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e77e:	3301      	adds	r3, #1
 800e780:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	3301      	adds	r3, #1
 800e786:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d108      	bne.n	800e7a2 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e79a:	601a      	str	r2, [r3, #0]
									estado=1;
 800e79c:	2301      	movs	r3, #1
 800e79e:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e7a0:	e010      	b.n	800e7c4 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e7a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	dd02      	ble.n	800e7b0 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e7ae:	e009      	b.n	800e7c4 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	781a      	ldrb	r2, [r3, #0]
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	440b      	add	r3, r1
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d0db      	beq.n	800e77c <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ca:	4413      	add	r3, r2
 800e7cc:	6a3a      	ldr	r2, [r7, #32]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	dd02      	ble.n	800e7d8 <FT_String_ND+0xe4>
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d1b7      	bne.n	800e748 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e7d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	e2b1      	b.n	800ed46 <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e7e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d12c      	bne.n	800e842 <FT_String_ND+0x14e>
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d129      	bne.n	800e842 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e7ee:	e014      	b.n	800e81a <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	441a      	add	r2, r3
 800e7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fa:	4413      	add	r3, r2
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	441a      	add	r2, r3
 800e802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e804:	6819      	ldr	r1, [r3, #0]
 800e806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e808:	440b      	add	r3, r1
 800e80a:	3b01      	subs	r3, #1
 800e80c:	68f9      	ldr	r1, [r7, #12]
 800e80e:	440b      	add	r3, r1
 800e810:	7812      	ldrb	r2, [r2, #0]
 800e812:	701a      	strb	r2, [r3, #0]
										n3++;
 800e814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e816:	3301      	adds	r3, #1
 800e818:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	441a      	add	r2, r3
 800e822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e824:	4413      	add	r3, r2
 800e826:	6a3a      	ldr	r2, [r7, #32]
 800e828:	429a      	cmp	r2, r3
 800e82a:	dae1      	bge.n	800e7f0 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e82c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e832:	4413      	add	r3, r2
 800e834:	1e5a      	subs	r2, r3, #1
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	601a      	str	r2, [r3, #0]
							estado=3;
 800e83a:	2303      	movs	r3, #3
 800e83c:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	e281      	b.n	800ed46 <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e844:	2b02      	cmp	r3, #2
 800e846:	f040 80b6 	bne.w	800e9b6 <FT_String_ND+0x2c2>
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	f040 80b2 	bne.w	800e9b6 <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e852:	e012      	b.n	800e87a <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	1ad2      	subs	r2, r2, r3
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	4413      	add	r3, r2
 800e85e:	461a      	mov	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	441a      	add	r2, r3
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e868:	440b      	add	r3, r1
 800e86a:	7812      	ldrb	r2, [r2, #0]
 800e86c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	3301      	adds	r3, #1
 800e872:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e878:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e87a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	1ad2      	subs	r2, r2, r3
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	4413      	add	r3, r2
 800e884:	6a3a      	ldr	r2, [r7, #32]
 800e886:	429a      	cmp	r2, r3
 800e888:	dae4      	bge.n	800e854 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e88a:	499e      	ldr	r1, [pc, #632]	; (800eb04 <FT_String_ND+0x410>)
 800e88c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e88e:	f000 fca1 	bl	800f1d4 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e892:	499d      	ldr	r1, [pc, #628]	; (800eb08 <FT_String_ND+0x414>)
 800e894:	2000      	movs	r0, #0
 800e896:	f000 fc9d 	bl	800f1d4 <strtok>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f000 fada 	bl	800ee56 <atoi>
 800e8a2:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8a6:	3306      	adds	r3, #6
 800e8a8:	222c      	movs	r2, #44	; 0x2c
 800e8aa:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	2b09      	cmp	r3, #9
 800e8b0:	dc0d      	bgt.n	800e8ce <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	223a      	movs	r2, #58	; 0x3a
 800e8b8:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	3309      	adds	r3, #9
 800e8be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8c0:	4413      	add	r3, r2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	3309      	adds	r3, #9
 800e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8cc:	e021      	b.n	800e912 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	2b63      	cmp	r3, #99	; 0x63
 800e8d2:	dc0d      	bgt.n	800e8f0 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8d6:	3309      	adds	r3, #9
 800e8d8:	223a      	movs	r2, #58	; 0x3a
 800e8da:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	330a      	adds	r3, #10
 800e8e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8e2:	4413      	add	r3, r2
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	330a      	adds	r3, #10
 800e8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8ee:	e010      	b.n	800e912 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8f6:	da0c      	bge.n	800e912 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e8f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8fa:	330a      	adds	r3, #10
 800e8fc:	223a      	movs	r2, #58	; 0x3a
 800e8fe:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	330b      	adds	r3, #11
 800e904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e906:	4413      	add	r3, r2
 800e908:	2200      	movs	r2, #0
 800e90a:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	330b      	adds	r3, #11
 800e910:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e916:	601a      	str	r2, [r3, #0]
							n4=0;
 800e918:	2300      	movs	r3, #0
 800e91a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e91c:	e016      	b.n	800e94c <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e91e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	1ad2      	subs	r2, r2, r3
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	441a      	add	r2, r3
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	4413      	add	r3, r2
 800e92c:	461a      	mov	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	441a      	add	r2, r3
 800e932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	1ac9      	subs	r1, r1, r3
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	440b      	add	r3, r1
 800e93c:	4619      	mov	r1, r3
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	440b      	add	r3, r1
 800e942:	7812      	ldrb	r2, [r2, #0]
 800e944:	701a      	strb	r2, [r3, #0]
								n4++;
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	3301      	adds	r3, #1
 800e94a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e94c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	1ad2      	subs	r2, r2, r3
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	441a      	add	r2, r3
 800e956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e958:	4413      	add	r3, r2
 800e95a:	6a3a      	ldr	r2, [r7, #32]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	dade      	bge.n	800e91e <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e964:	441a      	add	r2, r3
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	1e5a      	subs	r2, r3, #1
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	1ad2      	subs	r2, r2, r3
 800e976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e978:	441a      	add	r2, r3
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	4413      	add	r3, r2
 800e97e:	461a      	mov	r2, r3
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	4413      	add	r3, r2
 800e984:	2200      	movs	r2, #0
 800e986:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	1ad2      	subs	r2, r2, r3
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	4413      	add	r3, r2
 800e992:	461a      	mov	r2, r3
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4413      	add	r3, r2
 800e998:	2200      	movs	r2, #0
 800e99a:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e99c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	1ad2      	subs	r2, r2, r3
 800e9a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a6:	440b      	add	r3, r1
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d102      	bne.n	800e9b2 <FT_String_ND+0x2be>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d146      	bne.n	800ea4a <FT_String_ND+0x356>
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d143      	bne.n	800ea4a <FT_String_ND+0x356>
						{
						n3=0;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e9c6:	e00e      	b.n	800e9e6 <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ce:	4413      	add	r3, r2
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	441a      	add	r2, r3
 800e9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9da:	440b      	add	r3, r1
 800e9dc:	7812      	ldrb	r2, [r2, #0]
 800e9de:	701a      	strb	r2, [r3, #0]
										n3++;
 800e9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	dbec      	blt.n	800e9c8 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e9f2:	e014      	b.n	800ea1e <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	441a      	add	r2, r3
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	4413      	add	r3, r2
 800ea00:	3b01      	subs	r3, #1
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	441a      	add	r2, r3
 800ea06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea08:	6819      	ldr	r1, [r3, #0]
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	440b      	add	r3, r1
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	68f9      	ldr	r1, [r7, #12]
 800ea12:	440b      	add	r3, r1
 800ea14:	7812      	ldrb	r2, [r2, #0]
 800ea16:	701a      	strb	r2, [r3, #0]
										n5++;
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ea1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	441a      	add	r2, r3
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	441a      	add	r2, r3
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	dde0      	ble.n	800e9f4 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ea32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	4413      	add	r3, r2
 800ea3a:	1e5a      	subs	r2, r3, #1
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ea40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea44:	601a      	str	r2, [r3, #0]
							estado=3;
 800ea46:	2303      	movs	r3, #3
 800ea48:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ea4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea4c:	2b04      	cmp	r3, #4
 800ea4e:	f040 80b6 	bne.w	800ebbe <FT_String_ND+0x4ca>
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	f040 80b2 	bne.w	800ebbe <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea5a:	e012      	b.n	800ea82 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ea5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	1ad2      	subs	r2, r2, r3
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	4413      	add	r3, r2
 800ea66:	461a      	mov	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	441a      	add	r2, r3
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea70:	440b      	add	r3, r1
 800ea72:	7812      	ldrb	r2, [r2, #0]
 800ea74:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea78:	3301      	adds	r3, #1
 800ea7a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ea7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea80:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	1ad2      	subs	r2, r2, r3
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	4413      	add	r3, r2
 800ea8c:	6a3a      	ldr	r2, [r7, #32]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	dae4      	bge.n	800ea5c <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ea92:	491c      	ldr	r1, [pc, #112]	; (800eb04 <FT_String_ND+0x410>)
 800ea94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ea96:	f000 fb9d 	bl	800f1d4 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ea9a:	491b      	ldr	r1, [pc, #108]	; (800eb08 <FT_String_ND+0x414>)
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f000 fb99 	bl	800f1d4 <strtok>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 f9d6 	bl	800ee56 <atoi>
 800eaaa:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800eaac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaae:	3306      	adds	r3, #6
 800eab0:	222c      	movs	r2, #44	; 0x2c
 800eab2:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	dc07      	bgt.n	800eaca <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800eaba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eabc:	3308      	adds	r3, #8
 800eabe:	223a      	movs	r2, #58	; 0x3a
 800eac0:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	3309      	adds	r3, #9
 800eac6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eac8:	e015      	b.n	800eaf6 <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	2b63      	cmp	r3, #99	; 0x63
 800eace:	dc07      	bgt.n	800eae0 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800ead0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead2:	3309      	adds	r3, #9
 800ead4:	223a      	movs	r2, #58	; 0x3a
 800ead6:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	330a      	adds	r3, #10
 800eadc:	62bb      	str	r3, [r7, #40]	; 0x28
 800eade:	e00a      	b.n	800eaf6 <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eae6:	da06      	bge.n	800eaf6 <FT_String_ND+0x402>
														{
															c[10]=':';
 800eae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaea:	330a      	adds	r3, #10
 800eaec:	223a      	movs	r2, #58	; 0x3a
 800eaee:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	330b      	adds	r3, #11
 800eaf4:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eafa:	601a      	str	r2, [r3, #0]
							n4=0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb00:	e01b      	b.n	800eb3a <FT_String_ND+0x446>
 800eb02:	bf00      	nop
 800eb04:	08010ab4 	.word	0x08010ab4
 800eb08:	08010ab8 	.word	0x08010ab8
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eb0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	1ad2      	subs	r2, r2, r3
 800eb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb14:	441a      	add	r2, r3
 800eb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb18:	4413      	add	r3, r2
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	441a      	add	r2, r3
 800eb20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	1ac9      	subs	r1, r1, r3
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	440b      	add	r3, r1
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	440b      	add	r3, r1
 800eb30:	7812      	ldrb	r2, [r2, #0]
 800eb32:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb36:	3301      	adds	r3, #1
 800eb38:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	441a      	add	r2, r3
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	4413      	add	r3, r2
 800eb48:	6a3a      	ldr	r2, [r7, #32]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	dade      	bge.n	800eb0c <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eb4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	441a      	add	r2, r3
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	1e5a      	subs	r2, r3, #1
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	601a      	str	r2, [r3, #0]
							n5=0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eb62:	e00f      	b.n	800eb84 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	1ad2      	subs	r2, r2, r3
 800eb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6c:	4413      	add	r3, r2
 800eb6e:	461a      	mov	r2, r3
 800eb70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb72:	441a      	add	r2, r3
 800eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb78:	440b      	add	r3, r1
 800eb7a:	7812      	ldrb	r2, [r2, #0]
 800eb7c:	701a      	strb	r2, [r3, #0]
								n5++;
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	3301      	adds	r3, #1
 800eb82:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	1ad2      	subs	r2, r2, r3
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	441a      	add	r2, r3
 800eb8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	dbe6      	blt.n	800eb64 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eb96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba2:	441a      	add	r2, r3
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	1ad2      	subs	r2, r2, r3
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4413      	add	r3, r2
 800ebae:	6a3a      	ldr	r2, [r7, #32]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d102      	bne.n	800ebba <FT_String_ND+0x4c6>
							{
								estado=4;
 800ebb4:	2304      	movs	r3, #4
 800ebb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebb8:	e001      	b.n	800ebbe <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800ebba:	2305      	movs	r3, #5
 800ebbc:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ebbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebc0:	2b05      	cmp	r3, #5
 800ebc2:	f040 80bd 	bne.w	800ed40 <FT_String_ND+0x64c>
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	f040 80b9 	bne.w	800ed40 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ebce:	e012      	b.n	800ebf6 <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ebd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	1ad2      	subs	r2, r2, r3
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	4413      	add	r3, r2
 800ebda:	461a      	mov	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	441a      	add	r2, r3
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebe4:	440b      	add	r3, r1
 800ebe6:	7812      	ldrb	r2, [r2, #0]
 800ebe8:	701a      	strb	r2, [r3, #0]
								n4++;
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	3301      	adds	r3, #1
 800ebee:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ebf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebf4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ebf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	1ad2      	subs	r2, r2, r3
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	4413      	add	r3, r2
 800ec00:	6a3a      	ldr	r2, [r7, #32]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	dae4      	bge.n	800ebd0 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ec06:	4952      	ldr	r1, [pc, #328]	; (800ed50 <FT_String_ND+0x65c>)
 800ec08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ec0a:	f000 fae3 	bl	800f1d4 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ec0e:	4951      	ldr	r1, [pc, #324]	; (800ed54 <FT_String_ND+0x660>)
 800ec10:	2000      	movs	r0, #0
 800ec12:	f000 fadf 	bl	800f1d4 <strtok>
 800ec16:	4603      	mov	r3, r0
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f91c 	bl	800ee56 <atoi>
 800ec1e:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ec20:	494c      	ldr	r1, [pc, #304]	; (800ed54 <FT_String_ND+0x660>)
 800ec22:	2000      	movs	r0, #0
 800ec24:	f000 fad6 	bl	800f1d4 <strtok>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f000 f913 	bl	800ee56 <atoi>
 800ec30:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800ec32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec34:	3306      	adds	r3, #6
 800ec36:	222c      	movs	r2, #44	; 0x2c
 800ec38:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	2b09      	cmp	r3, #9
 800ec3e:	dc07      	bgt.n	800ec50 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800ec40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec42:	330a      	adds	r3, #10
 800ec44:	223a      	movs	r2, #58	; 0x3a
 800ec46:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	330b      	adds	r3, #11
 800ec4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec4e:	e015      	b.n	800ec7c <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	2b63      	cmp	r3, #99	; 0x63
 800ec54:	dc07      	bgt.n	800ec66 <FT_String_ND+0x572>
														{
															c[11]=':';
 800ec56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec58:	330b      	adds	r3, #11
 800ec5a:	223a      	movs	r2, #58	; 0x3a
 800ec5c:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	330c      	adds	r3, #12
 800ec62:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec64:	e00a      	b.n	800ec7c <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec6c:	da06      	bge.n	800ec7c <FT_String_ND+0x588>
														{
															c[12]=':';
 800ec6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec70:	330c      	adds	r3, #12
 800ec72:	223a      	movs	r2, #58	; 0x3a
 800ec74:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	330d      	adds	r3, #13
 800ec7a:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ec7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec80:	601a      	str	r2, [r3, #0]
							n4=0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec86:	e016      	b.n	800ecb6 <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ec88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	1ad2      	subs	r2, r2, r3
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	441a      	add	r2, r3
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	4413      	add	r3, r2
 800ec96:	461a      	mov	r2, r3
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	441a      	add	r2, r3
 800ec9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	1ac9      	subs	r1, r1, r3
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	440b      	add	r3, r1
 800eca6:	4619      	mov	r1, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	440b      	add	r3, r1
 800ecac:	7812      	ldrb	r2, [r2, #0]
 800ecae:	701a      	strb	r2, [r3, #0]
								n4++;
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ecb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	1ad2      	subs	r2, r2, r3
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	441a      	add	r2, r3
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc2:	4413      	add	r3, r2
 800ecc4:	6a3a      	ldr	r2, [r7, #32]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	dade      	bge.n	800ec88 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ecca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecce:	441a      	add	r2, r3
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	1ad3      	subs	r3, r2, r3
 800ecd4:	1e5a      	subs	r2, r3, #1
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	601a      	str	r2, [r3, #0]
							n5=0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ecde:	e00f      	b.n	800ed00 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ece0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	1ad2      	subs	r2, r2, r3
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	4413      	add	r3, r2
 800ecea:	461a      	mov	r2, r3
 800ecec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecee:	441a      	add	r2, r3
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecf4:	440b      	add	r3, r1
 800ecf6:	7812      	ldrb	r2, [r2, #0]
 800ecf8:	701a      	strb	r2, [r3, #0]
								n5++;
 800ecfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	1ad2      	subs	r2, r2, r3
 800ed06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed08:	441a      	add	r2, r3
 800ed0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	dbe6      	blt.n	800ece0 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ed12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed16:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ed18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	441a      	add	r2, r3
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	1ad2      	subs	r2, r2, r3
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4413      	add	r3, r2
 800ed2a:	6a3a      	ldr	r2, [r7, #32]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d105      	bne.n	800ed3c <FT_String_ND+0x648>
							{
								estado=4;
 800ed30:	2304      	movs	r3, #4
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ed34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	e001      	b.n	800ed40 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800ed3c:	2305      	movs	r3, #5
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	e000      	b.n	800ed46 <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ed44:	2302      	movs	r3, #2
			}
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3740      	adds	r7, #64	; 0x40
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	08010ab4 	.word	0x08010ab4
 800ed54:	08010ab8 	.word	0x08010ab8

0800ed58 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b088      	sub	sp, #32
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ed62:	2330      	movs	r3, #48	; 0x30
 800ed64:	60bb      	str	r3, [r7, #8]
 800ed66:	f107 030c 	add.w	r3, r7, #12
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	601a      	str	r2, [r3, #0]
 800ed6e:	605a      	str	r2, [r3, #4]
 800ed70:	609a      	str	r2, [r3, #8]
 800ed72:	60da      	str	r2, [r3, #12]
int i=0;	
 800ed74:	2300      	movs	r3, #0
 800ed76:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ed78:	f107 0308 	add.w	r3, r7, #8
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	490f      	ldr	r1, [pc, #60]	; (800edbc <INTOA+0x64>)
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 f9a9 	bl	800f0d8 <siprintf>
		while(i<=strlen(origbuff))
 800ed86:	e00b      	b.n	800eda0 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	1c5a      	adds	r2, r3, #1
 800ed8c:	603a      	str	r2, [r7, #0]
 800ed8e:	f107 0108 	add.w	r1, r7, #8
 800ed92:	69fa      	ldr	r2, [r7, #28]
 800ed94:	440a      	add	r2, r1
 800ed96:	7812      	ldrb	r2, [r2, #0]
 800ed98:	701a      	strb	r2, [r3, #0]
		i++;
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800eda0:	f107 0308 	add.w	r3, r7, #8
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7f1 fa25 	bl	80001f4 <strlen>
 800edaa:	4602      	mov	r2, r0
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d2ea      	bcs.n	800ed88 <INTOA+0x30>
		}
		return(i);
 800edb2:	69fb      	ldr	r3, [r7, #28]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3720      	adds	r7, #32
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	08010abc 	.word	0x08010abc

0800edc0 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b088      	sub	sp, #32
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	603b      	str	r3, [r7, #0]
int x =0;
 800edce:	2300      	movs	r3, #0
 800edd0:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800edd2:	2300      	movs	r3, #0
 800edd4:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800edd6:	f107 0310 	add.w	r3, r7, #16
 800edda:	617b      	str	r3, [r7, #20]
if (c==0)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <CopiaVector+0x2e>
{
	x=strlen(b);
 800ede2:	68b8      	ldr	r0, [r7, #8]
 800ede4:	f7f1 fa06 	bl	80001f4 <strlen>
 800ede8:	4603      	mov	r3, r0
 800edea:	61bb      	str	r3, [r7, #24]
 800edec:	e02e      	b.n	800ee4c <CopiaVector+0x8c>
}
else
	{
		x=c;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edf8:	dd01      	ble.n	800edfe <CopiaVector+0x3e>
			{
				return(1);
 800edfa:	2301      	movs	r3, #1
 800edfc:	e027      	b.n	800ee4e <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ee02:	e00a      	b.n	800ee1a <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	1c53      	adds	r3, r2, #1
 800ee08:	60bb      	str	r3, [r7, #8]
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	1c59      	adds	r1, r3, #1
 800ee0e:	60f9      	str	r1, [r7, #12]
 800ee10:	7812      	ldrb	r2, [r2, #0]
 800ee12:	701a      	strb	r2, [r3, #0]
					p++;
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	3301      	adds	r3, #1
 800ee18:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	dbf0      	blt.n	800ee04 <CopiaVector+0x44>
				}


			if (d==1)
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d111      	bne.n	800ee4c <CopiaVector+0x8c>
			{
			  p=c;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ee2c:	e008      	b.n	800ee40 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	60fa      	str	r2, [r7, #12]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	7812      	ldrb	r2, [r2, #0]
 800ee38:	701a      	strb	r2, [r3, #0]
				  p++;
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee46:	dbf2      	blt.n	800ee2e <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e000      	b.n	800ee4e <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ee4c:	2301      	movs	r3, #1
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3720      	adds	r7, #32
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <atoi>:
 800ee56:	220a      	movs	r2, #10
 800ee58:	2100      	movs	r1, #0
 800ee5a:	f000 b883 	b.w	800ef64 <strtol>
	...

0800ee60 <_strtol_l.constprop.0>:
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee66:	d001      	beq.n	800ee6c <_strtol_l.constprop.0+0xc>
 800ee68:	2b24      	cmp	r3, #36	; 0x24
 800ee6a:	d906      	bls.n	800ee7a <_strtol_l.constprop.0+0x1a>
 800ee6c:	f000 fa54 	bl	800f318 <__errno>
 800ee70:	2316      	movs	r3, #22
 800ee72:	6003      	str	r3, [r0, #0]
 800ee74:	2000      	movs	r0, #0
 800ee76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ef60 <_strtol_l.constprop.0+0x100>
 800ee7e:	460d      	mov	r5, r1
 800ee80:	462e      	mov	r6, r5
 800ee82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ee8a:	f017 0708 	ands.w	r7, r7, #8
 800ee8e:	d1f7      	bne.n	800ee80 <_strtol_l.constprop.0+0x20>
 800ee90:	2c2d      	cmp	r4, #45	; 0x2d
 800ee92:	d132      	bne.n	800eefa <_strtol_l.constprop.0+0x9a>
 800ee94:	782c      	ldrb	r4, [r5, #0]
 800ee96:	2701      	movs	r7, #1
 800ee98:	1cb5      	adds	r5, r6, #2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d05b      	beq.n	800ef56 <_strtol_l.constprop.0+0xf6>
 800ee9e:	2b10      	cmp	r3, #16
 800eea0:	d109      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800eea2:	2c30      	cmp	r4, #48	; 0x30
 800eea4:	d107      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800eea6:	782c      	ldrb	r4, [r5, #0]
 800eea8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eeac:	2c58      	cmp	r4, #88	; 0x58
 800eeae:	d14d      	bne.n	800ef4c <_strtol_l.constprop.0+0xec>
 800eeb0:	786c      	ldrb	r4, [r5, #1]
 800eeb2:	2310      	movs	r3, #16
 800eeb4:	3502      	adds	r5, #2
 800eeb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eeba:	f108 38ff 	add.w	r8, r8, #4294967295
 800eebe:	f04f 0e00 	mov.w	lr, #0
 800eec2:	fbb8 f9f3 	udiv	r9, r8, r3
 800eec6:	4676      	mov	r6, lr
 800eec8:	fb03 8a19 	mls	sl, r3, r9, r8
 800eecc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eed0:	f1bc 0f09 	cmp.w	ip, #9
 800eed4:	d816      	bhi.n	800ef04 <_strtol_l.constprop.0+0xa4>
 800eed6:	4664      	mov	r4, ip
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	dd24      	ble.n	800ef26 <_strtol_l.constprop.0+0xc6>
 800eedc:	f1be 3fff 	cmp.w	lr, #4294967295
 800eee0:	d008      	beq.n	800eef4 <_strtol_l.constprop.0+0x94>
 800eee2:	45b1      	cmp	r9, r6
 800eee4:	d31c      	bcc.n	800ef20 <_strtol_l.constprop.0+0xc0>
 800eee6:	d101      	bne.n	800eeec <_strtol_l.constprop.0+0x8c>
 800eee8:	45a2      	cmp	sl, r4
 800eeea:	db19      	blt.n	800ef20 <_strtol_l.constprop.0+0xc0>
 800eeec:	fb06 4603 	mla	r6, r6, r3, r4
 800eef0:	f04f 0e01 	mov.w	lr, #1
 800eef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef8:	e7e8      	b.n	800eecc <_strtol_l.constprop.0+0x6c>
 800eefa:	2c2b      	cmp	r4, #43	; 0x2b
 800eefc:	bf04      	itt	eq
 800eefe:	782c      	ldrbeq	r4, [r5, #0]
 800ef00:	1cb5      	addeq	r5, r6, #2
 800ef02:	e7ca      	b.n	800ee9a <_strtol_l.constprop.0+0x3a>
 800ef04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ef08:	f1bc 0f19 	cmp.w	ip, #25
 800ef0c:	d801      	bhi.n	800ef12 <_strtol_l.constprop.0+0xb2>
 800ef0e:	3c37      	subs	r4, #55	; 0x37
 800ef10:	e7e2      	b.n	800eed8 <_strtol_l.constprop.0+0x78>
 800ef12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ef16:	f1bc 0f19 	cmp.w	ip, #25
 800ef1a:	d804      	bhi.n	800ef26 <_strtol_l.constprop.0+0xc6>
 800ef1c:	3c57      	subs	r4, #87	; 0x57
 800ef1e:	e7db      	b.n	800eed8 <_strtol_l.constprop.0+0x78>
 800ef20:	f04f 3eff 	mov.w	lr, #4294967295
 800ef24:	e7e6      	b.n	800eef4 <_strtol_l.constprop.0+0x94>
 800ef26:	f1be 3fff 	cmp.w	lr, #4294967295
 800ef2a:	d105      	bne.n	800ef38 <_strtol_l.constprop.0+0xd8>
 800ef2c:	2322      	movs	r3, #34	; 0x22
 800ef2e:	6003      	str	r3, [r0, #0]
 800ef30:	4646      	mov	r6, r8
 800ef32:	b942      	cbnz	r2, 800ef46 <_strtol_l.constprop.0+0xe6>
 800ef34:	4630      	mov	r0, r6
 800ef36:	e79e      	b.n	800ee76 <_strtol_l.constprop.0+0x16>
 800ef38:	b107      	cbz	r7, 800ef3c <_strtol_l.constprop.0+0xdc>
 800ef3a:	4276      	negs	r6, r6
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	d0f9      	beq.n	800ef34 <_strtol_l.constprop.0+0xd4>
 800ef40:	f1be 0f00 	cmp.w	lr, #0
 800ef44:	d000      	beq.n	800ef48 <_strtol_l.constprop.0+0xe8>
 800ef46:	1e69      	subs	r1, r5, #1
 800ef48:	6011      	str	r1, [r2, #0]
 800ef4a:	e7f3      	b.n	800ef34 <_strtol_l.constprop.0+0xd4>
 800ef4c:	2430      	movs	r4, #48	; 0x30
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1b1      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef52:	2308      	movs	r3, #8
 800ef54:	e7af      	b.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef56:	2c30      	cmp	r4, #48	; 0x30
 800ef58:	d0a5      	beq.n	800eea6 <_strtol_l.constprop.0+0x46>
 800ef5a:	230a      	movs	r3, #10
 800ef5c:	e7ab      	b.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef5e:	bf00      	nop
 800ef60:	08010ad9 	.word	0x08010ad9

0800ef64 <strtol>:
 800ef64:	4613      	mov	r3, r2
 800ef66:	460a      	mov	r2, r1
 800ef68:	4601      	mov	r1, r0
 800ef6a:	4802      	ldr	r0, [pc, #8]	; (800ef74 <strtol+0x10>)
 800ef6c:	6800      	ldr	r0, [r0, #0]
 800ef6e:	f7ff bf77 	b.w	800ee60 <_strtol_l.constprop.0>
 800ef72:	bf00      	nop
 800ef74:	20000194 	.word	0x20000194

0800ef78 <std>:
 800ef78:	2300      	movs	r3, #0
 800ef7a:	b510      	push	{r4, lr}
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ef82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef86:	6083      	str	r3, [r0, #8]
 800ef88:	8181      	strh	r1, [r0, #12]
 800ef8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ef8c:	81c2      	strh	r2, [r0, #14]
 800ef8e:	6183      	str	r3, [r0, #24]
 800ef90:	4619      	mov	r1, r3
 800ef92:	2208      	movs	r2, #8
 800ef94:	305c      	adds	r0, #92	; 0x5c
 800ef96:	f000 f902 	bl	800f19e <memset>
 800ef9a:	4b05      	ldr	r3, [pc, #20]	; (800efb0 <std+0x38>)
 800ef9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ef9e:	4b05      	ldr	r3, [pc, #20]	; (800efb4 <std+0x3c>)
 800efa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800efa2:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <std+0x40>)
 800efa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efa6:	4b05      	ldr	r3, [pc, #20]	; (800efbc <std+0x44>)
 800efa8:	6224      	str	r4, [r4, #32]
 800efaa:	6323      	str	r3, [r4, #48]	; 0x30
 800efac:	bd10      	pop	{r4, pc}
 800efae:	bf00      	nop
 800efb0:	0800f119 	.word	0x0800f119
 800efb4:	0800f13b 	.word	0x0800f13b
 800efb8:	0800f173 	.word	0x0800f173
 800efbc:	0800f197 	.word	0x0800f197

0800efc0 <stdio_exit_handler>:
 800efc0:	4a02      	ldr	r2, [pc, #8]	; (800efcc <stdio_exit_handler+0xc>)
 800efc2:	4903      	ldr	r1, [pc, #12]	; (800efd0 <stdio_exit_handler+0x10>)
 800efc4:	4803      	ldr	r0, [pc, #12]	; (800efd4 <stdio_exit_handler+0x14>)
 800efc6:	f000 b869 	b.w	800f09c <_fwalk_sglue>
 800efca:	bf00      	nop
 800efcc:	2000013c 	.word	0x2000013c
 800efd0:	0800fc99 	.word	0x0800fc99
 800efd4:	20000148 	.word	0x20000148

0800efd8 <cleanup_stdio>:
 800efd8:	6841      	ldr	r1, [r0, #4]
 800efda:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <cleanup_stdio+0x34>)
 800efdc:	4299      	cmp	r1, r3
 800efde:	b510      	push	{r4, lr}
 800efe0:	4604      	mov	r4, r0
 800efe2:	d001      	beq.n	800efe8 <cleanup_stdio+0x10>
 800efe4:	f000 fe58 	bl	800fc98 <_fflush_r>
 800efe8:	68a1      	ldr	r1, [r4, #8]
 800efea:	4b09      	ldr	r3, [pc, #36]	; (800f010 <cleanup_stdio+0x38>)
 800efec:	4299      	cmp	r1, r3
 800efee:	d002      	beq.n	800eff6 <cleanup_stdio+0x1e>
 800eff0:	4620      	mov	r0, r4
 800eff2:	f000 fe51 	bl	800fc98 <_fflush_r>
 800eff6:	68e1      	ldr	r1, [r4, #12]
 800eff8:	4b06      	ldr	r3, [pc, #24]	; (800f014 <cleanup_stdio+0x3c>)
 800effa:	4299      	cmp	r1, r3
 800effc:	d004      	beq.n	800f008 <cleanup_stdio+0x30>
 800effe:	4620      	mov	r0, r4
 800f000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f004:	f000 be48 	b.w	800fc98 <_fflush_r>
 800f008:	bd10      	pop	{r4, pc}
 800f00a:	bf00      	nop
 800f00c:	20004440 	.word	0x20004440
 800f010:	200044a8 	.word	0x200044a8
 800f014:	20004510 	.word	0x20004510

0800f018 <global_stdio_init.part.0>:
 800f018:	b510      	push	{r4, lr}
 800f01a:	4b0b      	ldr	r3, [pc, #44]	; (800f048 <global_stdio_init.part.0+0x30>)
 800f01c:	4c0b      	ldr	r4, [pc, #44]	; (800f04c <global_stdio_init.part.0+0x34>)
 800f01e:	4a0c      	ldr	r2, [pc, #48]	; (800f050 <global_stdio_init.part.0+0x38>)
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	4620      	mov	r0, r4
 800f024:	2200      	movs	r2, #0
 800f026:	2104      	movs	r1, #4
 800f028:	f7ff ffa6 	bl	800ef78 <std>
 800f02c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f030:	2201      	movs	r2, #1
 800f032:	2109      	movs	r1, #9
 800f034:	f7ff ffa0 	bl	800ef78 <std>
 800f038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f03c:	2202      	movs	r2, #2
 800f03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f042:	2112      	movs	r1, #18
 800f044:	f7ff bf98 	b.w	800ef78 <std>
 800f048:	20004578 	.word	0x20004578
 800f04c:	20004440 	.word	0x20004440
 800f050:	0800efc1 	.word	0x0800efc1

0800f054 <__sfp_lock_acquire>:
 800f054:	4801      	ldr	r0, [pc, #4]	; (800f05c <__sfp_lock_acquire+0x8>)
 800f056:	f000 b989 	b.w	800f36c <__retarget_lock_acquire_recursive>
 800f05a:	bf00      	nop
 800f05c:	20004581 	.word	0x20004581

0800f060 <__sfp_lock_release>:
 800f060:	4801      	ldr	r0, [pc, #4]	; (800f068 <__sfp_lock_release+0x8>)
 800f062:	f000 b984 	b.w	800f36e <__retarget_lock_release_recursive>
 800f066:	bf00      	nop
 800f068:	20004581 	.word	0x20004581

0800f06c <__sinit>:
 800f06c:	b510      	push	{r4, lr}
 800f06e:	4604      	mov	r4, r0
 800f070:	f7ff fff0 	bl	800f054 <__sfp_lock_acquire>
 800f074:	6a23      	ldr	r3, [r4, #32]
 800f076:	b11b      	cbz	r3, 800f080 <__sinit+0x14>
 800f078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f07c:	f7ff bff0 	b.w	800f060 <__sfp_lock_release>
 800f080:	4b04      	ldr	r3, [pc, #16]	; (800f094 <__sinit+0x28>)
 800f082:	6223      	str	r3, [r4, #32]
 800f084:	4b04      	ldr	r3, [pc, #16]	; (800f098 <__sinit+0x2c>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1f5      	bne.n	800f078 <__sinit+0xc>
 800f08c:	f7ff ffc4 	bl	800f018 <global_stdio_init.part.0>
 800f090:	e7f2      	b.n	800f078 <__sinit+0xc>
 800f092:	bf00      	nop
 800f094:	0800efd9 	.word	0x0800efd9
 800f098:	20004578 	.word	0x20004578

0800f09c <_fwalk_sglue>:
 800f09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	4688      	mov	r8, r1
 800f0a4:	4614      	mov	r4, r2
 800f0a6:	2600      	movs	r6, #0
 800f0a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0ac:	f1b9 0901 	subs.w	r9, r9, #1
 800f0b0:	d505      	bpl.n	800f0be <_fwalk_sglue+0x22>
 800f0b2:	6824      	ldr	r4, [r4, #0]
 800f0b4:	2c00      	cmp	r4, #0
 800f0b6:	d1f7      	bne.n	800f0a8 <_fwalk_sglue+0xc>
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d907      	bls.n	800f0d4 <_fwalk_sglue+0x38>
 800f0c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	d003      	beq.n	800f0d4 <_fwalk_sglue+0x38>
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	47c0      	blx	r8
 800f0d2:	4306      	orrs	r6, r0
 800f0d4:	3568      	adds	r5, #104	; 0x68
 800f0d6:	e7e9      	b.n	800f0ac <_fwalk_sglue+0x10>

0800f0d8 <siprintf>:
 800f0d8:	b40e      	push	{r1, r2, r3}
 800f0da:	b500      	push	{lr}
 800f0dc:	b09c      	sub	sp, #112	; 0x70
 800f0de:	ab1d      	add	r3, sp, #116	; 0x74
 800f0e0:	9002      	str	r0, [sp, #8]
 800f0e2:	9006      	str	r0, [sp, #24]
 800f0e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0e8:	4809      	ldr	r0, [pc, #36]	; (800f110 <siprintf+0x38>)
 800f0ea:	9107      	str	r1, [sp, #28]
 800f0ec:	9104      	str	r1, [sp, #16]
 800f0ee:	4909      	ldr	r1, [pc, #36]	; (800f114 <siprintf+0x3c>)
 800f0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f4:	9105      	str	r1, [sp, #20]
 800f0f6:	6800      	ldr	r0, [r0, #0]
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	a902      	add	r1, sp, #8
 800f0fc:	f000 fab8 	bl	800f670 <_svfiprintf_r>
 800f100:	9b02      	ldr	r3, [sp, #8]
 800f102:	2200      	movs	r2, #0
 800f104:	701a      	strb	r2, [r3, #0]
 800f106:	b01c      	add	sp, #112	; 0x70
 800f108:	f85d eb04 	ldr.w	lr, [sp], #4
 800f10c:	b003      	add	sp, #12
 800f10e:	4770      	bx	lr
 800f110:	20000194 	.word	0x20000194
 800f114:	ffff0208 	.word	0xffff0208

0800f118 <__sread>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	460c      	mov	r4, r1
 800f11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f120:	f000 f8d6 	bl	800f2d0 <_read_r>
 800f124:	2800      	cmp	r0, #0
 800f126:	bfab      	itete	ge
 800f128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f12a:	89a3      	ldrhlt	r3, [r4, #12]
 800f12c:	181b      	addge	r3, r3, r0
 800f12e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f132:	bfac      	ite	ge
 800f134:	6563      	strge	r3, [r4, #84]	; 0x54
 800f136:	81a3      	strhlt	r3, [r4, #12]
 800f138:	bd10      	pop	{r4, pc}

0800f13a <__swrite>:
 800f13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f13e:	461f      	mov	r7, r3
 800f140:	898b      	ldrh	r3, [r1, #12]
 800f142:	05db      	lsls	r3, r3, #23
 800f144:	4605      	mov	r5, r0
 800f146:	460c      	mov	r4, r1
 800f148:	4616      	mov	r6, r2
 800f14a:	d505      	bpl.n	800f158 <__swrite+0x1e>
 800f14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f150:	2302      	movs	r3, #2
 800f152:	2200      	movs	r2, #0
 800f154:	f000 f8aa 	bl	800f2ac <_lseek_r>
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f15e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	4632      	mov	r2, r6
 800f166:	463b      	mov	r3, r7
 800f168:	4628      	mov	r0, r5
 800f16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f16e:	f000 b8c1 	b.w	800f2f4 <_write_r>

0800f172 <__sseek>:
 800f172:	b510      	push	{r4, lr}
 800f174:	460c      	mov	r4, r1
 800f176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f17a:	f000 f897 	bl	800f2ac <_lseek_r>
 800f17e:	1c43      	adds	r3, r0, #1
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	bf15      	itete	ne
 800f184:	6560      	strne	r0, [r4, #84]	; 0x54
 800f186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f18a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f18e:	81a3      	strheq	r3, [r4, #12]
 800f190:	bf18      	it	ne
 800f192:	81a3      	strhne	r3, [r4, #12]
 800f194:	bd10      	pop	{r4, pc}

0800f196 <__sclose>:
 800f196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19a:	f000 b877 	b.w	800f28c <_close_r>

0800f19e <memset>:
 800f19e:	4402      	add	r2, r0
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d100      	bne.n	800f1a8 <memset+0xa>
 800f1a6:	4770      	bx	lr
 800f1a8:	f803 1b01 	strb.w	r1, [r3], #1
 800f1ac:	e7f9      	b.n	800f1a2 <memset+0x4>

0800f1ae <strncat>:
 800f1ae:	b530      	push	{r4, r5, lr}
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	7825      	ldrb	r5, [r4, #0]
 800f1b4:	4623      	mov	r3, r4
 800f1b6:	3401      	adds	r4, #1
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	d1fa      	bne.n	800f1b2 <strncat+0x4>
 800f1bc:	3a01      	subs	r2, #1
 800f1be:	d304      	bcc.n	800f1ca <strncat+0x1c>
 800f1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1c4:	f803 4b01 	strb.w	r4, [r3], #1
 800f1c8:	b904      	cbnz	r4, 800f1cc <strncat+0x1e>
 800f1ca:	bd30      	pop	{r4, r5, pc}
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	d1f5      	bne.n	800f1bc <strncat+0xe>
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	e7f3      	b.n	800f1bc <strncat+0xe>

0800f1d4 <strtok>:
 800f1d4:	4b16      	ldr	r3, [pc, #88]	; (800f230 <strtok+0x5c>)
 800f1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1d8:	681e      	ldr	r6, [r3, #0]
 800f1da:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f1dc:	4605      	mov	r5, r0
 800f1de:	b9fc      	cbnz	r4, 800f220 <strtok+0x4c>
 800f1e0:	2050      	movs	r0, #80	; 0x50
 800f1e2:	9101      	str	r1, [sp, #4]
 800f1e4:	f000 f936 	bl	800f454 <malloc>
 800f1e8:	9901      	ldr	r1, [sp, #4]
 800f1ea:	6470      	str	r0, [r6, #68]	; 0x44
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	b920      	cbnz	r0, 800f1fa <strtok+0x26>
 800f1f0:	4b10      	ldr	r3, [pc, #64]	; (800f234 <strtok+0x60>)
 800f1f2:	4811      	ldr	r0, [pc, #68]	; (800f238 <strtok+0x64>)
 800f1f4:	215b      	movs	r1, #91	; 0x5b
 800f1f6:	f000 f8c3 	bl	800f380 <__assert_func>
 800f1fa:	e9c0 4400 	strd	r4, r4, [r0]
 800f1fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f202:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f206:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f20a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f20e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f212:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f216:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f21a:	6184      	str	r4, [r0, #24]
 800f21c:	7704      	strb	r4, [r0, #28]
 800f21e:	6244      	str	r4, [r0, #36]	; 0x24
 800f220:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f222:	2301      	movs	r3, #1
 800f224:	4628      	mov	r0, r5
 800f226:	b002      	add	sp, #8
 800f228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f22c:	f000 b806 	b.w	800f23c <__strtok_r>
 800f230:	20000194 	.word	0x20000194
 800f234:	08010bd9 	.word	0x08010bd9
 800f238:	08010bf0 	.word	0x08010bf0

0800f23c <__strtok_r>:
 800f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23e:	b908      	cbnz	r0, 800f244 <__strtok_r+0x8>
 800f240:	6810      	ldr	r0, [r2, #0]
 800f242:	b188      	cbz	r0, 800f268 <__strtok_r+0x2c>
 800f244:	4604      	mov	r4, r0
 800f246:	4620      	mov	r0, r4
 800f248:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f24c:	460f      	mov	r7, r1
 800f24e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f252:	b91e      	cbnz	r6, 800f25c <__strtok_r+0x20>
 800f254:	b965      	cbnz	r5, 800f270 <__strtok_r+0x34>
 800f256:	6015      	str	r5, [r2, #0]
 800f258:	4628      	mov	r0, r5
 800f25a:	e005      	b.n	800f268 <__strtok_r+0x2c>
 800f25c:	42b5      	cmp	r5, r6
 800f25e:	d1f6      	bne.n	800f24e <__strtok_r+0x12>
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1f0      	bne.n	800f246 <__strtok_r+0xa>
 800f264:	6014      	str	r4, [r2, #0]
 800f266:	7003      	strb	r3, [r0, #0]
 800f268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f26a:	461c      	mov	r4, r3
 800f26c:	e00c      	b.n	800f288 <__strtok_r+0x4c>
 800f26e:	b915      	cbnz	r5, 800f276 <__strtok_r+0x3a>
 800f270:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f274:	460e      	mov	r6, r1
 800f276:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f27a:	42ab      	cmp	r3, r5
 800f27c:	d1f7      	bne.n	800f26e <__strtok_r+0x32>
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d0f3      	beq.n	800f26a <__strtok_r+0x2e>
 800f282:	2300      	movs	r3, #0
 800f284:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f288:	6014      	str	r4, [r2, #0]
 800f28a:	e7ed      	b.n	800f268 <__strtok_r+0x2c>

0800f28c <_close_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	4d06      	ldr	r5, [pc, #24]	; (800f2a8 <_close_r+0x1c>)
 800f290:	2300      	movs	r3, #0
 800f292:	4604      	mov	r4, r0
 800f294:	4608      	mov	r0, r1
 800f296:	602b      	str	r3, [r5, #0]
 800f298:	f7f3 fb27 	bl	80028ea <_close>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_close_r+0x1a>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_close_r+0x1a>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	2000457c 	.word	0x2000457c

0800f2ac <_lseek_r>:
 800f2ac:	b538      	push	{r3, r4, r5, lr}
 800f2ae:	4d07      	ldr	r5, [pc, #28]	; (800f2cc <_lseek_r+0x20>)
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	4608      	mov	r0, r1
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	602a      	str	r2, [r5, #0]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	f7f3 fb3c 	bl	8002938 <_lseek>
 800f2c0:	1c43      	adds	r3, r0, #1
 800f2c2:	d102      	bne.n	800f2ca <_lseek_r+0x1e>
 800f2c4:	682b      	ldr	r3, [r5, #0]
 800f2c6:	b103      	cbz	r3, 800f2ca <_lseek_r+0x1e>
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	bd38      	pop	{r3, r4, r5, pc}
 800f2cc:	2000457c 	.word	0x2000457c

0800f2d0 <_read_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4d07      	ldr	r5, [pc, #28]	; (800f2f0 <_read_r+0x20>)
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	4611      	mov	r1, r2
 800f2da:	2200      	movs	r2, #0
 800f2dc:	602a      	str	r2, [r5, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	f7f3 faca 	bl	8002878 <_read>
 800f2e4:	1c43      	adds	r3, r0, #1
 800f2e6:	d102      	bne.n	800f2ee <_read_r+0x1e>
 800f2e8:	682b      	ldr	r3, [r5, #0]
 800f2ea:	b103      	cbz	r3, 800f2ee <_read_r+0x1e>
 800f2ec:	6023      	str	r3, [r4, #0]
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	2000457c 	.word	0x2000457c

0800f2f4 <_write_r>:
 800f2f4:	b538      	push	{r3, r4, r5, lr}
 800f2f6:	4d07      	ldr	r5, [pc, #28]	; (800f314 <_write_r+0x20>)
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	4608      	mov	r0, r1
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	2200      	movs	r2, #0
 800f300:	602a      	str	r2, [r5, #0]
 800f302:	461a      	mov	r2, r3
 800f304:	f7f3 fad5 	bl	80028b2 <_write>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d102      	bne.n	800f312 <_write_r+0x1e>
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	b103      	cbz	r3, 800f312 <_write_r+0x1e>
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	2000457c 	.word	0x2000457c

0800f318 <__errno>:
 800f318:	4b01      	ldr	r3, [pc, #4]	; (800f320 <__errno+0x8>)
 800f31a:	6818      	ldr	r0, [r3, #0]
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop
 800f320:	20000194 	.word	0x20000194

0800f324 <__libc_init_array>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	4d0d      	ldr	r5, [pc, #52]	; (800f35c <__libc_init_array+0x38>)
 800f328:	4c0d      	ldr	r4, [pc, #52]	; (800f360 <__libc_init_array+0x3c>)
 800f32a:	1b64      	subs	r4, r4, r5
 800f32c:	10a4      	asrs	r4, r4, #2
 800f32e:	2600      	movs	r6, #0
 800f330:	42a6      	cmp	r6, r4
 800f332:	d109      	bne.n	800f348 <__libc_init_array+0x24>
 800f334:	4d0b      	ldr	r5, [pc, #44]	; (800f364 <__libc_init_array+0x40>)
 800f336:	4c0c      	ldr	r4, [pc, #48]	; (800f368 <__libc_init_array+0x44>)
 800f338:	f001 f800 	bl	801033c <_init>
 800f33c:	1b64      	subs	r4, r4, r5
 800f33e:	10a4      	asrs	r4, r4, #2
 800f340:	2600      	movs	r6, #0
 800f342:	42a6      	cmp	r6, r4
 800f344:	d105      	bne.n	800f352 <__libc_init_array+0x2e>
 800f346:	bd70      	pop	{r4, r5, r6, pc}
 800f348:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34c:	4798      	blx	r3
 800f34e:	3601      	adds	r6, #1
 800f350:	e7ee      	b.n	800f330 <__libc_init_array+0xc>
 800f352:	f855 3b04 	ldr.w	r3, [r5], #4
 800f356:	4798      	blx	r3
 800f358:	3601      	adds	r6, #1
 800f35a:	e7f2      	b.n	800f342 <__libc_init_array+0x1e>
 800f35c:	08010cc4 	.word	0x08010cc4
 800f360:	08010cc4 	.word	0x08010cc4
 800f364:	08010cc4 	.word	0x08010cc4
 800f368:	08010cc8 	.word	0x08010cc8

0800f36c <__retarget_lock_acquire_recursive>:
 800f36c:	4770      	bx	lr

0800f36e <__retarget_lock_release_recursive>:
 800f36e:	4770      	bx	lr

0800f370 <strcpy>:
 800f370:	4603      	mov	r3, r0
 800f372:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f376:	f803 2b01 	strb.w	r2, [r3], #1
 800f37a:	2a00      	cmp	r2, #0
 800f37c:	d1f9      	bne.n	800f372 <strcpy+0x2>
 800f37e:	4770      	bx	lr

0800f380 <__assert_func>:
 800f380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f382:	4614      	mov	r4, r2
 800f384:	461a      	mov	r2, r3
 800f386:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <__assert_func+0x2c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4605      	mov	r5, r0
 800f38c:	68d8      	ldr	r0, [r3, #12]
 800f38e:	b14c      	cbz	r4, 800f3a4 <__assert_func+0x24>
 800f390:	4b07      	ldr	r3, [pc, #28]	; (800f3b0 <__assert_func+0x30>)
 800f392:	9100      	str	r1, [sp, #0]
 800f394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f398:	4906      	ldr	r1, [pc, #24]	; (800f3b4 <__assert_func+0x34>)
 800f39a:	462b      	mov	r3, r5
 800f39c:	f000 fca4 	bl	800fce8 <fiprintf>
 800f3a0:	f000 fcec 	bl	800fd7c <abort>
 800f3a4:	4b04      	ldr	r3, [pc, #16]	; (800f3b8 <__assert_func+0x38>)
 800f3a6:	461c      	mov	r4, r3
 800f3a8:	e7f3      	b.n	800f392 <__assert_func+0x12>
 800f3aa:	bf00      	nop
 800f3ac:	20000194 	.word	0x20000194
 800f3b0:	08010c4a 	.word	0x08010c4a
 800f3b4:	08010c57 	.word	0x08010c57
 800f3b8:	08010c85 	.word	0x08010c85

0800f3bc <_free_r>:
 800f3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3be:	2900      	cmp	r1, #0
 800f3c0:	d044      	beq.n	800f44c <_free_r+0x90>
 800f3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3c6:	9001      	str	r0, [sp, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f3ce:	bfb8      	it	lt
 800f3d0:	18e4      	addlt	r4, r4, r3
 800f3d2:	f000 f8e7 	bl	800f5a4 <__malloc_lock>
 800f3d6:	4a1e      	ldr	r2, [pc, #120]	; (800f450 <_free_r+0x94>)
 800f3d8:	9801      	ldr	r0, [sp, #4]
 800f3da:	6813      	ldr	r3, [r2, #0]
 800f3dc:	b933      	cbnz	r3, 800f3ec <_free_r+0x30>
 800f3de:	6063      	str	r3, [r4, #4]
 800f3e0:	6014      	str	r4, [r2, #0]
 800f3e2:	b003      	add	sp, #12
 800f3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3e8:	f000 b8e2 	b.w	800f5b0 <__malloc_unlock>
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	d908      	bls.n	800f402 <_free_r+0x46>
 800f3f0:	6825      	ldr	r5, [r4, #0]
 800f3f2:	1961      	adds	r1, r4, r5
 800f3f4:	428b      	cmp	r3, r1
 800f3f6:	bf01      	itttt	eq
 800f3f8:	6819      	ldreq	r1, [r3, #0]
 800f3fa:	685b      	ldreq	r3, [r3, #4]
 800f3fc:	1949      	addeq	r1, r1, r5
 800f3fe:	6021      	streq	r1, [r4, #0]
 800f400:	e7ed      	b.n	800f3de <_free_r+0x22>
 800f402:	461a      	mov	r2, r3
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	b10b      	cbz	r3, 800f40c <_free_r+0x50>
 800f408:	42a3      	cmp	r3, r4
 800f40a:	d9fa      	bls.n	800f402 <_free_r+0x46>
 800f40c:	6811      	ldr	r1, [r2, #0]
 800f40e:	1855      	adds	r5, r2, r1
 800f410:	42a5      	cmp	r5, r4
 800f412:	d10b      	bne.n	800f42c <_free_r+0x70>
 800f414:	6824      	ldr	r4, [r4, #0]
 800f416:	4421      	add	r1, r4
 800f418:	1854      	adds	r4, r2, r1
 800f41a:	42a3      	cmp	r3, r4
 800f41c:	6011      	str	r1, [r2, #0]
 800f41e:	d1e0      	bne.n	800f3e2 <_free_r+0x26>
 800f420:	681c      	ldr	r4, [r3, #0]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	6053      	str	r3, [r2, #4]
 800f426:	440c      	add	r4, r1
 800f428:	6014      	str	r4, [r2, #0]
 800f42a:	e7da      	b.n	800f3e2 <_free_r+0x26>
 800f42c:	d902      	bls.n	800f434 <_free_r+0x78>
 800f42e:	230c      	movs	r3, #12
 800f430:	6003      	str	r3, [r0, #0]
 800f432:	e7d6      	b.n	800f3e2 <_free_r+0x26>
 800f434:	6825      	ldr	r5, [r4, #0]
 800f436:	1961      	adds	r1, r4, r5
 800f438:	428b      	cmp	r3, r1
 800f43a:	bf04      	itt	eq
 800f43c:	6819      	ldreq	r1, [r3, #0]
 800f43e:	685b      	ldreq	r3, [r3, #4]
 800f440:	6063      	str	r3, [r4, #4]
 800f442:	bf04      	itt	eq
 800f444:	1949      	addeq	r1, r1, r5
 800f446:	6021      	streq	r1, [r4, #0]
 800f448:	6054      	str	r4, [r2, #4]
 800f44a:	e7ca      	b.n	800f3e2 <_free_r+0x26>
 800f44c:	b003      	add	sp, #12
 800f44e:	bd30      	pop	{r4, r5, pc}
 800f450:	20004584 	.word	0x20004584

0800f454 <malloc>:
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <malloc+0xc>)
 800f456:	4601      	mov	r1, r0
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	f000 b823 	b.w	800f4a4 <_malloc_r>
 800f45e:	bf00      	nop
 800f460:	20000194 	.word	0x20000194

0800f464 <sbrk_aligned>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	4e0e      	ldr	r6, [pc, #56]	; (800f4a0 <sbrk_aligned+0x3c>)
 800f468:	460c      	mov	r4, r1
 800f46a:	6831      	ldr	r1, [r6, #0]
 800f46c:	4605      	mov	r5, r0
 800f46e:	b911      	cbnz	r1, 800f476 <sbrk_aligned+0x12>
 800f470:	f000 fc66 	bl	800fd40 <_sbrk_r>
 800f474:	6030      	str	r0, [r6, #0]
 800f476:	4621      	mov	r1, r4
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 fc61 	bl	800fd40 <_sbrk_r>
 800f47e:	1c43      	adds	r3, r0, #1
 800f480:	d00a      	beq.n	800f498 <sbrk_aligned+0x34>
 800f482:	1cc4      	adds	r4, r0, #3
 800f484:	f024 0403 	bic.w	r4, r4, #3
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d007      	beq.n	800f49c <sbrk_aligned+0x38>
 800f48c:	1a21      	subs	r1, r4, r0
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 fc56 	bl	800fd40 <_sbrk_r>
 800f494:	3001      	adds	r0, #1
 800f496:	d101      	bne.n	800f49c <sbrk_aligned+0x38>
 800f498:	f04f 34ff 	mov.w	r4, #4294967295
 800f49c:	4620      	mov	r0, r4
 800f49e:	bd70      	pop	{r4, r5, r6, pc}
 800f4a0:	20004588 	.word	0x20004588

0800f4a4 <_malloc_r>:
 800f4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a8:	1ccd      	adds	r5, r1, #3
 800f4aa:	f025 0503 	bic.w	r5, r5, #3
 800f4ae:	3508      	adds	r5, #8
 800f4b0:	2d0c      	cmp	r5, #12
 800f4b2:	bf38      	it	cc
 800f4b4:	250c      	movcc	r5, #12
 800f4b6:	2d00      	cmp	r5, #0
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	db01      	blt.n	800f4c0 <_malloc_r+0x1c>
 800f4bc:	42a9      	cmp	r1, r5
 800f4be:	d905      	bls.n	800f4cc <_malloc_r+0x28>
 800f4c0:	230c      	movs	r3, #12
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	2600      	movs	r6, #0
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f5a0 <_malloc_r+0xfc>
 800f4d0:	f000 f868 	bl	800f5a4 <__malloc_lock>
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	461c      	mov	r4, r3
 800f4da:	bb5c      	cbnz	r4, 800f534 <_malloc_r+0x90>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4638      	mov	r0, r7
 800f4e0:	f7ff ffc0 	bl	800f464 <sbrk_aligned>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	d155      	bne.n	800f596 <_malloc_r+0xf2>
 800f4ea:	f8d8 4000 	ldr.w	r4, [r8]
 800f4ee:	4626      	mov	r6, r4
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	d145      	bne.n	800f580 <_malloc_r+0xdc>
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d048      	beq.n	800f58a <_malloc_r+0xe6>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4638      	mov	r0, r7
 800f4fe:	eb04 0903 	add.w	r9, r4, r3
 800f502:	f000 fc1d 	bl	800fd40 <_sbrk_r>
 800f506:	4581      	cmp	r9, r0
 800f508:	d13f      	bne.n	800f58a <_malloc_r+0xe6>
 800f50a:	6821      	ldr	r1, [r4, #0]
 800f50c:	1a6d      	subs	r5, r5, r1
 800f50e:	4629      	mov	r1, r5
 800f510:	4638      	mov	r0, r7
 800f512:	f7ff ffa7 	bl	800f464 <sbrk_aligned>
 800f516:	3001      	adds	r0, #1
 800f518:	d037      	beq.n	800f58a <_malloc_r+0xe6>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	442b      	add	r3, r5
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	f8d8 3000 	ldr.w	r3, [r8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d038      	beq.n	800f59a <_malloc_r+0xf6>
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	42a2      	cmp	r2, r4
 800f52c:	d12b      	bne.n	800f586 <_malloc_r+0xe2>
 800f52e:	2200      	movs	r2, #0
 800f530:	605a      	str	r2, [r3, #4]
 800f532:	e00f      	b.n	800f554 <_malloc_r+0xb0>
 800f534:	6822      	ldr	r2, [r4, #0]
 800f536:	1b52      	subs	r2, r2, r5
 800f538:	d41f      	bmi.n	800f57a <_malloc_r+0xd6>
 800f53a:	2a0b      	cmp	r2, #11
 800f53c:	d917      	bls.n	800f56e <_malloc_r+0xca>
 800f53e:	1961      	adds	r1, r4, r5
 800f540:	42a3      	cmp	r3, r4
 800f542:	6025      	str	r5, [r4, #0]
 800f544:	bf18      	it	ne
 800f546:	6059      	strne	r1, [r3, #4]
 800f548:	6863      	ldr	r3, [r4, #4]
 800f54a:	bf08      	it	eq
 800f54c:	f8c8 1000 	streq.w	r1, [r8]
 800f550:	5162      	str	r2, [r4, r5]
 800f552:	604b      	str	r3, [r1, #4]
 800f554:	4638      	mov	r0, r7
 800f556:	f104 060b 	add.w	r6, r4, #11
 800f55a:	f000 f829 	bl	800f5b0 <__malloc_unlock>
 800f55e:	f026 0607 	bic.w	r6, r6, #7
 800f562:	1d23      	adds	r3, r4, #4
 800f564:	1af2      	subs	r2, r6, r3
 800f566:	d0ae      	beq.n	800f4c6 <_malloc_r+0x22>
 800f568:	1b9b      	subs	r3, r3, r6
 800f56a:	50a3      	str	r3, [r4, r2]
 800f56c:	e7ab      	b.n	800f4c6 <_malloc_r+0x22>
 800f56e:	42a3      	cmp	r3, r4
 800f570:	6862      	ldr	r2, [r4, #4]
 800f572:	d1dd      	bne.n	800f530 <_malloc_r+0x8c>
 800f574:	f8c8 2000 	str.w	r2, [r8]
 800f578:	e7ec      	b.n	800f554 <_malloc_r+0xb0>
 800f57a:	4623      	mov	r3, r4
 800f57c:	6864      	ldr	r4, [r4, #4]
 800f57e:	e7ac      	b.n	800f4da <_malloc_r+0x36>
 800f580:	4634      	mov	r4, r6
 800f582:	6876      	ldr	r6, [r6, #4]
 800f584:	e7b4      	b.n	800f4f0 <_malloc_r+0x4c>
 800f586:	4613      	mov	r3, r2
 800f588:	e7cc      	b.n	800f524 <_malloc_r+0x80>
 800f58a:	230c      	movs	r3, #12
 800f58c:	603b      	str	r3, [r7, #0]
 800f58e:	4638      	mov	r0, r7
 800f590:	f000 f80e 	bl	800f5b0 <__malloc_unlock>
 800f594:	e797      	b.n	800f4c6 <_malloc_r+0x22>
 800f596:	6025      	str	r5, [r4, #0]
 800f598:	e7dc      	b.n	800f554 <_malloc_r+0xb0>
 800f59a:	605b      	str	r3, [r3, #4]
 800f59c:	deff      	udf	#255	; 0xff
 800f59e:	bf00      	nop
 800f5a0:	20004584 	.word	0x20004584

0800f5a4 <__malloc_lock>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__malloc_lock+0x8>)
 800f5a6:	f7ff bee1 	b.w	800f36c <__retarget_lock_acquire_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	20004580 	.word	0x20004580

0800f5b0 <__malloc_unlock>:
 800f5b0:	4801      	ldr	r0, [pc, #4]	; (800f5b8 <__malloc_unlock+0x8>)
 800f5b2:	f7ff bedc 	b.w	800f36e <__retarget_lock_release_recursive>
 800f5b6:	bf00      	nop
 800f5b8:	20004580 	.word	0x20004580

0800f5bc <__ssputs_r>:
 800f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c0:	688e      	ldr	r6, [r1, #8]
 800f5c2:	461f      	mov	r7, r3
 800f5c4:	42be      	cmp	r6, r7
 800f5c6:	680b      	ldr	r3, [r1, #0]
 800f5c8:	4682      	mov	sl, r0
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	4690      	mov	r8, r2
 800f5ce:	d82c      	bhi.n	800f62a <__ssputs_r+0x6e>
 800f5d0:	898a      	ldrh	r2, [r1, #12]
 800f5d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5d6:	d026      	beq.n	800f626 <__ssputs_r+0x6a>
 800f5d8:	6965      	ldr	r5, [r4, #20]
 800f5da:	6909      	ldr	r1, [r1, #16]
 800f5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5e0:	eba3 0901 	sub.w	r9, r3, r1
 800f5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5e8:	1c7b      	adds	r3, r7, #1
 800f5ea:	444b      	add	r3, r9
 800f5ec:	106d      	asrs	r5, r5, #1
 800f5ee:	429d      	cmp	r5, r3
 800f5f0:	bf38      	it	cc
 800f5f2:	461d      	movcc	r5, r3
 800f5f4:	0553      	lsls	r3, r2, #21
 800f5f6:	d527      	bpl.n	800f648 <__ssputs_r+0x8c>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7ff ff53 	bl	800f4a4 <_malloc_r>
 800f5fe:	4606      	mov	r6, r0
 800f600:	b360      	cbz	r0, 800f65c <__ssputs_r+0xa0>
 800f602:	6921      	ldr	r1, [r4, #16]
 800f604:	464a      	mov	r2, r9
 800f606:	f000 fbab 	bl	800fd60 <memcpy>
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f614:	81a3      	strh	r3, [r4, #12]
 800f616:	6126      	str	r6, [r4, #16]
 800f618:	6165      	str	r5, [r4, #20]
 800f61a:	444e      	add	r6, r9
 800f61c:	eba5 0509 	sub.w	r5, r5, r9
 800f620:	6026      	str	r6, [r4, #0]
 800f622:	60a5      	str	r5, [r4, #8]
 800f624:	463e      	mov	r6, r7
 800f626:	42be      	cmp	r6, r7
 800f628:	d900      	bls.n	800f62c <__ssputs_r+0x70>
 800f62a:	463e      	mov	r6, r7
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	4632      	mov	r2, r6
 800f630:	4641      	mov	r1, r8
 800f632:	f000 fb6b 	bl	800fd0c <memmove>
 800f636:	68a3      	ldr	r3, [r4, #8]
 800f638:	1b9b      	subs	r3, r3, r6
 800f63a:	60a3      	str	r3, [r4, #8]
 800f63c:	6823      	ldr	r3, [r4, #0]
 800f63e:	4433      	add	r3, r6
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	2000      	movs	r0, #0
 800f644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f648:	462a      	mov	r2, r5
 800f64a:	f000 fb9e 	bl	800fd8a <_realloc_r>
 800f64e:	4606      	mov	r6, r0
 800f650:	2800      	cmp	r0, #0
 800f652:	d1e0      	bne.n	800f616 <__ssputs_r+0x5a>
 800f654:	6921      	ldr	r1, [r4, #16]
 800f656:	4650      	mov	r0, sl
 800f658:	f7ff feb0 	bl	800f3bc <_free_r>
 800f65c:	230c      	movs	r3, #12
 800f65e:	f8ca 3000 	str.w	r3, [sl]
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	f04f 30ff 	mov.w	r0, #4294967295
 800f66e:	e7e9      	b.n	800f644 <__ssputs_r+0x88>

0800f670 <_svfiprintf_r>:
 800f670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f674:	4698      	mov	r8, r3
 800f676:	898b      	ldrh	r3, [r1, #12]
 800f678:	061b      	lsls	r3, r3, #24
 800f67a:	b09d      	sub	sp, #116	; 0x74
 800f67c:	4607      	mov	r7, r0
 800f67e:	460d      	mov	r5, r1
 800f680:	4614      	mov	r4, r2
 800f682:	d50e      	bpl.n	800f6a2 <_svfiprintf_r+0x32>
 800f684:	690b      	ldr	r3, [r1, #16]
 800f686:	b963      	cbnz	r3, 800f6a2 <_svfiprintf_r+0x32>
 800f688:	2140      	movs	r1, #64	; 0x40
 800f68a:	f7ff ff0b 	bl	800f4a4 <_malloc_r>
 800f68e:	6028      	str	r0, [r5, #0]
 800f690:	6128      	str	r0, [r5, #16]
 800f692:	b920      	cbnz	r0, 800f69e <_svfiprintf_r+0x2e>
 800f694:	230c      	movs	r3, #12
 800f696:	603b      	str	r3, [r7, #0]
 800f698:	f04f 30ff 	mov.w	r0, #4294967295
 800f69c:	e0d0      	b.n	800f840 <_svfiprintf_r+0x1d0>
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	616b      	str	r3, [r5, #20]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a6:	2320      	movs	r3, #32
 800f6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6b0:	2330      	movs	r3, #48	; 0x30
 800f6b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f858 <_svfiprintf_r+0x1e8>
 800f6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ba:	f04f 0901 	mov.w	r9, #1
 800f6be:	4623      	mov	r3, r4
 800f6c0:	469a      	mov	sl, r3
 800f6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6c6:	b10a      	cbz	r2, 800f6cc <_svfiprintf_r+0x5c>
 800f6c8:	2a25      	cmp	r2, #37	; 0x25
 800f6ca:	d1f9      	bne.n	800f6c0 <_svfiprintf_r+0x50>
 800f6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f6d0:	d00b      	beq.n	800f6ea <_svfiprintf_r+0x7a>
 800f6d2:	465b      	mov	r3, fp
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7ff ff6f 	bl	800f5bc <__ssputs_r>
 800f6de:	3001      	adds	r0, #1
 800f6e0:	f000 80a9 	beq.w	800f836 <_svfiprintf_r+0x1c6>
 800f6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6e6:	445a      	add	r2, fp
 800f6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 80a1 	beq.w	800f836 <_svfiprintf_r+0x1c6>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6fe:	f10a 0a01 	add.w	sl, sl, #1
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	9307      	str	r3, [sp, #28]
 800f706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f70a:	931a      	str	r3, [sp, #104]	; 0x68
 800f70c:	4654      	mov	r4, sl
 800f70e:	2205      	movs	r2, #5
 800f710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f714:	4850      	ldr	r0, [pc, #320]	; (800f858 <_svfiprintf_r+0x1e8>)
 800f716:	f7f0 fd7b 	bl	8000210 <memchr>
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	b9d8      	cbnz	r0, 800f756 <_svfiprintf_r+0xe6>
 800f71e:	06d0      	lsls	r0, r2, #27
 800f720:	bf44      	itt	mi
 800f722:	2320      	movmi	r3, #32
 800f724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f728:	0711      	lsls	r1, r2, #28
 800f72a:	bf44      	itt	mi
 800f72c:	232b      	movmi	r3, #43	; 0x2b
 800f72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f732:	f89a 3000 	ldrb.w	r3, [sl]
 800f736:	2b2a      	cmp	r3, #42	; 0x2a
 800f738:	d015      	beq.n	800f766 <_svfiprintf_r+0xf6>
 800f73a:	9a07      	ldr	r2, [sp, #28]
 800f73c:	4654      	mov	r4, sl
 800f73e:	2000      	movs	r0, #0
 800f740:	f04f 0c0a 	mov.w	ip, #10
 800f744:	4621      	mov	r1, r4
 800f746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f74a:	3b30      	subs	r3, #48	; 0x30
 800f74c:	2b09      	cmp	r3, #9
 800f74e:	d94d      	bls.n	800f7ec <_svfiprintf_r+0x17c>
 800f750:	b1b0      	cbz	r0, 800f780 <_svfiprintf_r+0x110>
 800f752:	9207      	str	r2, [sp, #28]
 800f754:	e014      	b.n	800f780 <_svfiprintf_r+0x110>
 800f756:	eba0 0308 	sub.w	r3, r0, r8
 800f75a:	fa09 f303 	lsl.w	r3, r9, r3
 800f75e:	4313      	orrs	r3, r2
 800f760:	9304      	str	r3, [sp, #16]
 800f762:	46a2      	mov	sl, r4
 800f764:	e7d2      	b.n	800f70c <_svfiprintf_r+0x9c>
 800f766:	9b03      	ldr	r3, [sp, #12]
 800f768:	1d19      	adds	r1, r3, #4
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	9103      	str	r1, [sp, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bfbb      	ittet	lt
 800f772:	425b      	neglt	r3, r3
 800f774:	f042 0202 	orrlt.w	r2, r2, #2
 800f778:	9307      	strge	r3, [sp, #28]
 800f77a:	9307      	strlt	r3, [sp, #28]
 800f77c:	bfb8      	it	lt
 800f77e:	9204      	strlt	r2, [sp, #16]
 800f780:	7823      	ldrb	r3, [r4, #0]
 800f782:	2b2e      	cmp	r3, #46	; 0x2e
 800f784:	d10c      	bne.n	800f7a0 <_svfiprintf_r+0x130>
 800f786:	7863      	ldrb	r3, [r4, #1]
 800f788:	2b2a      	cmp	r3, #42	; 0x2a
 800f78a:	d134      	bne.n	800f7f6 <_svfiprintf_r+0x186>
 800f78c:	9b03      	ldr	r3, [sp, #12]
 800f78e:	1d1a      	adds	r2, r3, #4
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	9203      	str	r2, [sp, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	bfb8      	it	lt
 800f798:	f04f 33ff 	movlt.w	r3, #4294967295
 800f79c:	3402      	adds	r4, #2
 800f79e:	9305      	str	r3, [sp, #20]
 800f7a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f868 <_svfiprintf_r+0x1f8>
 800f7a4:	7821      	ldrb	r1, [r4, #0]
 800f7a6:	2203      	movs	r2, #3
 800f7a8:	4650      	mov	r0, sl
 800f7aa:	f7f0 fd31 	bl	8000210 <memchr>
 800f7ae:	b138      	cbz	r0, 800f7c0 <_svfiprintf_r+0x150>
 800f7b0:	9b04      	ldr	r3, [sp, #16]
 800f7b2:	eba0 000a 	sub.w	r0, r0, sl
 800f7b6:	2240      	movs	r2, #64	; 0x40
 800f7b8:	4082      	lsls	r2, r0
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	3401      	adds	r4, #1
 800f7be:	9304      	str	r3, [sp, #16]
 800f7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7c4:	4825      	ldr	r0, [pc, #148]	; (800f85c <_svfiprintf_r+0x1ec>)
 800f7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ca:	2206      	movs	r2, #6
 800f7cc:	f7f0 fd20 	bl	8000210 <memchr>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d038      	beq.n	800f846 <_svfiprintf_r+0x1d6>
 800f7d4:	4b22      	ldr	r3, [pc, #136]	; (800f860 <_svfiprintf_r+0x1f0>)
 800f7d6:	bb1b      	cbnz	r3, 800f820 <_svfiprintf_r+0x1b0>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	3307      	adds	r3, #7
 800f7dc:	f023 0307 	bic.w	r3, r3, #7
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	9303      	str	r3, [sp, #12]
 800f7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e6:	4433      	add	r3, r6
 800f7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ea:	e768      	b.n	800f6be <_svfiprintf_r+0x4e>
 800f7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	e7a6      	b.n	800f744 <_svfiprintf_r+0xd4>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	3401      	adds	r4, #1
 800f7fa:	9305      	str	r3, [sp, #20]
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	f04f 0c0a 	mov.w	ip, #10
 800f802:	4620      	mov	r0, r4
 800f804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f808:	3a30      	subs	r2, #48	; 0x30
 800f80a:	2a09      	cmp	r2, #9
 800f80c:	d903      	bls.n	800f816 <_svfiprintf_r+0x1a6>
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0c6      	beq.n	800f7a0 <_svfiprintf_r+0x130>
 800f812:	9105      	str	r1, [sp, #20]
 800f814:	e7c4      	b.n	800f7a0 <_svfiprintf_r+0x130>
 800f816:	fb0c 2101 	mla	r1, ip, r1, r2
 800f81a:	4604      	mov	r4, r0
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7f0      	b.n	800f802 <_svfiprintf_r+0x192>
 800f820:	ab03      	add	r3, sp, #12
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	462a      	mov	r2, r5
 800f826:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <_svfiprintf_r+0x1f4>)
 800f828:	a904      	add	r1, sp, #16
 800f82a:	4638      	mov	r0, r7
 800f82c:	f3af 8000 	nop.w
 800f830:	1c42      	adds	r2, r0, #1
 800f832:	4606      	mov	r6, r0
 800f834:	d1d6      	bne.n	800f7e4 <_svfiprintf_r+0x174>
 800f836:	89ab      	ldrh	r3, [r5, #12]
 800f838:	065b      	lsls	r3, r3, #25
 800f83a:	f53f af2d 	bmi.w	800f698 <_svfiprintf_r+0x28>
 800f83e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f840:	b01d      	add	sp, #116	; 0x74
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f846:	ab03      	add	r3, sp, #12
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	462a      	mov	r2, r5
 800f84c:	4b05      	ldr	r3, [pc, #20]	; (800f864 <_svfiprintf_r+0x1f4>)
 800f84e:	a904      	add	r1, sp, #16
 800f850:	4638      	mov	r0, r7
 800f852:	f000 f879 	bl	800f948 <_printf_i>
 800f856:	e7eb      	b.n	800f830 <_svfiprintf_r+0x1c0>
 800f858:	08010c86 	.word	0x08010c86
 800f85c:	08010c90 	.word	0x08010c90
 800f860:	00000000 	.word	0x00000000
 800f864:	0800f5bd 	.word	0x0800f5bd
 800f868:	08010c8c 	.word	0x08010c8c

0800f86c <_printf_common>:
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	4616      	mov	r6, r2
 800f872:	4699      	mov	r9, r3
 800f874:	688a      	ldr	r2, [r1, #8]
 800f876:	690b      	ldr	r3, [r1, #16]
 800f878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	bfb8      	it	lt
 800f880:	4613      	movlt	r3, r2
 800f882:	6033      	str	r3, [r6, #0]
 800f884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f888:	4607      	mov	r7, r0
 800f88a:	460c      	mov	r4, r1
 800f88c:	b10a      	cbz	r2, 800f892 <_printf_common+0x26>
 800f88e:	3301      	adds	r3, #1
 800f890:	6033      	str	r3, [r6, #0]
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	0699      	lsls	r1, r3, #26
 800f896:	bf42      	ittt	mi
 800f898:	6833      	ldrmi	r3, [r6, #0]
 800f89a:	3302      	addmi	r3, #2
 800f89c:	6033      	strmi	r3, [r6, #0]
 800f89e:	6825      	ldr	r5, [r4, #0]
 800f8a0:	f015 0506 	ands.w	r5, r5, #6
 800f8a4:	d106      	bne.n	800f8b4 <_printf_common+0x48>
 800f8a6:	f104 0a19 	add.w	sl, r4, #25
 800f8aa:	68e3      	ldr	r3, [r4, #12]
 800f8ac:	6832      	ldr	r2, [r6, #0]
 800f8ae:	1a9b      	subs	r3, r3, r2
 800f8b0:	42ab      	cmp	r3, r5
 800f8b2:	dc26      	bgt.n	800f902 <_printf_common+0x96>
 800f8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8b8:	1e13      	subs	r3, r2, #0
 800f8ba:	6822      	ldr	r2, [r4, #0]
 800f8bc:	bf18      	it	ne
 800f8be:	2301      	movne	r3, #1
 800f8c0:	0692      	lsls	r2, r2, #26
 800f8c2:	d42b      	bmi.n	800f91c <_printf_common+0xb0>
 800f8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	47c0      	blx	r8
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	d01e      	beq.n	800f910 <_printf_common+0xa4>
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	6922      	ldr	r2, [r4, #16]
 800f8d6:	f003 0306 	and.w	r3, r3, #6
 800f8da:	2b04      	cmp	r3, #4
 800f8dc:	bf02      	ittt	eq
 800f8de:	68e5      	ldreq	r5, [r4, #12]
 800f8e0:	6833      	ldreq	r3, [r6, #0]
 800f8e2:	1aed      	subeq	r5, r5, r3
 800f8e4:	68a3      	ldr	r3, [r4, #8]
 800f8e6:	bf0c      	ite	eq
 800f8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8ec:	2500      	movne	r5, #0
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	bfc4      	itt	gt
 800f8f2:	1a9b      	subgt	r3, r3, r2
 800f8f4:	18ed      	addgt	r5, r5, r3
 800f8f6:	2600      	movs	r6, #0
 800f8f8:	341a      	adds	r4, #26
 800f8fa:	42b5      	cmp	r5, r6
 800f8fc:	d11a      	bne.n	800f934 <_printf_common+0xc8>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e008      	b.n	800f914 <_printf_common+0xa8>
 800f902:	2301      	movs	r3, #1
 800f904:	4652      	mov	r2, sl
 800f906:	4649      	mov	r1, r9
 800f908:	4638      	mov	r0, r7
 800f90a:	47c0      	blx	r8
 800f90c:	3001      	adds	r0, #1
 800f90e:	d103      	bne.n	800f918 <_printf_common+0xac>
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f918:	3501      	adds	r5, #1
 800f91a:	e7c6      	b.n	800f8aa <_printf_common+0x3e>
 800f91c:	18e1      	adds	r1, r4, r3
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	2030      	movs	r0, #48	; 0x30
 800f922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f926:	4422      	add	r2, r4
 800f928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f930:	3302      	adds	r3, #2
 800f932:	e7c7      	b.n	800f8c4 <_printf_common+0x58>
 800f934:	2301      	movs	r3, #1
 800f936:	4622      	mov	r2, r4
 800f938:	4649      	mov	r1, r9
 800f93a:	4638      	mov	r0, r7
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d0e6      	beq.n	800f910 <_printf_common+0xa4>
 800f942:	3601      	adds	r6, #1
 800f944:	e7d9      	b.n	800f8fa <_printf_common+0x8e>
	...

0800f948 <_printf_i>:
 800f948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	7e0f      	ldrb	r7, [r1, #24]
 800f94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f950:	2f78      	cmp	r7, #120	; 0x78
 800f952:	4691      	mov	r9, r2
 800f954:	4680      	mov	r8, r0
 800f956:	460c      	mov	r4, r1
 800f958:	469a      	mov	sl, r3
 800f95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f95e:	d807      	bhi.n	800f970 <_printf_i+0x28>
 800f960:	2f62      	cmp	r7, #98	; 0x62
 800f962:	d80a      	bhi.n	800f97a <_printf_i+0x32>
 800f964:	2f00      	cmp	r7, #0
 800f966:	f000 80d4 	beq.w	800fb12 <_printf_i+0x1ca>
 800f96a:	2f58      	cmp	r7, #88	; 0x58
 800f96c:	f000 80c0 	beq.w	800faf0 <_printf_i+0x1a8>
 800f970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f978:	e03a      	b.n	800f9f0 <_printf_i+0xa8>
 800f97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f97e:	2b15      	cmp	r3, #21
 800f980:	d8f6      	bhi.n	800f970 <_printf_i+0x28>
 800f982:	a101      	add	r1, pc, #4	; (adr r1, 800f988 <_printf_i+0x40>)
 800f984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f988:	0800f9e1 	.word	0x0800f9e1
 800f98c:	0800f9f5 	.word	0x0800f9f5
 800f990:	0800f971 	.word	0x0800f971
 800f994:	0800f971 	.word	0x0800f971
 800f998:	0800f971 	.word	0x0800f971
 800f99c:	0800f971 	.word	0x0800f971
 800f9a0:	0800f9f5 	.word	0x0800f9f5
 800f9a4:	0800f971 	.word	0x0800f971
 800f9a8:	0800f971 	.word	0x0800f971
 800f9ac:	0800f971 	.word	0x0800f971
 800f9b0:	0800f971 	.word	0x0800f971
 800f9b4:	0800faf9 	.word	0x0800faf9
 800f9b8:	0800fa21 	.word	0x0800fa21
 800f9bc:	0800fab3 	.word	0x0800fab3
 800f9c0:	0800f971 	.word	0x0800f971
 800f9c4:	0800f971 	.word	0x0800f971
 800f9c8:	0800fb1b 	.word	0x0800fb1b
 800f9cc:	0800f971 	.word	0x0800f971
 800f9d0:	0800fa21 	.word	0x0800fa21
 800f9d4:	0800f971 	.word	0x0800f971
 800f9d8:	0800f971 	.word	0x0800f971
 800f9dc:	0800fabb 	.word	0x0800fabb
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	1d1a      	adds	r2, r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	602a      	str	r2, [r5, #0]
 800f9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e09f      	b.n	800fb34 <_printf_i+0x1ec>
 800f9f4:	6820      	ldr	r0, [r4, #0]
 800f9f6:	682b      	ldr	r3, [r5, #0]
 800f9f8:	0607      	lsls	r7, r0, #24
 800f9fa:	f103 0104 	add.w	r1, r3, #4
 800f9fe:	6029      	str	r1, [r5, #0]
 800fa00:	d501      	bpl.n	800fa06 <_printf_i+0xbe>
 800fa02:	681e      	ldr	r6, [r3, #0]
 800fa04:	e003      	b.n	800fa0e <_printf_i+0xc6>
 800fa06:	0646      	lsls	r6, r0, #25
 800fa08:	d5fb      	bpl.n	800fa02 <_printf_i+0xba>
 800fa0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa0e:	2e00      	cmp	r6, #0
 800fa10:	da03      	bge.n	800fa1a <_printf_i+0xd2>
 800fa12:	232d      	movs	r3, #45	; 0x2d
 800fa14:	4276      	negs	r6, r6
 800fa16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa1a:	485a      	ldr	r0, [pc, #360]	; (800fb84 <_printf_i+0x23c>)
 800fa1c:	230a      	movs	r3, #10
 800fa1e:	e012      	b.n	800fa46 <_printf_i+0xfe>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	1d19      	adds	r1, r3, #4
 800fa26:	6029      	str	r1, [r5, #0]
 800fa28:	0605      	lsls	r5, r0, #24
 800fa2a:	d501      	bpl.n	800fa30 <_printf_i+0xe8>
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	e002      	b.n	800fa36 <_printf_i+0xee>
 800fa30:	0641      	lsls	r1, r0, #25
 800fa32:	d5fb      	bpl.n	800fa2c <_printf_i+0xe4>
 800fa34:	881e      	ldrh	r6, [r3, #0]
 800fa36:	4853      	ldr	r0, [pc, #332]	; (800fb84 <_printf_i+0x23c>)
 800fa38:	2f6f      	cmp	r7, #111	; 0x6f
 800fa3a:	bf0c      	ite	eq
 800fa3c:	2308      	moveq	r3, #8
 800fa3e:	230a      	movne	r3, #10
 800fa40:	2100      	movs	r1, #0
 800fa42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa46:	6865      	ldr	r5, [r4, #4]
 800fa48:	60a5      	str	r5, [r4, #8]
 800fa4a:	2d00      	cmp	r5, #0
 800fa4c:	bfa2      	ittt	ge
 800fa4e:	6821      	ldrge	r1, [r4, #0]
 800fa50:	f021 0104 	bicge.w	r1, r1, #4
 800fa54:	6021      	strge	r1, [r4, #0]
 800fa56:	b90e      	cbnz	r6, 800fa5c <_printf_i+0x114>
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	d04b      	beq.n	800faf4 <_printf_i+0x1ac>
 800fa5c:	4615      	mov	r5, r2
 800fa5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa62:	fb03 6711 	mls	r7, r3, r1, r6
 800fa66:	5dc7      	ldrb	r7, [r0, r7]
 800fa68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa6c:	4637      	mov	r7, r6
 800fa6e:	42bb      	cmp	r3, r7
 800fa70:	460e      	mov	r6, r1
 800fa72:	d9f4      	bls.n	800fa5e <_printf_i+0x116>
 800fa74:	2b08      	cmp	r3, #8
 800fa76:	d10b      	bne.n	800fa90 <_printf_i+0x148>
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	07de      	lsls	r6, r3, #31
 800fa7c:	d508      	bpl.n	800fa90 <_printf_i+0x148>
 800fa7e:	6923      	ldr	r3, [r4, #16]
 800fa80:	6861      	ldr	r1, [r4, #4]
 800fa82:	4299      	cmp	r1, r3
 800fa84:	bfde      	ittt	le
 800fa86:	2330      	movle	r3, #48	; 0x30
 800fa88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa90:	1b52      	subs	r2, r2, r5
 800fa92:	6122      	str	r2, [r4, #16]
 800fa94:	f8cd a000 	str.w	sl, [sp]
 800fa98:	464b      	mov	r3, r9
 800fa9a:	aa03      	add	r2, sp, #12
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4640      	mov	r0, r8
 800faa0:	f7ff fee4 	bl	800f86c <_printf_common>
 800faa4:	3001      	adds	r0, #1
 800faa6:	d14a      	bne.n	800fb3e <_printf_i+0x1f6>
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	b004      	add	sp, #16
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	f043 0320 	orr.w	r3, r3, #32
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	4833      	ldr	r0, [pc, #204]	; (800fb88 <_printf_i+0x240>)
 800fabc:	2778      	movs	r7, #120	; 0x78
 800fabe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	6829      	ldr	r1, [r5, #0]
 800fac6:	061f      	lsls	r7, r3, #24
 800fac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800facc:	d402      	bmi.n	800fad4 <_printf_i+0x18c>
 800face:	065f      	lsls	r7, r3, #25
 800fad0:	bf48      	it	mi
 800fad2:	b2b6      	uxthmi	r6, r6
 800fad4:	07df      	lsls	r7, r3, #31
 800fad6:	bf48      	it	mi
 800fad8:	f043 0320 	orrmi.w	r3, r3, #32
 800fadc:	6029      	str	r1, [r5, #0]
 800fade:	bf48      	it	mi
 800fae0:	6023      	strmi	r3, [r4, #0]
 800fae2:	b91e      	cbnz	r6, 800faec <_printf_i+0x1a4>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	f023 0320 	bic.w	r3, r3, #32
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	2310      	movs	r3, #16
 800faee:	e7a7      	b.n	800fa40 <_printf_i+0xf8>
 800faf0:	4824      	ldr	r0, [pc, #144]	; (800fb84 <_printf_i+0x23c>)
 800faf2:	e7e4      	b.n	800fabe <_printf_i+0x176>
 800faf4:	4615      	mov	r5, r2
 800faf6:	e7bd      	b.n	800fa74 <_printf_i+0x12c>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	6826      	ldr	r6, [r4, #0]
 800fafc:	6961      	ldr	r1, [r4, #20]
 800fafe:	1d18      	adds	r0, r3, #4
 800fb00:	6028      	str	r0, [r5, #0]
 800fb02:	0635      	lsls	r5, r6, #24
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	d501      	bpl.n	800fb0c <_printf_i+0x1c4>
 800fb08:	6019      	str	r1, [r3, #0]
 800fb0a:	e002      	b.n	800fb12 <_printf_i+0x1ca>
 800fb0c:	0670      	lsls	r0, r6, #25
 800fb0e:	d5fb      	bpl.n	800fb08 <_printf_i+0x1c0>
 800fb10:	8019      	strh	r1, [r3, #0]
 800fb12:	2300      	movs	r3, #0
 800fb14:	6123      	str	r3, [r4, #16]
 800fb16:	4615      	mov	r5, r2
 800fb18:	e7bc      	b.n	800fa94 <_printf_i+0x14c>
 800fb1a:	682b      	ldr	r3, [r5, #0]
 800fb1c:	1d1a      	adds	r2, r3, #4
 800fb1e:	602a      	str	r2, [r5, #0]
 800fb20:	681d      	ldr	r5, [r3, #0]
 800fb22:	6862      	ldr	r2, [r4, #4]
 800fb24:	2100      	movs	r1, #0
 800fb26:	4628      	mov	r0, r5
 800fb28:	f7f0 fb72 	bl	8000210 <memchr>
 800fb2c:	b108      	cbz	r0, 800fb32 <_printf_i+0x1ea>
 800fb2e:	1b40      	subs	r0, r0, r5
 800fb30:	6060      	str	r0, [r4, #4]
 800fb32:	6863      	ldr	r3, [r4, #4]
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	2300      	movs	r3, #0
 800fb38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb3c:	e7aa      	b.n	800fa94 <_printf_i+0x14c>
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	462a      	mov	r2, r5
 800fb42:	4649      	mov	r1, r9
 800fb44:	4640      	mov	r0, r8
 800fb46:	47d0      	blx	sl
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d0ad      	beq.n	800faa8 <_printf_i+0x160>
 800fb4c:	6823      	ldr	r3, [r4, #0]
 800fb4e:	079b      	lsls	r3, r3, #30
 800fb50:	d413      	bmi.n	800fb7a <_printf_i+0x232>
 800fb52:	68e0      	ldr	r0, [r4, #12]
 800fb54:	9b03      	ldr	r3, [sp, #12]
 800fb56:	4298      	cmp	r0, r3
 800fb58:	bfb8      	it	lt
 800fb5a:	4618      	movlt	r0, r3
 800fb5c:	e7a6      	b.n	800faac <_printf_i+0x164>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	4632      	mov	r2, r6
 800fb62:	4649      	mov	r1, r9
 800fb64:	4640      	mov	r0, r8
 800fb66:	47d0      	blx	sl
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d09d      	beq.n	800faa8 <_printf_i+0x160>
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	68e3      	ldr	r3, [r4, #12]
 800fb70:	9903      	ldr	r1, [sp, #12]
 800fb72:	1a5b      	subs	r3, r3, r1
 800fb74:	42ab      	cmp	r3, r5
 800fb76:	dcf2      	bgt.n	800fb5e <_printf_i+0x216>
 800fb78:	e7eb      	b.n	800fb52 <_printf_i+0x20a>
 800fb7a:	2500      	movs	r5, #0
 800fb7c:	f104 0619 	add.w	r6, r4, #25
 800fb80:	e7f5      	b.n	800fb6e <_printf_i+0x226>
 800fb82:	bf00      	nop
 800fb84:	08010c97 	.word	0x08010c97
 800fb88:	08010ca8 	.word	0x08010ca8

0800fb8c <__sflush_r>:
 800fb8c:	898a      	ldrh	r2, [r1, #12]
 800fb8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb92:	4605      	mov	r5, r0
 800fb94:	0710      	lsls	r0, r2, #28
 800fb96:	460c      	mov	r4, r1
 800fb98:	d458      	bmi.n	800fc4c <__sflush_r+0xc0>
 800fb9a:	684b      	ldr	r3, [r1, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	dc05      	bgt.n	800fbac <__sflush_r+0x20>
 800fba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	dc02      	bgt.n	800fbac <__sflush_r+0x20>
 800fba6:	2000      	movs	r0, #0
 800fba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	d0f9      	beq.n	800fba6 <__sflush_r+0x1a>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbb8:	682f      	ldr	r7, [r5, #0]
 800fbba:	6a21      	ldr	r1, [r4, #32]
 800fbbc:	602b      	str	r3, [r5, #0]
 800fbbe:	d032      	beq.n	800fc26 <__sflush_r+0x9a>
 800fbc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbc2:	89a3      	ldrh	r3, [r4, #12]
 800fbc4:	075a      	lsls	r2, r3, #29
 800fbc6:	d505      	bpl.n	800fbd4 <__sflush_r+0x48>
 800fbc8:	6863      	ldr	r3, [r4, #4]
 800fbca:	1ac0      	subs	r0, r0, r3
 800fbcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbce:	b10b      	cbz	r3, 800fbd4 <__sflush_r+0x48>
 800fbd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbd2:	1ac0      	subs	r0, r0, r3
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbda:	6a21      	ldr	r1, [r4, #32]
 800fbdc:	4628      	mov	r0, r5
 800fbde:	47b0      	blx	r6
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	89a3      	ldrh	r3, [r4, #12]
 800fbe4:	d106      	bne.n	800fbf4 <__sflush_r+0x68>
 800fbe6:	6829      	ldr	r1, [r5, #0]
 800fbe8:	291d      	cmp	r1, #29
 800fbea:	d82b      	bhi.n	800fc44 <__sflush_r+0xb8>
 800fbec:	4a29      	ldr	r2, [pc, #164]	; (800fc94 <__sflush_r+0x108>)
 800fbee:	410a      	asrs	r2, r1
 800fbf0:	07d6      	lsls	r6, r2, #31
 800fbf2:	d427      	bmi.n	800fc44 <__sflush_r+0xb8>
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	6062      	str	r2, [r4, #4]
 800fbf8:	04d9      	lsls	r1, r3, #19
 800fbfa:	6922      	ldr	r2, [r4, #16]
 800fbfc:	6022      	str	r2, [r4, #0]
 800fbfe:	d504      	bpl.n	800fc0a <__sflush_r+0x7e>
 800fc00:	1c42      	adds	r2, r0, #1
 800fc02:	d101      	bne.n	800fc08 <__sflush_r+0x7c>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	b903      	cbnz	r3, 800fc0a <__sflush_r+0x7e>
 800fc08:	6560      	str	r0, [r4, #84]	; 0x54
 800fc0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc0c:	602f      	str	r7, [r5, #0]
 800fc0e:	2900      	cmp	r1, #0
 800fc10:	d0c9      	beq.n	800fba6 <__sflush_r+0x1a>
 800fc12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc16:	4299      	cmp	r1, r3
 800fc18:	d002      	beq.n	800fc20 <__sflush_r+0x94>
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f7ff fbce 	bl	800f3bc <_free_r>
 800fc20:	2000      	movs	r0, #0
 800fc22:	6360      	str	r0, [r4, #52]	; 0x34
 800fc24:	e7c0      	b.n	800fba8 <__sflush_r+0x1c>
 800fc26:	2301      	movs	r3, #1
 800fc28:	4628      	mov	r0, r5
 800fc2a:	47b0      	blx	r6
 800fc2c:	1c41      	adds	r1, r0, #1
 800fc2e:	d1c8      	bne.n	800fbc2 <__sflush_r+0x36>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0c5      	beq.n	800fbc2 <__sflush_r+0x36>
 800fc36:	2b1d      	cmp	r3, #29
 800fc38:	d001      	beq.n	800fc3e <__sflush_r+0xb2>
 800fc3a:	2b16      	cmp	r3, #22
 800fc3c:	d101      	bne.n	800fc42 <__sflush_r+0xb6>
 800fc3e:	602f      	str	r7, [r5, #0]
 800fc40:	e7b1      	b.n	800fba6 <__sflush_r+0x1a>
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc48:	81a3      	strh	r3, [r4, #12]
 800fc4a:	e7ad      	b.n	800fba8 <__sflush_r+0x1c>
 800fc4c:	690f      	ldr	r7, [r1, #16]
 800fc4e:	2f00      	cmp	r7, #0
 800fc50:	d0a9      	beq.n	800fba6 <__sflush_r+0x1a>
 800fc52:	0793      	lsls	r3, r2, #30
 800fc54:	680e      	ldr	r6, [r1, #0]
 800fc56:	bf08      	it	eq
 800fc58:	694b      	ldreq	r3, [r1, #20]
 800fc5a:	600f      	str	r7, [r1, #0]
 800fc5c:	bf18      	it	ne
 800fc5e:	2300      	movne	r3, #0
 800fc60:	eba6 0807 	sub.w	r8, r6, r7
 800fc64:	608b      	str	r3, [r1, #8]
 800fc66:	f1b8 0f00 	cmp.w	r8, #0
 800fc6a:	dd9c      	ble.n	800fba6 <__sflush_r+0x1a>
 800fc6c:	6a21      	ldr	r1, [r4, #32]
 800fc6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc70:	4643      	mov	r3, r8
 800fc72:	463a      	mov	r2, r7
 800fc74:	4628      	mov	r0, r5
 800fc76:	47b0      	blx	r6
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	dc06      	bgt.n	800fc8a <__sflush_r+0xfe>
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	f04f 30ff 	mov.w	r0, #4294967295
 800fc88:	e78e      	b.n	800fba8 <__sflush_r+0x1c>
 800fc8a:	4407      	add	r7, r0
 800fc8c:	eba8 0800 	sub.w	r8, r8, r0
 800fc90:	e7e9      	b.n	800fc66 <__sflush_r+0xda>
 800fc92:	bf00      	nop
 800fc94:	dfbffffe 	.word	0xdfbffffe

0800fc98 <_fflush_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	690b      	ldr	r3, [r1, #16]
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	460c      	mov	r4, r1
 800fca0:	b913      	cbnz	r3, 800fca8 <_fflush_r+0x10>
 800fca2:	2500      	movs	r5, #0
 800fca4:	4628      	mov	r0, r5
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	b118      	cbz	r0, 800fcb2 <_fflush_r+0x1a>
 800fcaa:	6a03      	ldr	r3, [r0, #32]
 800fcac:	b90b      	cbnz	r3, 800fcb2 <_fflush_r+0x1a>
 800fcae:	f7ff f9dd 	bl	800f06c <__sinit>
 800fcb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d0f3      	beq.n	800fca2 <_fflush_r+0xa>
 800fcba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcbc:	07d0      	lsls	r0, r2, #31
 800fcbe:	d404      	bmi.n	800fcca <_fflush_r+0x32>
 800fcc0:	0599      	lsls	r1, r3, #22
 800fcc2:	d402      	bmi.n	800fcca <_fflush_r+0x32>
 800fcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcc6:	f7ff fb51 	bl	800f36c <__retarget_lock_acquire_recursive>
 800fcca:	4628      	mov	r0, r5
 800fccc:	4621      	mov	r1, r4
 800fcce:	f7ff ff5d 	bl	800fb8c <__sflush_r>
 800fcd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcd4:	07da      	lsls	r2, r3, #31
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	d4e4      	bmi.n	800fca4 <_fflush_r+0xc>
 800fcda:	89a3      	ldrh	r3, [r4, #12]
 800fcdc:	059b      	lsls	r3, r3, #22
 800fcde:	d4e1      	bmi.n	800fca4 <_fflush_r+0xc>
 800fce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fce2:	f7ff fb44 	bl	800f36e <__retarget_lock_release_recursive>
 800fce6:	e7dd      	b.n	800fca4 <_fflush_r+0xc>

0800fce8 <fiprintf>:
 800fce8:	b40e      	push	{r1, r2, r3}
 800fcea:	b503      	push	{r0, r1, lr}
 800fcec:	4601      	mov	r1, r0
 800fcee:	ab03      	add	r3, sp, #12
 800fcf0:	4805      	ldr	r0, [pc, #20]	; (800fd08 <fiprintf+0x20>)
 800fcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcf6:	6800      	ldr	r0, [r0, #0]
 800fcf8:	9301      	str	r3, [sp, #4]
 800fcfa:	f000 f89f 	bl	800fe3c <_vfiprintf_r>
 800fcfe:	b002      	add	sp, #8
 800fd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd04:	b003      	add	sp, #12
 800fd06:	4770      	bx	lr
 800fd08:	20000194 	.word	0x20000194

0800fd0c <memmove>:
 800fd0c:	4288      	cmp	r0, r1
 800fd0e:	b510      	push	{r4, lr}
 800fd10:	eb01 0402 	add.w	r4, r1, r2
 800fd14:	d902      	bls.n	800fd1c <memmove+0x10>
 800fd16:	4284      	cmp	r4, r0
 800fd18:	4623      	mov	r3, r4
 800fd1a:	d807      	bhi.n	800fd2c <memmove+0x20>
 800fd1c:	1e43      	subs	r3, r0, #1
 800fd1e:	42a1      	cmp	r1, r4
 800fd20:	d008      	beq.n	800fd34 <memmove+0x28>
 800fd22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd2a:	e7f8      	b.n	800fd1e <memmove+0x12>
 800fd2c:	4402      	add	r2, r0
 800fd2e:	4601      	mov	r1, r0
 800fd30:	428a      	cmp	r2, r1
 800fd32:	d100      	bne.n	800fd36 <memmove+0x2a>
 800fd34:	bd10      	pop	{r4, pc}
 800fd36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd3e:	e7f7      	b.n	800fd30 <memmove+0x24>

0800fd40 <_sbrk_r>:
 800fd40:	b538      	push	{r3, r4, r5, lr}
 800fd42:	4d06      	ldr	r5, [pc, #24]	; (800fd5c <_sbrk_r+0x1c>)
 800fd44:	2300      	movs	r3, #0
 800fd46:	4604      	mov	r4, r0
 800fd48:	4608      	mov	r0, r1
 800fd4a:	602b      	str	r3, [r5, #0]
 800fd4c:	f7f2 fe02 	bl	8002954 <_sbrk>
 800fd50:	1c43      	adds	r3, r0, #1
 800fd52:	d102      	bne.n	800fd5a <_sbrk_r+0x1a>
 800fd54:	682b      	ldr	r3, [r5, #0]
 800fd56:	b103      	cbz	r3, 800fd5a <_sbrk_r+0x1a>
 800fd58:	6023      	str	r3, [r4, #0]
 800fd5a:	bd38      	pop	{r3, r4, r5, pc}
 800fd5c:	2000457c 	.word	0x2000457c

0800fd60 <memcpy>:
 800fd60:	440a      	add	r2, r1
 800fd62:	4291      	cmp	r1, r2
 800fd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd68:	d100      	bne.n	800fd6c <memcpy+0xc>
 800fd6a:	4770      	bx	lr
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd76:	4291      	cmp	r1, r2
 800fd78:	d1f9      	bne.n	800fd6e <memcpy+0xe>
 800fd7a:	bd10      	pop	{r4, pc}

0800fd7c <abort>:
 800fd7c:	b508      	push	{r3, lr}
 800fd7e:	2006      	movs	r0, #6
 800fd80:	f000 fa34 	bl	80101ec <raise>
 800fd84:	2001      	movs	r0, #1
 800fd86:	f7f2 fd6d 	bl	8002864 <_exit>

0800fd8a <_realloc_r>:
 800fd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8e:	4680      	mov	r8, r0
 800fd90:	4614      	mov	r4, r2
 800fd92:	460e      	mov	r6, r1
 800fd94:	b921      	cbnz	r1, 800fda0 <_realloc_r+0x16>
 800fd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	f7ff bb82 	b.w	800f4a4 <_malloc_r>
 800fda0:	b92a      	cbnz	r2, 800fdae <_realloc_r+0x24>
 800fda2:	f7ff fb0b 	bl	800f3bc <_free_r>
 800fda6:	4625      	mov	r5, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdae:	f000 fa39 	bl	8010224 <_malloc_usable_size_r>
 800fdb2:	4284      	cmp	r4, r0
 800fdb4:	4607      	mov	r7, r0
 800fdb6:	d802      	bhi.n	800fdbe <_realloc_r+0x34>
 800fdb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdbc:	d812      	bhi.n	800fde4 <_realloc_r+0x5a>
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	4640      	mov	r0, r8
 800fdc2:	f7ff fb6f 	bl	800f4a4 <_malloc_r>
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d0ed      	beq.n	800fda8 <_realloc_r+0x1e>
 800fdcc:	42bc      	cmp	r4, r7
 800fdce:	4622      	mov	r2, r4
 800fdd0:	4631      	mov	r1, r6
 800fdd2:	bf28      	it	cs
 800fdd4:	463a      	movcs	r2, r7
 800fdd6:	f7ff ffc3 	bl	800fd60 <memcpy>
 800fdda:	4631      	mov	r1, r6
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff faed 	bl	800f3bc <_free_r>
 800fde2:	e7e1      	b.n	800fda8 <_realloc_r+0x1e>
 800fde4:	4635      	mov	r5, r6
 800fde6:	e7df      	b.n	800fda8 <_realloc_r+0x1e>

0800fde8 <__sfputc_r>:
 800fde8:	6893      	ldr	r3, [r2, #8]
 800fdea:	3b01      	subs	r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	b410      	push	{r4}
 800fdf0:	6093      	str	r3, [r2, #8]
 800fdf2:	da08      	bge.n	800fe06 <__sfputc_r+0x1e>
 800fdf4:	6994      	ldr	r4, [r2, #24]
 800fdf6:	42a3      	cmp	r3, r4
 800fdf8:	db01      	blt.n	800fdfe <__sfputc_r+0x16>
 800fdfa:	290a      	cmp	r1, #10
 800fdfc:	d103      	bne.n	800fe06 <__sfputc_r+0x1e>
 800fdfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe02:	f000 b935 	b.w	8010070 <__swbuf_r>
 800fe06:	6813      	ldr	r3, [r2, #0]
 800fe08:	1c58      	adds	r0, r3, #1
 800fe0a:	6010      	str	r0, [r2, #0]
 800fe0c:	7019      	strb	r1, [r3, #0]
 800fe0e:	4608      	mov	r0, r1
 800fe10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <__sfputs_r>:
 800fe16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe18:	4606      	mov	r6, r0
 800fe1a:	460f      	mov	r7, r1
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	18d5      	adds	r5, r2, r3
 800fe20:	42ac      	cmp	r4, r5
 800fe22:	d101      	bne.n	800fe28 <__sfputs_r+0x12>
 800fe24:	2000      	movs	r0, #0
 800fe26:	e007      	b.n	800fe38 <__sfputs_r+0x22>
 800fe28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe2c:	463a      	mov	r2, r7
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f7ff ffda 	bl	800fde8 <__sfputc_r>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	d1f3      	bne.n	800fe20 <__sfputs_r+0xa>
 800fe38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe3c <_vfiprintf_r>:
 800fe3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe40:	460d      	mov	r5, r1
 800fe42:	b09d      	sub	sp, #116	; 0x74
 800fe44:	4614      	mov	r4, r2
 800fe46:	4698      	mov	r8, r3
 800fe48:	4606      	mov	r6, r0
 800fe4a:	b118      	cbz	r0, 800fe54 <_vfiprintf_r+0x18>
 800fe4c:	6a03      	ldr	r3, [r0, #32]
 800fe4e:	b90b      	cbnz	r3, 800fe54 <_vfiprintf_r+0x18>
 800fe50:	f7ff f90c 	bl	800f06c <__sinit>
 800fe54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe56:	07d9      	lsls	r1, r3, #31
 800fe58:	d405      	bmi.n	800fe66 <_vfiprintf_r+0x2a>
 800fe5a:	89ab      	ldrh	r3, [r5, #12]
 800fe5c:	059a      	lsls	r2, r3, #22
 800fe5e:	d402      	bmi.n	800fe66 <_vfiprintf_r+0x2a>
 800fe60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe62:	f7ff fa83 	bl	800f36c <__retarget_lock_acquire_recursive>
 800fe66:	89ab      	ldrh	r3, [r5, #12]
 800fe68:	071b      	lsls	r3, r3, #28
 800fe6a:	d501      	bpl.n	800fe70 <_vfiprintf_r+0x34>
 800fe6c:	692b      	ldr	r3, [r5, #16]
 800fe6e:	b99b      	cbnz	r3, 800fe98 <_vfiprintf_r+0x5c>
 800fe70:	4629      	mov	r1, r5
 800fe72:	4630      	mov	r0, r6
 800fe74:	f000 f93a 	bl	80100ec <__swsetup_r>
 800fe78:	b170      	cbz	r0, 800fe98 <_vfiprintf_r+0x5c>
 800fe7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe7c:	07dc      	lsls	r4, r3, #31
 800fe7e:	d504      	bpl.n	800fe8a <_vfiprintf_r+0x4e>
 800fe80:	f04f 30ff 	mov.w	r0, #4294967295
 800fe84:	b01d      	add	sp, #116	; 0x74
 800fe86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8a:	89ab      	ldrh	r3, [r5, #12]
 800fe8c:	0598      	lsls	r0, r3, #22
 800fe8e:	d4f7      	bmi.n	800fe80 <_vfiprintf_r+0x44>
 800fe90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe92:	f7ff fa6c 	bl	800f36e <__retarget_lock_release_recursive>
 800fe96:	e7f3      	b.n	800fe80 <_vfiprintf_r+0x44>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe9c:	2320      	movs	r3, #32
 800fe9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fea2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fea6:	2330      	movs	r3, #48	; 0x30
 800fea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801005c <_vfiprintf_r+0x220>
 800feac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feb0:	f04f 0901 	mov.w	r9, #1
 800feb4:	4623      	mov	r3, r4
 800feb6:	469a      	mov	sl, r3
 800feb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800febc:	b10a      	cbz	r2, 800fec2 <_vfiprintf_r+0x86>
 800febe:	2a25      	cmp	r2, #37	; 0x25
 800fec0:	d1f9      	bne.n	800feb6 <_vfiprintf_r+0x7a>
 800fec2:	ebba 0b04 	subs.w	fp, sl, r4
 800fec6:	d00b      	beq.n	800fee0 <_vfiprintf_r+0xa4>
 800fec8:	465b      	mov	r3, fp
 800feca:	4622      	mov	r2, r4
 800fecc:	4629      	mov	r1, r5
 800fece:	4630      	mov	r0, r6
 800fed0:	f7ff ffa1 	bl	800fe16 <__sfputs_r>
 800fed4:	3001      	adds	r0, #1
 800fed6:	f000 80a9 	beq.w	801002c <_vfiprintf_r+0x1f0>
 800feda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fedc:	445a      	add	r2, fp
 800fede:	9209      	str	r2, [sp, #36]	; 0x24
 800fee0:	f89a 3000 	ldrb.w	r3, [sl]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 80a1 	beq.w	801002c <_vfiprintf_r+0x1f0>
 800feea:	2300      	movs	r3, #0
 800feec:	f04f 32ff 	mov.w	r2, #4294967295
 800fef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fef4:	f10a 0a01 	add.w	sl, sl, #1
 800fef8:	9304      	str	r3, [sp, #16]
 800fefa:	9307      	str	r3, [sp, #28]
 800fefc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff00:	931a      	str	r3, [sp, #104]	; 0x68
 800ff02:	4654      	mov	r4, sl
 800ff04:	2205      	movs	r2, #5
 800ff06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff0a:	4854      	ldr	r0, [pc, #336]	; (801005c <_vfiprintf_r+0x220>)
 800ff0c:	f7f0 f980 	bl	8000210 <memchr>
 800ff10:	9a04      	ldr	r2, [sp, #16]
 800ff12:	b9d8      	cbnz	r0, 800ff4c <_vfiprintf_r+0x110>
 800ff14:	06d1      	lsls	r1, r2, #27
 800ff16:	bf44      	itt	mi
 800ff18:	2320      	movmi	r3, #32
 800ff1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff1e:	0713      	lsls	r3, r2, #28
 800ff20:	bf44      	itt	mi
 800ff22:	232b      	movmi	r3, #43	; 0x2b
 800ff24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff28:	f89a 3000 	ldrb.w	r3, [sl]
 800ff2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff2e:	d015      	beq.n	800ff5c <_vfiprintf_r+0x120>
 800ff30:	9a07      	ldr	r2, [sp, #28]
 800ff32:	4654      	mov	r4, sl
 800ff34:	2000      	movs	r0, #0
 800ff36:	f04f 0c0a 	mov.w	ip, #10
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff40:	3b30      	subs	r3, #48	; 0x30
 800ff42:	2b09      	cmp	r3, #9
 800ff44:	d94d      	bls.n	800ffe2 <_vfiprintf_r+0x1a6>
 800ff46:	b1b0      	cbz	r0, 800ff76 <_vfiprintf_r+0x13a>
 800ff48:	9207      	str	r2, [sp, #28]
 800ff4a:	e014      	b.n	800ff76 <_vfiprintf_r+0x13a>
 800ff4c:	eba0 0308 	sub.w	r3, r0, r8
 800ff50:	fa09 f303 	lsl.w	r3, r9, r3
 800ff54:	4313      	orrs	r3, r2
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	46a2      	mov	sl, r4
 800ff5a:	e7d2      	b.n	800ff02 <_vfiprintf_r+0xc6>
 800ff5c:	9b03      	ldr	r3, [sp, #12]
 800ff5e:	1d19      	adds	r1, r3, #4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	9103      	str	r1, [sp, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bfbb      	ittet	lt
 800ff68:	425b      	neglt	r3, r3
 800ff6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff6e:	9307      	strge	r3, [sp, #28]
 800ff70:	9307      	strlt	r3, [sp, #28]
 800ff72:	bfb8      	it	lt
 800ff74:	9204      	strlt	r2, [sp, #16]
 800ff76:	7823      	ldrb	r3, [r4, #0]
 800ff78:	2b2e      	cmp	r3, #46	; 0x2e
 800ff7a:	d10c      	bne.n	800ff96 <_vfiprintf_r+0x15a>
 800ff7c:	7863      	ldrb	r3, [r4, #1]
 800ff7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff80:	d134      	bne.n	800ffec <_vfiprintf_r+0x1b0>
 800ff82:	9b03      	ldr	r3, [sp, #12]
 800ff84:	1d1a      	adds	r2, r3, #4
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	9203      	str	r2, [sp, #12]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	bfb8      	it	lt
 800ff8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff92:	3402      	adds	r4, #2
 800ff94:	9305      	str	r3, [sp, #20]
 800ff96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801006c <_vfiprintf_r+0x230>
 800ff9a:	7821      	ldrb	r1, [r4, #0]
 800ff9c:	2203      	movs	r2, #3
 800ff9e:	4650      	mov	r0, sl
 800ffa0:	f7f0 f936 	bl	8000210 <memchr>
 800ffa4:	b138      	cbz	r0, 800ffb6 <_vfiprintf_r+0x17a>
 800ffa6:	9b04      	ldr	r3, [sp, #16]
 800ffa8:	eba0 000a 	sub.w	r0, r0, sl
 800ffac:	2240      	movs	r2, #64	; 0x40
 800ffae:	4082      	lsls	r2, r0
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	3401      	adds	r4, #1
 800ffb4:	9304      	str	r3, [sp, #16]
 800ffb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffba:	4829      	ldr	r0, [pc, #164]	; (8010060 <_vfiprintf_r+0x224>)
 800ffbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffc0:	2206      	movs	r2, #6
 800ffc2:	f7f0 f925 	bl	8000210 <memchr>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d03f      	beq.n	801004a <_vfiprintf_r+0x20e>
 800ffca:	4b26      	ldr	r3, [pc, #152]	; (8010064 <_vfiprintf_r+0x228>)
 800ffcc:	bb1b      	cbnz	r3, 8010016 <_vfiprintf_r+0x1da>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	3307      	adds	r3, #7
 800ffd2:	f023 0307 	bic.w	r3, r3, #7
 800ffd6:	3308      	adds	r3, #8
 800ffd8:	9303      	str	r3, [sp, #12]
 800ffda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffdc:	443b      	add	r3, r7
 800ffde:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe0:	e768      	b.n	800feb4 <_vfiprintf_r+0x78>
 800ffe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	2001      	movs	r0, #1
 800ffea:	e7a6      	b.n	800ff3a <_vfiprintf_r+0xfe>
 800ffec:	2300      	movs	r3, #0
 800ffee:	3401      	adds	r4, #1
 800fff0:	9305      	str	r3, [sp, #20]
 800fff2:	4619      	mov	r1, r3
 800fff4:	f04f 0c0a 	mov.w	ip, #10
 800fff8:	4620      	mov	r0, r4
 800fffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fffe:	3a30      	subs	r2, #48	; 0x30
 8010000:	2a09      	cmp	r2, #9
 8010002:	d903      	bls.n	801000c <_vfiprintf_r+0x1d0>
 8010004:	2b00      	cmp	r3, #0
 8010006:	d0c6      	beq.n	800ff96 <_vfiprintf_r+0x15a>
 8010008:	9105      	str	r1, [sp, #20]
 801000a:	e7c4      	b.n	800ff96 <_vfiprintf_r+0x15a>
 801000c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010010:	4604      	mov	r4, r0
 8010012:	2301      	movs	r3, #1
 8010014:	e7f0      	b.n	800fff8 <_vfiprintf_r+0x1bc>
 8010016:	ab03      	add	r3, sp, #12
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	462a      	mov	r2, r5
 801001c:	4b12      	ldr	r3, [pc, #72]	; (8010068 <_vfiprintf_r+0x22c>)
 801001e:	a904      	add	r1, sp, #16
 8010020:	4630      	mov	r0, r6
 8010022:	f3af 8000 	nop.w
 8010026:	4607      	mov	r7, r0
 8010028:	1c78      	adds	r0, r7, #1
 801002a:	d1d6      	bne.n	800ffda <_vfiprintf_r+0x19e>
 801002c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801002e:	07d9      	lsls	r1, r3, #31
 8010030:	d405      	bmi.n	801003e <_vfiprintf_r+0x202>
 8010032:	89ab      	ldrh	r3, [r5, #12]
 8010034:	059a      	lsls	r2, r3, #22
 8010036:	d402      	bmi.n	801003e <_vfiprintf_r+0x202>
 8010038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801003a:	f7ff f998 	bl	800f36e <__retarget_lock_release_recursive>
 801003e:	89ab      	ldrh	r3, [r5, #12]
 8010040:	065b      	lsls	r3, r3, #25
 8010042:	f53f af1d 	bmi.w	800fe80 <_vfiprintf_r+0x44>
 8010046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010048:	e71c      	b.n	800fe84 <_vfiprintf_r+0x48>
 801004a:	ab03      	add	r3, sp, #12
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	462a      	mov	r2, r5
 8010050:	4b05      	ldr	r3, [pc, #20]	; (8010068 <_vfiprintf_r+0x22c>)
 8010052:	a904      	add	r1, sp, #16
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff fc77 	bl	800f948 <_printf_i>
 801005a:	e7e4      	b.n	8010026 <_vfiprintf_r+0x1ea>
 801005c:	08010c86 	.word	0x08010c86
 8010060:	08010c90 	.word	0x08010c90
 8010064:	00000000 	.word	0x00000000
 8010068:	0800fe17 	.word	0x0800fe17
 801006c:	08010c8c 	.word	0x08010c8c

08010070 <__swbuf_r>:
 8010070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010072:	460e      	mov	r6, r1
 8010074:	4614      	mov	r4, r2
 8010076:	4605      	mov	r5, r0
 8010078:	b118      	cbz	r0, 8010082 <__swbuf_r+0x12>
 801007a:	6a03      	ldr	r3, [r0, #32]
 801007c:	b90b      	cbnz	r3, 8010082 <__swbuf_r+0x12>
 801007e:	f7fe fff5 	bl	800f06c <__sinit>
 8010082:	69a3      	ldr	r3, [r4, #24]
 8010084:	60a3      	str	r3, [r4, #8]
 8010086:	89a3      	ldrh	r3, [r4, #12]
 8010088:	071a      	lsls	r2, r3, #28
 801008a:	d525      	bpl.n	80100d8 <__swbuf_r+0x68>
 801008c:	6923      	ldr	r3, [r4, #16]
 801008e:	b31b      	cbz	r3, 80100d8 <__swbuf_r+0x68>
 8010090:	6823      	ldr	r3, [r4, #0]
 8010092:	6922      	ldr	r2, [r4, #16]
 8010094:	1a98      	subs	r0, r3, r2
 8010096:	6963      	ldr	r3, [r4, #20]
 8010098:	b2f6      	uxtb	r6, r6
 801009a:	4283      	cmp	r3, r0
 801009c:	4637      	mov	r7, r6
 801009e:	dc04      	bgt.n	80100aa <__swbuf_r+0x3a>
 80100a0:	4621      	mov	r1, r4
 80100a2:	4628      	mov	r0, r5
 80100a4:	f7ff fdf8 	bl	800fc98 <_fflush_r>
 80100a8:	b9e0      	cbnz	r0, 80100e4 <__swbuf_r+0x74>
 80100aa:	68a3      	ldr	r3, [r4, #8]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	60a3      	str	r3, [r4, #8]
 80100b0:	6823      	ldr	r3, [r4, #0]
 80100b2:	1c5a      	adds	r2, r3, #1
 80100b4:	6022      	str	r2, [r4, #0]
 80100b6:	701e      	strb	r6, [r3, #0]
 80100b8:	6962      	ldr	r2, [r4, #20]
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	429a      	cmp	r2, r3
 80100be:	d004      	beq.n	80100ca <__swbuf_r+0x5a>
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	07db      	lsls	r3, r3, #31
 80100c4:	d506      	bpl.n	80100d4 <__swbuf_r+0x64>
 80100c6:	2e0a      	cmp	r6, #10
 80100c8:	d104      	bne.n	80100d4 <__swbuf_r+0x64>
 80100ca:	4621      	mov	r1, r4
 80100cc:	4628      	mov	r0, r5
 80100ce:	f7ff fde3 	bl	800fc98 <_fflush_r>
 80100d2:	b938      	cbnz	r0, 80100e4 <__swbuf_r+0x74>
 80100d4:	4638      	mov	r0, r7
 80100d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100d8:	4621      	mov	r1, r4
 80100da:	4628      	mov	r0, r5
 80100dc:	f000 f806 	bl	80100ec <__swsetup_r>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d0d5      	beq.n	8010090 <__swbuf_r+0x20>
 80100e4:	f04f 37ff 	mov.w	r7, #4294967295
 80100e8:	e7f4      	b.n	80100d4 <__swbuf_r+0x64>
	...

080100ec <__swsetup_r>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	4b2a      	ldr	r3, [pc, #168]	; (8010198 <__swsetup_r+0xac>)
 80100f0:	4605      	mov	r5, r0
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	460c      	mov	r4, r1
 80100f6:	b118      	cbz	r0, 8010100 <__swsetup_r+0x14>
 80100f8:	6a03      	ldr	r3, [r0, #32]
 80100fa:	b90b      	cbnz	r3, 8010100 <__swsetup_r+0x14>
 80100fc:	f7fe ffb6 	bl	800f06c <__sinit>
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010106:	0718      	lsls	r0, r3, #28
 8010108:	d422      	bmi.n	8010150 <__swsetup_r+0x64>
 801010a:	06d9      	lsls	r1, r3, #27
 801010c:	d407      	bmi.n	801011e <__swsetup_r+0x32>
 801010e:	2309      	movs	r3, #9
 8010110:	602b      	str	r3, [r5, #0]
 8010112:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010116:	81a3      	strh	r3, [r4, #12]
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e034      	b.n	8010188 <__swsetup_r+0x9c>
 801011e:	0758      	lsls	r0, r3, #29
 8010120:	d512      	bpl.n	8010148 <__swsetup_r+0x5c>
 8010122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010124:	b141      	cbz	r1, 8010138 <__swsetup_r+0x4c>
 8010126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801012a:	4299      	cmp	r1, r3
 801012c:	d002      	beq.n	8010134 <__swsetup_r+0x48>
 801012e:	4628      	mov	r0, r5
 8010130:	f7ff f944 	bl	800f3bc <_free_r>
 8010134:	2300      	movs	r3, #0
 8010136:	6363      	str	r3, [r4, #52]	; 0x34
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801013e:	81a3      	strh	r3, [r4, #12]
 8010140:	2300      	movs	r3, #0
 8010142:	6063      	str	r3, [r4, #4]
 8010144:	6923      	ldr	r3, [r4, #16]
 8010146:	6023      	str	r3, [r4, #0]
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f043 0308 	orr.w	r3, r3, #8
 801014e:	81a3      	strh	r3, [r4, #12]
 8010150:	6923      	ldr	r3, [r4, #16]
 8010152:	b94b      	cbnz	r3, 8010168 <__swsetup_r+0x7c>
 8010154:	89a3      	ldrh	r3, [r4, #12]
 8010156:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801015a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801015e:	d003      	beq.n	8010168 <__swsetup_r+0x7c>
 8010160:	4621      	mov	r1, r4
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f88c 	bl	8010280 <__smakebuf_r>
 8010168:	89a0      	ldrh	r0, [r4, #12]
 801016a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801016e:	f010 0301 	ands.w	r3, r0, #1
 8010172:	d00a      	beq.n	801018a <__swsetup_r+0x9e>
 8010174:	2300      	movs	r3, #0
 8010176:	60a3      	str	r3, [r4, #8]
 8010178:	6963      	ldr	r3, [r4, #20]
 801017a:	425b      	negs	r3, r3
 801017c:	61a3      	str	r3, [r4, #24]
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	b943      	cbnz	r3, 8010194 <__swsetup_r+0xa8>
 8010182:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010186:	d1c4      	bne.n	8010112 <__swsetup_r+0x26>
 8010188:	bd38      	pop	{r3, r4, r5, pc}
 801018a:	0781      	lsls	r1, r0, #30
 801018c:	bf58      	it	pl
 801018e:	6963      	ldrpl	r3, [r4, #20]
 8010190:	60a3      	str	r3, [r4, #8]
 8010192:	e7f4      	b.n	801017e <__swsetup_r+0x92>
 8010194:	2000      	movs	r0, #0
 8010196:	e7f7      	b.n	8010188 <__swsetup_r+0x9c>
 8010198:	20000194 	.word	0x20000194

0801019c <_raise_r>:
 801019c:	291f      	cmp	r1, #31
 801019e:	b538      	push	{r3, r4, r5, lr}
 80101a0:	4604      	mov	r4, r0
 80101a2:	460d      	mov	r5, r1
 80101a4:	d904      	bls.n	80101b0 <_raise_r+0x14>
 80101a6:	2316      	movs	r3, #22
 80101a8:	6003      	str	r3, [r0, #0]
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101b2:	b112      	cbz	r2, 80101ba <_raise_r+0x1e>
 80101b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101b8:	b94b      	cbnz	r3, 80101ce <_raise_r+0x32>
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 f830 	bl	8010220 <_getpid_r>
 80101c0:	462a      	mov	r2, r5
 80101c2:	4601      	mov	r1, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ca:	f000 b817 	b.w	80101fc <_kill_r>
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d00a      	beq.n	80101e8 <_raise_r+0x4c>
 80101d2:	1c59      	adds	r1, r3, #1
 80101d4:	d103      	bne.n	80101de <_raise_r+0x42>
 80101d6:	2316      	movs	r3, #22
 80101d8:	6003      	str	r3, [r0, #0]
 80101da:	2001      	movs	r0, #1
 80101dc:	e7e7      	b.n	80101ae <_raise_r+0x12>
 80101de:	2400      	movs	r4, #0
 80101e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101e4:	4628      	mov	r0, r5
 80101e6:	4798      	blx	r3
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7e0      	b.n	80101ae <_raise_r+0x12>

080101ec <raise>:
 80101ec:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <raise+0xc>)
 80101ee:	4601      	mov	r1, r0
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	f7ff bfd3 	b.w	801019c <_raise_r>
 80101f6:	bf00      	nop
 80101f8:	20000194 	.word	0x20000194

080101fc <_kill_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4d07      	ldr	r5, [pc, #28]	; (801021c <_kill_r+0x20>)
 8010200:	2300      	movs	r3, #0
 8010202:	4604      	mov	r4, r0
 8010204:	4608      	mov	r0, r1
 8010206:	4611      	mov	r1, r2
 8010208:	602b      	str	r3, [r5, #0]
 801020a:	f7f2 fb1b 	bl	8002844 <_kill>
 801020e:	1c43      	adds	r3, r0, #1
 8010210:	d102      	bne.n	8010218 <_kill_r+0x1c>
 8010212:	682b      	ldr	r3, [r5, #0]
 8010214:	b103      	cbz	r3, 8010218 <_kill_r+0x1c>
 8010216:	6023      	str	r3, [r4, #0]
 8010218:	bd38      	pop	{r3, r4, r5, pc}
 801021a:	bf00      	nop
 801021c:	2000457c 	.word	0x2000457c

08010220 <_getpid_r>:
 8010220:	f7f2 bb08 	b.w	8002834 <_getpid>

08010224 <_malloc_usable_size_r>:
 8010224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010228:	1f18      	subs	r0, r3, #4
 801022a:	2b00      	cmp	r3, #0
 801022c:	bfbc      	itt	lt
 801022e:	580b      	ldrlt	r3, [r1, r0]
 8010230:	18c0      	addlt	r0, r0, r3
 8010232:	4770      	bx	lr

08010234 <__swhatbuf_r>:
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	460c      	mov	r4, r1
 8010238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801023c:	2900      	cmp	r1, #0
 801023e:	b096      	sub	sp, #88	; 0x58
 8010240:	4615      	mov	r5, r2
 8010242:	461e      	mov	r6, r3
 8010244:	da0d      	bge.n	8010262 <__swhatbuf_r+0x2e>
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	f013 0f80 	tst.w	r3, #128	; 0x80
 801024c:	f04f 0100 	mov.w	r1, #0
 8010250:	bf0c      	ite	eq
 8010252:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010256:	2340      	movne	r3, #64	; 0x40
 8010258:	2000      	movs	r0, #0
 801025a:	6031      	str	r1, [r6, #0]
 801025c:	602b      	str	r3, [r5, #0]
 801025e:	b016      	add	sp, #88	; 0x58
 8010260:	bd70      	pop	{r4, r5, r6, pc}
 8010262:	466a      	mov	r2, sp
 8010264:	f000 f848 	bl	80102f8 <_fstat_r>
 8010268:	2800      	cmp	r0, #0
 801026a:	dbec      	blt.n	8010246 <__swhatbuf_r+0x12>
 801026c:	9901      	ldr	r1, [sp, #4]
 801026e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010272:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010276:	4259      	negs	r1, r3
 8010278:	4159      	adcs	r1, r3
 801027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801027e:	e7eb      	b.n	8010258 <__swhatbuf_r+0x24>

08010280 <__smakebuf_r>:
 8010280:	898b      	ldrh	r3, [r1, #12]
 8010282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010284:	079d      	lsls	r5, r3, #30
 8010286:	4606      	mov	r6, r0
 8010288:	460c      	mov	r4, r1
 801028a:	d507      	bpl.n	801029c <__smakebuf_r+0x1c>
 801028c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	6123      	str	r3, [r4, #16]
 8010294:	2301      	movs	r3, #1
 8010296:	6163      	str	r3, [r4, #20]
 8010298:	b002      	add	sp, #8
 801029a:	bd70      	pop	{r4, r5, r6, pc}
 801029c:	ab01      	add	r3, sp, #4
 801029e:	466a      	mov	r2, sp
 80102a0:	f7ff ffc8 	bl	8010234 <__swhatbuf_r>
 80102a4:	9900      	ldr	r1, [sp, #0]
 80102a6:	4605      	mov	r5, r0
 80102a8:	4630      	mov	r0, r6
 80102aa:	f7ff f8fb 	bl	800f4a4 <_malloc_r>
 80102ae:	b948      	cbnz	r0, 80102c4 <__smakebuf_r+0x44>
 80102b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102b4:	059a      	lsls	r2, r3, #22
 80102b6:	d4ef      	bmi.n	8010298 <__smakebuf_r+0x18>
 80102b8:	f023 0303 	bic.w	r3, r3, #3
 80102bc:	f043 0302 	orr.w	r3, r3, #2
 80102c0:	81a3      	strh	r3, [r4, #12]
 80102c2:	e7e3      	b.n	801028c <__smakebuf_r+0xc>
 80102c4:	89a3      	ldrh	r3, [r4, #12]
 80102c6:	6020      	str	r0, [r4, #0]
 80102c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102cc:	81a3      	strh	r3, [r4, #12]
 80102ce:	9b00      	ldr	r3, [sp, #0]
 80102d0:	6163      	str	r3, [r4, #20]
 80102d2:	9b01      	ldr	r3, [sp, #4]
 80102d4:	6120      	str	r0, [r4, #16]
 80102d6:	b15b      	cbz	r3, 80102f0 <__smakebuf_r+0x70>
 80102d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102dc:	4630      	mov	r0, r6
 80102de:	f000 f81d 	bl	801031c <_isatty_r>
 80102e2:	b128      	cbz	r0, 80102f0 <__smakebuf_r+0x70>
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	f023 0303 	bic.w	r3, r3, #3
 80102ea:	f043 0301 	orr.w	r3, r3, #1
 80102ee:	81a3      	strh	r3, [r4, #12]
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	431d      	orrs	r5, r3
 80102f4:	81a5      	strh	r5, [r4, #12]
 80102f6:	e7cf      	b.n	8010298 <__smakebuf_r+0x18>

080102f8 <_fstat_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4d07      	ldr	r5, [pc, #28]	; (8010318 <_fstat_r+0x20>)
 80102fc:	2300      	movs	r3, #0
 80102fe:	4604      	mov	r4, r0
 8010300:	4608      	mov	r0, r1
 8010302:	4611      	mov	r1, r2
 8010304:	602b      	str	r3, [r5, #0]
 8010306:	f7f2 fafc 	bl	8002902 <_fstat>
 801030a:	1c43      	adds	r3, r0, #1
 801030c:	d102      	bne.n	8010314 <_fstat_r+0x1c>
 801030e:	682b      	ldr	r3, [r5, #0]
 8010310:	b103      	cbz	r3, 8010314 <_fstat_r+0x1c>
 8010312:	6023      	str	r3, [r4, #0]
 8010314:	bd38      	pop	{r3, r4, r5, pc}
 8010316:	bf00      	nop
 8010318:	2000457c 	.word	0x2000457c

0801031c <_isatty_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d06      	ldr	r5, [pc, #24]	; (8010338 <_isatty_r+0x1c>)
 8010320:	2300      	movs	r3, #0
 8010322:	4604      	mov	r4, r0
 8010324:	4608      	mov	r0, r1
 8010326:	602b      	str	r3, [r5, #0]
 8010328:	f7f2 fafb 	bl	8002922 <_isatty>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	d102      	bne.n	8010336 <_isatty_r+0x1a>
 8010330:	682b      	ldr	r3, [r5, #0]
 8010332:	b103      	cbz	r3, 8010336 <_isatty_r+0x1a>
 8010334:	6023      	str	r3, [r4, #0]
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	2000457c 	.word	0x2000457c

0801033c <_init>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	bf00      	nop
 8010340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010342:	bc08      	pop	{r3}
 8010344:	469e      	mov	lr, r3
 8010346:	4770      	bx	lr

08010348 <_fini>:
 8010348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034a:	bf00      	nop
 801034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801034e:	bc08      	pop	{r3}
 8010350:	469e      	mov	lr, r3
 8010352:	4770      	bx	lr
